<div>
    This article shows how ejb remote clients can be configured and connected in a more dynamic way.</div>
<div>
    <br /></div>
Within wildfly (current version 8.0.0.Final) there are several possibilities to connect ejb remote clients. Descriptions can be found on:<br />
<div>
    <ul>
        <li>the standard way with jboss-ejb-client.properties<br /><a href="https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project">https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project</a></li>
        <li>a programmatic way<br /><a href="http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html">http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html</a></li>
    </ul>
    <h4>
    </h4>
    <h3>
    </h3>
    <h3>
        The Problem</h3>
    <div>
        <br />
        You have an application for two (or more) tenants which are identical but are deployed on different machines. Customers should be able to switch between those tenants without restarting the application. Additionally the code itself should not depend on tenant specific code.<br />
        As far as i know this would be necessary with the standard approach (jboss-ejb-client.properties) given above.<br />
        <br /></div>
    <h4>
    </h4>
    <h3>
    </h3>
    <h3>
        A Solution</h3>
    <div>
        <br />
        After some consideration i have identified the following five components which are needed to implement this feature.</div>
    <div>
        <ul>
            <li>Component that creates WildFly ejb remote connections</li>
            <li>Component that produces the JNDI-Context</li>
            <li>Component that holds the selected tenant-key for the client</li>
            <li>Component that maps the tenant-keys to connection properties</li>
            <li>CDI-Modul Qualifier</li>
        </ul>
    </div>
    <div>
        <br />
        Putting them together leads to the following UML:</div>
    <div>
        <br /></div>
    <div class="separator" style="clear: both; text-align: center;">
    </div>
    <div>
        <div class="separator" style="clear: both; text-align: center;">
        </div>
        <div class="separator" style="clear: both; text-align: center;">
            <a href="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" height="382" width="640" /></a></div>
        <br /></div>
    <div>
        <br /></div>
    <div>
        To keep the example as simple as possible i have decided to use the ejb-remote-quickstart example and extend it with the jndicontext module. The current implementation uses a simple property file which holds the following data.</div>
    <div>
<pre>tenant1.host=localhost
tenant1.port=8080
tenant1.username=test
tenant1.password=test
tenant1.noanonymous=false

tenant2.host=192.168.0.104
tenant2.port=8080
tenant2.username=test
tenant2.password=test
tenant2.noanonymous=false
</pre>
    </div>
    <div>
        <br /></div>
    <div>
        <h3>
            The Fazit</h3>
        <br />
        The resulting service locator just has to use the JndiSession (in this example the RemoteEJBClient) which technically holds the tenant key and can be set from the GUI.<br />
        <div>
<pre>public class RemoteEJBClient {
    @Inject @JndiContextAnno
    Instance&lt;Context&gt; contextInstance;

    @Inject
    JndiSession jndiSession;
    //...snip
    private RemoteCalculator lookupRemoteStatelessCalculator() throws NamingException {
        Context context = contextInstance.get();
        //...snip
    }
}

public class CDIBootStrapper {
    public static void main(String[] args) throws Exception
    {
        WeldContainer weld = new Weld().initialize();
        RemoteEJBClient client = weld.instance().select(RemoteEJBClient.class).get();

        client.getJndiSession().setTenantKey("tenant1");
        client.invokeStatelessBean();

        client.getJndiSession().setTenantKey("tenant2");
        client.invokeStatelessBean();
    }
)</pre>
        </div>
        So the code looks very clean and in comparison to jboss-ejb-client.properties way more functional.<br />
        The sources can be found on&nbsp;<a href="https://bitbucket.org/abischof/injectablejndicontext">https://bitbucket.org/abischof/injectablejndicontext</a>.<br />
        Have fun coding... ;)</div>
</div>
