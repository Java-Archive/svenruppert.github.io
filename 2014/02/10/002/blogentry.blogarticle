Today I was preparing a few slides for my next JUG talk.
For this if started with a normal piece of code like the following.

<br/>
<pre class="brush: java">  
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        final List&lt;List&lt;Integer&gt;&gt; resultMatrix = new ArrayList&lt;&gt;();
        final Random random = new Random();
        for(int anzahlKurven = 0; anzahlKurven &lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&lt;Integer&gt; result = new ArrayList&lt;&gt;();
            for (int i = 0; i &lt; 10; i++) {
                final int nextInt = random.nextInt(100);
                result.add(nextInt);
            }
            resultMatrix.add(result);
        }
        return resultMatrix;
    }

    </class></pre>
Next step would be the creation of two methods...
<br/>
<pre class="brush: java">  
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        final List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
        for(int anzahlKurven = 0; anzahlKurven &lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&lt;Integer&gt; demoValuesForY = generateDemoValuesForY();
            result.add(demoValuesForY);
        }
        return result;
    }
    public List&lt;Integer&gt; generateDemoValuesForY() {
        final Random random = new Random();
        final List&lt;Integer&gt; result = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; 10; i++) {
            final int nextInt = random.nextInt(100);
            result.add(nextInt);
        }
        return result;
    }
    </class></pre>
Ok, lookÂ´s like always... booooring.... So I started with Streams..
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&lt;Integer&gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&gt; {
                    return random.nextInt(100);
                })
                .limit(10)
                .collect(Collectors.toList());
    }
    </class></pre>
Not really better.. only new syntax.. now reducing the syntax..
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&lt;Integer&gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&gt; random.nextInt(100))
                .limit(10)
                .collect(Collectors.toList());
    }

    </class></pre>
But Random offer something new.
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&lt;Integer&gt; generateDemoValuesForY(){
        return new Random()
                .ints(0, 100)
                .limit(10)
                .boxed()
                .collect(Collectors.toList());
    }
    </class></pre>
Combining both methods..
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        final Random random = new Random();
        return Stream.generate(
                    () -&gt; Stream.generate(
                            () -&gt; random.nextInt(100))
                            .limit(10)
                            .collect(Collectors.toList())
                )
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    </class></pre>
OK, not short enough.. we could it better..
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        return Stream.generate(
                () -&gt; new Random()
                        .ints(0, 100)
                        .limit(10)
                        .boxed()
                        .collect(Collectors.toList())
                ).limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    </class></pre>
Uuuppsss..  static imports possible.. ;-)
<br/>
<pre class="brush: java">
    public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix() {
        return generate(() -&gt; new Random()
                .ints(0, 100)
                .limit(10).boxed().collect(toList())
        ).limit(ANZAHL_KURVEN).collect(toList());
    }
    </class></pre>

Now compare with the first  and decide ;-) Streams are cool ? I think so!!
