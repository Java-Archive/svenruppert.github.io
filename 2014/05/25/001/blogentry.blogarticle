<h2>
    Vaadin's roadmap&nbsp;</h2>
Vaadin released the most current release 7.2 in the middle of may. It offers some interesting features like responsive layouts for components (letting components react on size changes and set new css-styles depending on the current size), native support for IE11 and improved push channel with support for long polling, Tomcat 8, Wildfly 8, Glassfish 4, Jetty 9.1. To be honest, I didn't already try all new features.

<br />
<br />
As you can read on their roadmap (<a href="https://vaadin.com/blog/-/blogs/7-series" target="_blank">here</a>&nbsp;or&nbsp;<a href="https://vaadin.com/roadmap" target="_blank">here</a>) the next release 7.3 (to be released in june) will contain a new theme called 'Valo' which looks pretty nice and which I wanted to try for a new project. There are already two alpha versions available for it and I will show you later in this post how I got it running.<br />
<br />
Then there will be a version 7.4 which will contain a new component 'Grid' which seems to become very important. By now the Table-component seems to be one of the core components used in Vaadin-applications. If we believe the Vaadin guys, Grid will become Table's big brother with lots of improvements and new functions that the Table can't offer (e.g. dynamic row heights). I'm very curious about it and it really seems to become a big component because its release will be splitted in two parts. A first version of Grid will be released with version 7.4 but the following release 7.5 will mainly focus on extending the Grid-component.<br />
<br />
<h2>
    Valo</h2>
<div>
    Let's focus on the new theme 'Valo'. The Vaadin guys posted a preview-picture of the new styles and in my opinion this looks really nice:</div>
<div>
    <br /></div>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody>
<tr><td style="text-align: center;"><a href="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;groupId=10187&amp;t=1396549547676" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="403" src="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;groupId=10187&amp;t=1396549547676" width="640" /></a></td></tr>
<tr><td class="tr-caption" style="text-align: center;"><a href="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;groupId=10187&amp;t=1396549547676">https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;groupId=10187&amp;t=1396549547676</a></td></tr>
</tbody></table>
<div>
    <br /></div>
<div>
    <br /></div>
<div>
    As I already wrote it will be included in release version 7.3 in june. There are already two beta versions - alpha1 and alpha2 - which you can use to start experimenting.</div>
<div>
    <br /></div>
<div>
    Here is what I did to get a Vaadin-Project running with the new theme in version 7.3.0.alpha2 (I mainly followed the instructions from the <a href="http://vaadin.com/download/prerelease/7.3/7.3.0/7.3.0.alpha2/release-notes.html" target="_blank">release notes</a>&nbsp;but at some points I had to go a slightly different way):</div>
<div>
    <br /></div>
<div>
    <br />
    <ol>
        <li>Create a new maven project from the vaadin archetype "vaadin-archetype-application" with version 7.3.0.alpha2</li>
        <li>mvn clean install</li>
        <li>Navigate to the exploded war-directory and from there navigate to WEB-INF/lib</li>
        <li>Extract "vaadin-themes-7.3.0.alpha2.jar" as it contains the needed "valo" folder</li>
        <li>Copy the folder VAADIN/themes/valo (from the extracted vaadin-themes-7.3.0.alpha2 folder) to the folder src/main/webapp/VAADIN/themes in your Vaadin-project. The "valo" folder should now exist next to your "mytheme"-folder.</li>
        <li>Change the content of the "mytheme.scss"-file in your "mytheme"-folder to the following:<br /><pre>// Any variables you wish to override should be done before importing Valo

// Modify the base color of the theme
$v-app-background-color: hsl(200, 50%, 50%);

@import "../valo/valo";

@mixin mytheme {
  @include v-valo;
}</pre>
        </li>
        <li>Install ruby (because it contains the needed sass-compiler which will be included in the final 7.3-release but which is not included in the alpha-version). You can download and install it from <a href="http://www.rubyinstaller.org/" target="_blank">http://www.rubyinstaller.org/</a>. I installed it on Windows and after installing it I used the console to install the sass-compiler via ruby by entering the following command: gem install sass
        </li>
        <li>Navigate via console to your project and into the folder src/main/webapp/VAADIN/mytheme
        </li>
        <li>Enter the following command: sass styles.scss styles.css</li>
        <li>Go into your project's pom.xml. Comment out the &lt;goal&gt;compile-theme&lt;/goal&gt; - entry in the "vaadin-maven-plugin".<i> Look at the update at the end of this posting for more explaination on this.</i></li>
        <li>Build&nbsp;(e.g. by running mvn install)&nbsp;and deploy your war file to your web-/applicationserver - Done!</li>
    </ol>
    <b style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;">IMPORTANT: Have a look at your styles.css-file in your mytheme-folder before trying to deploy the application. It should be filled with many thousands of lines. And THAT is the right content. If you have a content like</b><br />
<pre style="background-color: white; color: #222222; font-size: 13px; line-height: 18.479999542236328px;">@import "../valo/valo";

.mytheme {
 name: v-valo args: []
}
</pre>
    <b style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;">then the vaadin sass-compiler (which doesn't work in that alpha version) was run, which overwrites the right content and crashes our theme! This might happen if you didn't comment out the goal-entry from the vaadin-maven-plugin (see step 10) and then run a mvn install.</b><br />
    <br />
    <strike>I was wondering why the styles.css was overwritten when a mvn install was executed because this normally only happens after a vaadin:compile-theme task  (from the vaadin maven plugin) was run and I didn't expect that task to be run when executing a install-task. But as it seems..it does.</strike>&nbsp;&lt;-- Update: Step 10 will fix that.<br />
    <ol>
    </ol>
    <h2>
        Result</h2>
    <ol>
    </ol>
</div>
<div>
    That's how the Vaadin-Sample-Application looks like with Valo:<br />
    <br />
    <div class="separator" style="clear: both; text-align: center;">
        <a href="http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG" height="576" width="640" /></a></div>
    <div class="separator" style="clear: both; text-align: center;">
        <a href="http://1.bp.blogspot.com/-sAhi-vf9lTc/U4EKgBDhJ2I/AAAAAAAAAM4/-N87eumCEko/s1600/valo.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><br /></a></div>
    <br />
    Beautiful, isn't it?<br />
    <br />
    ----------<br />
    <br />
    <b><i>Update 27.05.2014:</i></b><br />
    In the first version of this posting step 10 was "Check if the styles.css has the right content" and I wrote that I couldn't run mvn install because it overwrote the styles.css with the wrong content. So I had to let my IDE make the war-file instead of using mvn install. I fixed that now.<br />
    <br />
    Explaination: The task "compile-theme" from the vaadin-maven-plugin tries to compile the content of styles.scss and write the compiled content to styles.css (I don't know how that scss-stuff works in detail). BUT <b>the compiler used by the compile-theme-task doesn't work</b> in the used alpha-version (the Vaadin guys say it will work in the final release). Because it doesn't work we need to install a compiler which works the correct way (we do this by installing ruby and running the command from step 8 and 9). After running that command the styles.css is valid and <b>we don't want to run the compile-theme task</b> anymore because it will overwrite the styles.css with invalid content. The vaadin-maven-plugin says by its &lt;execution&gt; --&gt; &lt;goal&gt;-entries that those &lt;goal&gt; entries should be run when mvn package or install is called. That's the reason why we have to comment out the compile-theme-task in our pom.xml. After doing that we can just use mvn install as always and then deploy the war-file.</div>
