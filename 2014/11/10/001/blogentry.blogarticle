<h2>Introduction</h2>
<p><a href="https://angularjs.org/">AngularJS</a> is a JavaScript framework that greatly assists in building rich client-side web applications. It pushes techniques
well known among backend developers to the frontend, for instance dependency injection (DI) or expression binding (more precisely two-way-binding).</p>

<p>Another truly helpful element of AngularJS are <a href="https://docs.angularjs.org/guide/directive">directives</a>. You can think of directives as your own means of extending HTML. Or consider it as a means
to reduce repetitive code in HTML and therefore making it more readable and improving maintainability.</p>

<p>This blog entry assumes a basic knowledge of AngularJS' controller concept and how to bind to bind a value of the controller with {{}}.</p>

<h2>A Nav-Bar with Bootstrap</h2>

<h3>Initial Situation</h3>
<p>For a little app I currently develop, I copied the basic nav bar example from the Bootstrap example and extended it with a some behaviour:</p>

<pre brush="html">
&lt;li class="dropdown" ng-class="{
    active: isActive('/categories') || isActive('/fortune') ||
    isActive('/entry-report') || isActive('/savings') || isActive('/audit')
    }"&gt;

    &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown"&gt;
        &lt;span class="glyphicon glyphicon-stats"&gt;&lt;/span&gt; Reports &lt;b class="caret"&gt;&lt;/b&gt;
    &lt;/a&gt;
    &lt;ul class="dropdown-menu"&gt;
        &lt;li ng-class="{active: isActive('/categories')}"&gt;
            &lt;a href="#/categories"&gt;Categories&lt;/a&gt;
        &lt;/li&gt;

        &lt;li ng-class="{active: isActive('/entry-report')}"&gt;
            &lt;a href="#/entry-report"&gt;Entries&lt;/a&gt;
        &lt;/li&gt;

        &lt;li ng-class="{active: isActive('/savings')}"&gt;
            &lt;a href="#/savings"&gt;Savings&lt;/a&gt;
        &lt;/li&gt;

        &lt;li ng-class="{active: isActive('/fortune')}"&gt;
            &lt;a href="#/fortune"&gt;Fortune&lt;/a&gt;
        &lt;/li&gt;

        &lt;li ng-class="{active: isActive('/audit')}"&gt;
            &lt;a href="#/audit"&gt;Audit&lt;/a&gt;
        &lt;/li&gt;

    &lt;/ul&gt;
&lt;/li&gt;
</pre>
<p><code>ng-class</code> is used to add a CSS classes to the element if the specified condition is met. <code>isActive</code> is a method of the corresponding
AngularJS controller, which simply returns <code>true</code> if the currently active URI of the application ends with the provided string. This way an item is
highlighted if the respective link is displayed.</p>

<p>As you can see, there is some repetition if you want to add another entry to the nav bar. You always have to specify the URI for <code>isActive</code> and the
<code>href</code> attribute. Additionally every nav bar entry mostly looks the same, except for the URI and the title of the link.</p>

<p>There is a better way: an AngularJS directive helps us to remove the repetition with both of the above mentioned problems.</p>

<h3>The solution</h3>

<p>We create a directive:</p>

<pre brush="javascript">
var myDirectives = angular.module('myApp.directives', []);

myDirectives.directive('navEntry', ['$location', function ($location) {

    function link(scope, element, attrs) {

        function setSafeLink(element) {

            var link = element.find('a');
            link.attr('href', '#' + attrs.path);
        }

        setSafeLink(element);

        scope.$watch(function () {
            return $location.path();
        }, function (newLocation) {

            if (attrs.path === newLocation) {
                element.addClass('active');
            } else {
                element.removeClass('active');
            }
        });
    }

    return {
        replace: true,
        restrict: 'E',
        scope: {
            path: '@',
            title: '@'
        },
        templateUrl: '/js/directives/navEntry/nav-entry.html',
        link: link
    };


}]);
</pre>

<figure style="float: right; margin: 5px 0 5px 15px; text-align: center">
    <img src="http://www.rapidpm.org/2014/11/10/folderStructure.png" >
    <figcaption>Folder Structure</figcaption>
</figure>

<p>This is the template, that the directives links to:</p>

<pre brush="html">
&lt;li&gt;
    &lt;a &gt;{{title}}&lt;/a&gt;
&lt;/li&gt;
</pre>

<p>Here are the core explanations</p>

<ul>
    <li>the name of the directive is <code>navEntry</code>, which means it can be used as <code>&lt;nav-entry&gt;</code> in the HTML. This is Angulars standard way of using directives.</li>
    <li>we depend on <code>$location</code> being injected (for checking which URI is currently active)</li>
    <li>the function <code>link(scope, element, attrs)</code> is executed once for each actual usage (instance) of the directive</li>
     <ul>
         <li>the link of our navigation entry is set with <code>setSafeLink()</code> to the value of the path attribute and the title of the title attribute of the directive instance</li>
         <li>a listener, which triggers when the URI changes, is registered</li>
         <li>if the URI changes, we check whether the currently active URI matches the path attribute of the directive instance (which governs whether or not the navigation entry is active)</li>
     </ul>
    <li><code>restrict: 'E'</code>: the directive is used like a separate element</li>
    <li><code>templateUrl</code>: the path of content of the directive</li>
    <li><code>scope</code>:</li>
        <ul>
            <li>this defines an own scope for each directive instance, isolated from the scope of the controller actually being responsible (isolate scope)</li>
            <li>path: '@' the directive element shall have an attribute path, which value is mapped to the scope property path <code>(&lt;nav-bar path="/mypath"&gt;)</code></li>
            <li>shorthand notation for <code>path: '@path'</code></li>
        </ul>
    <li><code>replace: true</code>: means that the directive usage in the HTML is replaced by content of the template of the
        directive when building the final DOM</li>
</ul>

<p>Actually I wanted to set the <code>href</code> attribute in the template, but AngularJS has some security mechanism that prevents us from using something like</p>

<pre brush="html">
    &lt;a href="#{{path}}"&gt;...&lt;/a&gt;
</pre>

<p>That's why setSafeLink() adds href instead.</p>

<h3>The Result</h3>
        
<pre brush="html">
&lt;li class="dropdown" ng-class="{
    active: isActive('/categories') || isActive('/fortune') ||
    isActive('/entry-report') || isActive('/savings') || isActive('/audit')
    }"&gt;

    &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown"&gt;
        &lt;span class="glyphicon glyphicon-stats"&gt;&lt;/span&gt; Reports &lt;b class="caret"&gt;&lt;/b&gt;
    &lt;/a&gt;
    &lt;ul class="dropdown-menu"&gt;

        &lt;nav-entry path="/categories" title="Category Overview"&gt;&lt;/nav-entry&gt;

        &lt;nav-entry path="/category" title="Category"&gt;&lt;/nav-entry&gt;

        &lt;nav-entry path="/entry-report" title="Entries"&gt;&lt;/nav-entry&gt;

        &lt;nav-entry path="/savings" title="Savings"&gt;&lt;/nav-entry&gt;

        &lt;nav-entry path="/fortune" title="Fortune"&gt;&lt;/nav-entry&gt;

        &lt;nav-entry path="/audit" title="Balance Audit"&gt;&lt;/nav-entry&gt;

    &lt;/ul&gt;
&lt;/li&gt;
</pre>

<h2>Conclusion</h2>

<p>This is a lot less code than in the initial setup and adding a new navigation entry is pretty easy now. We removed the duplication of the URI string, which is a
little less error prone. Moreover, we now could the change the template in one place instead of touching all navigation entries, which makes it DRY.</p>

<p>The idea could even be taken a little further. A potential next step is to make the whole dropdown element a separate directive, which could lift the need to
separately list each <code>isActive('/...') </code> branch for the contained &lt;nav-bar&gt;.</p>

<h2>Outlook</h2>
<p>Stay tuned for another example of what you can do with directives in part 2. Next time we'll have a look into how to format currency values.</p>