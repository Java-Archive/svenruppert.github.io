<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>IntelliJ</title>
    <category label="IntelliJ"/>
    <updated>2015-01-10T02:18:05.220+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>IntelliJ - kleine Dinge aus dem Entwickleralltag..</title>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Tools"/>
        <published>2013-05-22T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/22/intellij-kleine-dinge-aus-dem-entwickl.html" rel="tag"&gt;IntelliJ - kleine Dinge aus dem Entwickleralltag..&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-22"&gt;2013-05-22&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;Bei der Verwendung von IntelliJ heute ist mir ein kleines Symbol am Rand aufgefallen. Bei näherer Betrachtung ist mir aufgefallen…&amp;nbsp; es zeigt mir an dass es hier eine Rekursion gibt.. Nettes Icon..&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-kpNzrYtCKgg/UZ0oJAXuNII/AAAAAAABQ1c/dHaHcsyRM40/s1600-h/image%25255B5%25255D.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-_nMBkpHGIhk/UZ0oKEKBFoI/AAAAAAABQ1k/D_ocl9SAPGw/image_thumb%25255B3%25255D.png?imgmax=800" width="496" height="281"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-22&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JavaEE - Arquillian - first version to play</title>
        <category label="Arquillian"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JBoss"/>
        <category label="jUnit"/>
        <published>2013-05-29T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/29/javaee-arquillian-first-version-to-pla.html" rel="tag"&gt;JavaEE - Arquillian - first version to play&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-29"&gt;2013-05-29&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &amp;nbsp;;-)&lt;br /&gt;
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.&lt;br /&gt;
kurz: Was ist Arquillian?&lt;br /&gt;
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.&lt;br /&gt;
&lt;a href="http://arquillian.org/" target="_blank"&gt;Arquillian Homepage&lt;/a&gt; –&amp;gt; Unter &lt;a href="https://bitbucket.org/svenruppert/javaee-arquillian" target="_blank"&gt;Bitbucket - JavaEE – Arquillian&lt;/a&gt; sind alle Sourcen in einem Git-Repository.&lt;br /&gt;
&lt;br /&gt;
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.&lt;br /&gt;
Interessant ist der Abschnitt im Profil &lt;strong&gt;arquillian-jbossas-managed&lt;/strong&gt;. Unter &lt;strong&gt;build-&amp;gt;testRessourcen&lt;/strong&gt; ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.&lt;br /&gt;
&lt;br /&gt;
Die nächste Konfigurationsstelle ist die Datei&amp;nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800" height="388" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="865" /&gt;&lt;/a&gt;&lt;br /&gt;
Remote Test auf einem JBoss.&lt;br /&gt;
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.&lt;br /&gt;
In der Datei arquillian.xml unter &lt;strong&gt;jbossas-remot&lt;/strong&gt; ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.&lt;br /&gt;
&lt;br /&gt;
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)&lt;br /&gt;
Demnächst dann mehr mit praktischen Dingen…&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-29&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-06-26T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/06/26/cdi-commons-dynamic-service-resolver.html" rel="tag"&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-06-26"&gt;2013-06-26&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;In meinem Blog über CDi und i18n (&lt;a href="http://www.rapidpm.org/2013/06/cdi-commons-i18n.html" target="_blank"&gt;Artikel&lt;/a&gt;) hatte ich einen PropertyRegistryService vorgestellt.&lt;/p&gt; &lt;p&gt;Als Beispiel wurde der Producer für die Instanz eines SimpleDateFormat gezeigt. &lt;/p&gt; &lt;p&gt;&lt;a href="http://lh3.ggpht.com/-uHPakGHkaOQ/UcrzhykV6lI/AAAAAAABSKM/U5BFjin6KH4/s1600-h/image%25255B3%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-nl3-2Ew87K8/UcrzihB3ncI/AAAAAAABSKU/f0Z4x6v8JGU/image_thumb%25255B1%25255D.png?imgmax=800" width="644" height="284"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Nicht schön war die harte Kopplung der Implementierung des PropertyRegistryService. Per Annotation wurde&lt;/p&gt; &lt;p&gt;die Implementierung deklariert. &lt;strong&gt;@CDIPropertyRegistryFileBased&lt;/strong&gt; (im Blog noch @CDIFileBased)&lt;/p&gt; &lt;p&gt;Immer wieder muss aber zur Laufzeit entschieden werden welche Implementierung verwendet werden soll/muss.&lt;/p&gt; &lt;p&gt;Das kann verschiedene Gründe haben wie z.B. das derzeitige Lastverhalten, der angemeldete User und und und.&lt;/p&gt; &lt;p&gt;Wie also die Endscheidung vornehmen? &lt;/p&gt; &lt;p&gt;Zwei Dinge sind notwendig:&lt;/p&gt; &lt;p&gt;1) Das Interface der implementierenden Klasse, in unserem Fall PropertyRegistryService&lt;/p&gt; &lt;p&gt;2) und der Qualifier um den richtigen Producer zu selektieren.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-h00St984Puw/UcrzjsYJWqI/AAAAAAABSKY/_tdGiHgBOtM/s1600-h/image%25255B10%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-qqqZ7bBXoYU/UcrzkSEbvAI/AAAAAAABSKk/uysM0o1UCdo/image_thumb%25255B6%25255D.png?imgmax=800" width="1028" height="436"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Das Interface ist relativ leicht zu ermitteln. Mann kann es fest angeben, da man weiß das man genau dieses Interface benötigt.&lt;/p&gt; &lt;p&gt;Wenn auch das dynamisch ermittelt werden muss, kann man hier ähnlich wie bei den MessageRessourcen vorgehen. Es wird ein Key übergeben, der an anderer Stelle auf ein Interface gemappt wird. Hier einfach simuliert durch die Methode &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Class mapp2Class(final String key)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Spannender wird es bei der Auswahl der richtigen Qualifiers. Das ist der Kern der Implementierung.&amp;nbsp; Simuliert wird es hier &lt;/p&gt; &lt;p&gt;durch die Methode &lt;strong&gt;resolveContextImpl().&lt;/strong&gt; Wie genau die Implementierung aussehen kann, hängt von der Umgebung ab und welche Parameter ausgewertet werden müssen.&lt;/p&gt; &lt;p&gt;Die Implementierung hier erzeugt ein &lt;strong&gt;AnnotationLiteral&amp;lt;CDIPropertyRegistryFileBased&amp;gt;.&lt;/strong&gt; Das ist wieder eine harte Kopplung, kann jedoch wieder durch einen Mappingmechanismus zur Laufzeit aufgelöst werden.&amp;nbsp; Am einfachsten,&amp;nbsp; in dem man eine Klasse dynamisch instanziiert, die von AnnotationLitaral erbt.&lt;/p&gt; &lt;p&gt;z.B.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-G1N0nxPr5Jw/UcrzlHIDuvI/AAAAAAABSKs/Los4mxtfuRs/s1600-h/image%25255B14%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y0L-RO_BVbQ/Ucrzl2JaOdI/AAAAAAABSK0/H3f7eFzzq1Y/image_thumb%25255B8%25255D.png?imgmax=800" width="644" height="118"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-06-26&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Transactions tested with Arquillian</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IntelliJ"/>
        <category label="jUnit"/>
        <category label="Transactions"/>
        <category label="Weld"/>
        <published>2013-07-15T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/07/15/cdi-transactions-tested-with-arquillia.html" rel="tag"&gt;CDI Transactions tested with Arquillian&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-07-15"&gt;2013-07-15&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;How to implement a scope like an transaction? The main goal was the reusability for an SE environment.&lt;/p&gt; &lt;p&gt;After a little bit google- searching I found the ConversationScope. A google start, but not usable in an SE environment.&lt;/p&gt; &lt;p&gt;So I started to write my own Scope. (&lt;a href="https://bitbucket.org/svenruppert/cdi-commons" target="_blank"&gt;Source –&amp;gt; Bitbucket&lt;/a&gt;) First step will be an annotation CDITransactionScope with the default Annotations.&lt;/p&gt; &lt;p&gt;The only new one is the annotation @NormalScope. With this annotation the container will use this as an Scope-Qualifier.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-8_n9oH0Dbm4/UeP4SKa0QwI/AAAAAAABSuU/2x_jChe15Qs/s1600-h/image%25255B8%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y8G10V5KAP4/UeP4SmByerI/AAAAAAABSuc/8PSmYE4yWaU/image_thumb%25255B4%25255D.png?imgmax=800" width="644" height="100"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt; &lt;p&gt;The next step is the implementation of an extension. This is done by the class CDITransactionExtension extends Extension.&lt;/p&gt; &lt;p&gt;The interface Extension itself is empty and only a marker.&amp;nbsp; The task to full fill is the registration of an context. &lt;/p&gt; &lt;p&gt;The AfterBeanDiscovery event is used to add the instance of the context implementation. Important to know is, that at this point the init-phase of the weld-container is not ready.&lt;/p&gt; &lt;p&gt;No &lt;strong&gt;@Inject&lt;/strong&gt; is possible and the only instance that can be injected is the BeanManager.&amp;nbsp; &lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-w7ajr6R2Wpo/UeP4TMXBvSI/AAAAAAABSug/Fd7arvk8qqk/s1600-h/image%25255B12%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-UPQ2B0YHxyk/UeP4TWPOnnI/AAAAAAABSus/oiAHxpFRDzY/image_thumb%25255B6%25255D.png?imgmax=800" width="644" height="124"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally we have to implement the heard of the transaction, the CDITransactionContext implements Context.&lt;/p&gt; &lt;p&gt;This is a class, not managed by the Container and again no &lt;strong&gt;@Inject&lt;/strong&gt; is possible, but the BeanManager&lt;/p&gt; &lt;p&gt;is usable. (see &lt;strong&gt;CDITransactionExtension&lt;/strong&gt; ) &lt;/p&gt; &lt;p&gt;Four methods are found to implement from the interface Context.&lt;/p&gt; &lt;p&gt;1) public Class&amp;lt;? extends Annotation&amp;gt; getScope()&lt;/p&gt; &lt;p&gt;2) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual, CreationalContext&amp;lt;T&amp;gt; creationalContext);&lt;/p&gt; &lt;p&gt;3) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual);&lt;/p&gt; &lt;p&gt;4) public boolean isActive();&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Nr 2 and 3 are the important methods to implement. This methods are handling the instance-management.&lt;/p&gt; &lt;p&gt;The easiest implementation could be a map like HashMap&amp;lt;Class, Object&amp;gt;.&lt;/p&gt; &lt;p&gt;This implementation will cache all classes implementing the Interface Cacheable. (&lt;a href="https://bitbucket.org/rapidpm/genericcache" target="_blank"&gt;GenericCache&lt;/a&gt;) &lt;/p&gt; &lt;p&gt;If an Class is implementing this Interface it will be cached, otherwise you will always get a new instance.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-6bfsAetJgo0/UeP4UAQJKrI/AAAAAAABSu0/to6jHAfYi5Q/s1600-h/image%25255B21%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-Ox2h6Dou6EY/UeP4UkYhxPI/AAAAAAABSu8/mPyXJd_ZWrc/image_thumb%25255B11%25255D.png?imgmax=800" width="908" height="772"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To activate this Extension, the class CDITransactionExtension must be registered in the file META-INF/javax.enterprise.inject.spi.Extension &lt;/p&gt; &lt;p&gt;with the full class name. &lt;/p&gt; &lt;p&gt;Now we can start writing transactions. &lt;/p&gt; &lt;p&gt;The Transaction (&lt;strong&gt;AbstractCDITransaction&lt;/strong&gt;) is an Executor-Pattern.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-qdFoduyDt0E/UeP4VeY1VOI/AAAAAAABSvA/q2Hsj9Z0Rkw/s1600-h/image%25255B26%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-wyJOQFyWvX4/UeP4V5E1H2I/AAAAAAABSvM/eQO5yuJdMEw/image_thumb%25255B14%25255D.png?imgmax=800" width="644" height="377"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To Implement a transaction you have to implement an transaction – class with the method doIt().&lt;/p&gt; &lt;p&gt;Here is an excample with references inside and ad the same time outside of the active transaction.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-l69QbJiKoXU/UeP4WVnFc5I/AAAAAAABSvU/ueWyg9BvvOU/s1600-h/image%25255B30%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-tqIEH8iq9XI/UeP4Ww--MsI/AAAAAAABSvc/QK5bf-jKmJM/image_thumb%25255B16%25255D.png?imgmax=800" width="644" height="358"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Inside the transaction are all instances with the Qualifier @&lt;strong&gt;CDITransactionScop&lt;/strong&gt; .&lt;/p&gt; &lt;p&gt;For this jUnitTest I implemented two Producers, one for the Instances inside the transaction and one for the outside one.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-zUQhJDisv4Y/UeP4XQ1EfuI/AAAAAAABSvg/XzXjLsCJ1l4/s1600-h/image%25255B34%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh6.ggpht.com/-Zldm9h4o5E4/UeP4X_orOmI/AAAAAAABSvs/CsMKhkxeZqw/image_thumb%25255B18%25255D.png?imgmax=800" width="644" height="351"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally the UML for this small demo.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-pMH_HP0lwT0/UeP4YZGo_CI/AAAAAAABSv0/2GoNh3uvdNU/s1600-h/image%25255B38%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-RKdm-qREa4Y/UeP4Y7e2MCI/AAAAAAABSv8/r9TFk6fpDuA/image_thumb%25255B20%25255D.png?imgmax=800" width="883" height="772"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-07-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.fx -JavaFX/CDI Bootstrap</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="Weld"/>
        <published>2013-08-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/08/03/cdi.commons.fx-javafx-cdi-bootstrap.html" rel="tag"&gt;cdi.commons.fx -JavaFX/CDI Bootstrap&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-08-03"&gt;2013-08-03&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;The both technologies JavaFX and CDI are greate for itself.. but how to combine them? How I can get managed JavaFX - controller instances? &lt;br /&gt;
Starting from the JavaFX – side, we have to implement the Class extending &lt;strong&gt;javafx.application.Application.&lt;/strong&gt; The importand method will be &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;public&lt;/code&gt; &lt;code&gt;void&lt;/code&gt; &lt;code&gt;start(Stage primaryStage) &lt;/code&gt;&lt;code&gt;throws&lt;/code&gt; &lt;code&gt;Exception&lt;/code&gt;&lt;/em&gt;&lt;/blockquote&gt;
&lt;code&gt;&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/main/java/org/rapidpm/demo/cdi/commons/fx/CDIJavaFXBaseApplication.java?at=develop" target="_blank"&gt;CDIJavaFXBaseApplication&lt;/a&gt;&lt;/code&gt; &lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-spRH4z861ZQ/Uf12wRaYx5I/AAAAAAABTJI/dma-IzG6hho/s1600-h/image%25255B3%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-IKNxCJX9Ma8/Uf12wwRsReI/AAAAAAABTJQ/MQTcwt1GbIU/image_thumb%25255B1%25255D.png?imgmax=800" height="274" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt;  &lt;br /&gt;
&amp;nbsp; &lt;br /&gt;
With &lt;strong&gt;CDIContainerSingleton.getInstance()&lt;/strong&gt; you will get an instance of the Weld-Container. After the normal JavaFX – init&amp;nbsp; there will be an event fired with the primaryStage as attribute. Now the primaryStage is available in an managed environment. &lt;br /&gt;
JAvaFX –&amp;gt; CDI &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;cdi.event()&lt;/code&gt;&lt;code&gt;.select(Stage.&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;new&lt;/code&gt; &lt;code&gt;AnnotationLiteral&amp;lt;CDIStartupScene&amp;gt;() {})&lt;/code&gt;&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .fire(primaryStage);&lt;/em&gt;&lt;/code&gt;&lt;/blockquote&gt;
The observer will catch this event. Hownthis will be donw, I show with the excample jUnit-test.&lt;br /&gt;
(&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/test/java/org/rapidpm/demo/cdi/commons/fx/JavaFXBaseTest.java?at=develop" target="_blank"&gt;JavaFXBaseTest&lt;/a&gt;)&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-pe3l8kSIZrI/Uf12xUqXCaI/AAAAAAABTJY/4qNT0JYh-5o/s1600-h/image%25255B7%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh6.ggpht.com/-mYyW73L1y7A/Uf12xkbSleI/AAAAAAABTJg/GrkqVjLTMhM/image_thumb%25255B3%25255D.png?imgmax=800" height="345" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&amp;gt; testImpl(final Stage stage). The jUnit-Test will be a manged instance itself.&lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-rIZgDI2CmZc/Uf12yFhNcaI/AAAAAAABTJo/xmDBb7Nilas/s1600-h/image%25255B11%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-ANX-6HvYjEk/Uf12y-vIj3I/AAAAAAABTJw/sbkL-wTuD-A/image_thumb%25255B5%25255D.png?imgmax=800" height="484" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="636" /&gt;&lt;/a&gt; &lt;br /&gt;
But how to get the manged controller class instance?&lt;br /&gt;
This is done by the &lt;code&gt;&lt;strong&gt;FXMLLoaderSingleton used from the jUnit-test.&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;
&lt;blockquote&gt;
&lt;pre class="brush:java"&gt;
final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;br /&gt;
During the process of loading the fxml-file the used FxmlLoader will get an instance of an ControllerFactory-Callback.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-81g1FPtpMV0/Uf12zchLfMI/AAAAAAABTJ4/UZ6beCx-JkE/s1600-h/image%25255B15%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-snchFSsAGE8/Uf12zxccG1I/AAAAAAABTKA/WmMrwTqTh50/image_thumb%25255B7%25255D.png?imgmax=800" height="379" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The importand lines are the following &lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-TW3PcealhwQ/Uf120NC8jFI/AAAAAAABTKI/8Tz8jER8lbU/s1600-h/image%25255B19%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-2vpQxC1vfnI/Uf1207BA-xI/AAAAAAABTKQ/f8jnqwb7CC0/image_thumb%25255B9%25255D.png?imgmax=800" height="93" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The ControllerFactory-&amp;gt;Callback.call() will give back a manged instance of the controller class.&lt;br /&gt;
Now you can use CDI inside the pojo-fx-controller class.&lt;br /&gt;


&lt;pre class="prettyprint"&gt;
public class LoginController implements CDIJavaFxBaseController {
    // Standard FXML injected fields
 @FXML TextField loginField;
 @FXML PasswordField passwordField;
 @FXML Text feedback;
 
 // CDI Injected field
 @Inject LoginService loginService;
 
    // Default application parameters
 @Inject @CDIJavaFXBaseApp
    Parameters applicationParameters;
 
 @FXML protected void handleSubmitButtonAction(ActionEvent event) {
  feedback.setText(loginService.login(loginField.getText(), passwordField.getText()));
 }

 @Override
 public void initialize(URL location, ResourceBundle resources) {
  loginField.setText(applicationParameters.getNamed().get("user"));
 }
}
&lt;/pre&gt;



&lt;br /&gt;
So we are done..&amp;nbsp; Happy coding ;-)&lt;br /&gt;
&lt;br /&gt;
UML-Diagramm&lt;br /&gt;
&lt;img alt="" src="http://wiki.rapidpm.org/download/attachments/8093789/uml_fx_20130802_001.png?version=1&amp;amp;modificationDate=1375433878726&amp;amp;api=v2" height="479" width="640" /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-08-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Developing leJOS programs with IntelliJ on Windows</title>
        <category label="0.5.0"/>
        <category label="EV3"/>
        <category label="IntelliJ"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <category label="windows"/>
        <published>2013-12-27T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/12/27/developing-lejos-programs-with-intelli.html" rel="tag"&gt;Developing leJOS programs with IntelliJ on Windows&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-12-27"&gt;2013-12-27&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;a href="http://www.lejos.org/"&gt;LeJOS&lt;/a&gt; is the java library which is needed to develop and run java programs on Lego Mindstorms robots. Four days ago, the newest alpha version 0.5.0 was released. One big new feature is an all new gui-menu which is displayed on the LCD-Display for executing programs on the brick without executing a remote command (via telnet or SSH).&lt;br /&gt;
&lt;br /&gt;
The official guides use eclipse as the IDE for developing lejos programs and in this tutorial I want to explain how to develop programs with IntelliJ on Windows. I will also show how to transfer finished programs to the brick and execute it via remote connection and via the new display menu.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    Initial situation &lt;/h2&gt;
&lt;br /&gt;
You have created the bootable MicroSD-Card for running Lejos (version 0.5.0-alpha) on the Mindstorms brick and inserted it into the brick (a tutorial on how to create is can be found &lt;a href="http://sourceforge.net/p/lejos/wiki/Creating%20a%20bootable%20SD%20card/"&gt;here&lt;/a&gt;. Recognize that the procedure has changed from version 0.4.0-alpha to 0.5.0-alpha). You also have a compatible WiFi-Stick (e.g. Netgear WNA1100) which is inserted into the USB-Plug on the brick.&lt;br /&gt;
&lt;br /&gt;
So let's start. What we will do is:&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Clone the official lejos git repository to get the sources which we need to build our program&lt;/li&gt;
    &lt;li&gt;Create and configure the IntelliJ-Project for our lejos program&lt;/li&gt;
    &lt;li&gt;Write the code for the program (the usual HelloWorld from the official guide)&lt;/li&gt;
    &lt;li&gt;Create a runnable JAR-File of the program&lt;/li&gt;
    &lt;li&gt;Transfer the JAR-File onto the brick via WiFi / SSH&lt;/li&gt;
    &lt;li&gt;Execute the program via the new display menu&lt;/li&gt;
    &lt;li&gt;Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
    1 Clone the official lejos git repository to get the sources which we need to build our program&lt;/h3&gt;
For cloning the lejos git repository you must have installed git (which can be obtained from &lt;a href="http://git-scm.com/download/win"&gt;here&lt;/a&gt;). For comfort (not having to use single git commands on the command line) we used the free-to-use (for non-commercial use) GUI-Tool SmartGitHg 5
(version 5.0.5) by syntevo which rocks and can be downloaded on the &lt;a href="http://www.syntevo.com/smartgithg/"&gt;official site&lt;/a&gt;. When you start the program for the first time you have to tell SmartGitHg where your git installation is located, but thats quite straight-forward and the wizard will help you doing that. After you have started and configured SmartGitHg choose:&lt;br /&gt;
"Project" --&amp;gt; "Clone ..."&lt;br /&gt;
Then choose:&lt;br /&gt;
"Remote Git, Mercurial or Subversion Repository" and enter git://git.code.sf.net/p/lejos/ev3 into the textfield.&lt;br /&gt;
Then click "Next". In the next window make sure both check boxes are checked. Click "Next" again. Choose a path where the source should be copied to (We chose the path "F:\projects\ev3-sources" which we will call EV3-SOURCES by now). Then click "Next" again. On the last window choose the option "Open in new project" and leave the name in the textfield as it is. Finally press "Finish". SmartGitHg will then start downloading all files from the repository. This might need some minutes. You can watch the progress in the right bottom corner of the window.&lt;br /&gt;
After the download has finished the window should look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s1600/smartgit.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="346" src="http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s640/smartgit.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;SmartGitHg, downloaded EV3-sources&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
At last we have to choose the 0.5.0-alpha tag branch. Choose "Branch" --&amp;gt; "Checkout...". In the following window choose the 0.5.0-alpha tag branch as shown in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s1600/checkout.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="427" src="http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s640/checkout.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;checking out the 0.5.0-alpha tag branch&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Press "Check out" and then choose "Check out commit without switching to a branch".&lt;br /&gt;
&lt;br /&gt;
Now that we have the lejos sources in version 0.5.0-alpha let's start creating our IntelliJ project for our HelloWorld-Program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    2 Create and configure the IntelliJ-Project for our lejos program&lt;/h3&gt;
Start IntelliJ and choose: "File" --&amp;gt; "New Project...". Choose "Java Module" and call it HelloWorld. We saved it in "F:\projects\HelloWorld" (which I will call HELLOWORLD by now). Then press "Next" and "Finish".&lt;br /&gt;
&lt;br /&gt;
Now that we have a raw new project, lets first configure it before creating the HelloWorld-code. Open the project settings ("File"--&amp;gt;"Project Structure") and click on "modules". Then click on "Add Content Root" and choose EV3-SOURCES\ev3-classes\src and click on "OK". Do the same with EV3-SOURCES\DBusJava\src.&lt;br /&gt;
As next click on "Librarys" on the "Project Structure"-window. Click on the green "+" and choose "Java". Then choose the folder EV3-SOURCES\ev3-classes\lib and click on "OK". Click on "OK" again.&lt;br /&gt;
Press "Apply" and "OK" to close the project structure window now.&lt;br /&gt;
Your project structure should now look like this:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s1600/projectstructure.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="212" src="http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s400/projectstructure.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Project structure&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;
    3 Write the code for the program&lt;/h3&gt;
Now let's create the code. Create a class in HelloWorld\src and call it "Main". Make it look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;import lejos.hardware.Button;
import lejos.hardware.lcd.LCD;

public class Main {
&amp;nbsp;&amp;nbsp;&amp;nbsp; public static void main(String[] args) {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.drawString("First EV3 Program", 0, 5);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Button.waitForAnyPress();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.refresh();

&amp;nbsp;&amp;nbsp;&amp;nbsp; }
}
&amp;nbsp;&lt;/pre&gt;
If the imports fail, something went wrong with the configuration of the project structure.&lt;br /&gt;
&lt;br /&gt;
As you can see the class implements the Main-method. It will show "First EV3 Program" on the display of your EV3-Brick until you press any button on the brick.&lt;br /&gt;
&lt;br /&gt;
That's it. Now we are ready to create a runnable JAR of our program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    4 Create a runnable JAR-File of the program&lt;/h3&gt;
Open the project settings again ("File" --&amp;gt; "Project Structure..."). Click on "Artifacts".Click on the green "+" and choose "Jar" --&amp;gt; "From modules with dependencies...". Leave everything as it is in the new window but enter "Main" into the field "Main Class" like in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s1600/jarfile.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="247" src="http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s400/jarfile.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Creating jar-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Then click on "OK". Click on "Apply" and close the Project Structure-Window. Now we need to do one last thing before creating our ready-to-execute Jar. There is a new folder in your HelloWorld-src folder called "META-INF". It contains a MANIFEST.MF-File. It contains two lines as you can see in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s1600/manifest.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="206" src="http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s400/manifest.PNG" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;MANIFEST-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Now you need to add the following line:&lt;br /&gt;
Class-Path: /home/root/lejos/lib/ev3classes.jar /home/root/lejos/libjna/usr/share/java/jna.jar&lt;br /&gt;
&lt;br /&gt;
You can copy/paste that line because the paths are absolute paths on the MicroSD-card.&lt;br /&gt;
&lt;br /&gt;
That's it. Save everything and choose "Build"--&amp;gt;"Build artifacts..."--&amp;gt;HelloWorld.jar--&amp;gt;"build". If you get some warnings that's okay. If you get errors anything went wrong (let us know). Now we have created a Jar-File (in HELLOWORLD\out\artifacts\HelloWorld_jar) which we can transfer via WiFi to the EV3-Brick.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    5 Transfer the JAR-File onto the brick via WiFi / SSH&lt;/h3&gt;
To transfer the jar-file from our workstation to the EV3-Brick we need a connection to it. So start your EV3 with the lejos-MicroSD-card and the WiFi-Stick inserted. Make sure that your robot has an IP-Adress in your network. A description on how this is done via the menu can be found &lt;a href="http://sourceforge.net/p/lejos/wiki/Configuring%20Wifi/"&gt;here&lt;/a&gt; (that didn't work for us, so we had to edit the file /etc/wpa_supplicant.conf on the microSD-card by hand).&lt;br /&gt;
&lt;br /&gt;
Now that our EV3 is online and connected to the WiFi we will transfer the jar-file onto the robot. Therefore we need to download pscp.exe from &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;. We downloaded it to "C:\Users\Marco\Downloads".&lt;br /&gt;
Open up a cmd-box (Windows-Button --&amp;gt; enter "cmd", then choose cmd.exe) and navigate to the folder which contains the downloaded pscp.exe. Then enter the following command:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;blockquote class="tr_bq"&gt;
    pscp -scp HELLOWORLD\out\artifacts\HelloWorld_jar\HelloWorld.jar root@IP_OF_EV3:/home/lejos/programs&lt;/blockquote&gt;
&lt;br /&gt;
&lt;br /&gt;
If you are asked for the root password just hit enter. The root user on the linux-system on the microSD card has no password. In my case that looked like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s1600/cmd.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="171" src="http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s640/cmd.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;transfering the jar-file onto the brick&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
That's it! The file now was copied onto the EV3-brick (in /home/lejos/programs). Time to execute our program.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    6 Execute the program via the new display menu&lt;/h3&gt;
On the display menu move to "Files" (by pressing the right button). Press "Enter" (the middle button). Now you will see "HelloWorld.jar" on the display. Press "Enter" again. Now you will see "Execute Program" on the display. Press "Enter" once more and enjoy the magic :). It will need some seconds where you will only see a blank display. But then the "First EV3 Program" will be displayed as expected. When you press any button the program will end as expected and you will be back at the menu. Congratulations for running your lejos program developed with IntelliJ on Windows!&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    7 Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/h3&gt;
Sometimes you might want to run your programs which you uploaded onto the brick remotely instead of pressing buttons on the brick. One solution for this is to use a ssh connection via putty. So&amp;nbsp; download it from &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt; (putty.exe). After downloading, execute the putty.exe. Enter the IP of your EV3 into the field "Host Name (or IP address)" and click on "Open". This will open a remote console. Enter "root" as user name and just press enter when asked for password. Now you could run your program. But we have to do one more thing before executing the program: We have to disable the menu. If we wouldn't do this, both (the String "First EV3 Program" of our program AND the display menu) would be displayed in the display. So in the menu navigate to "System" and select "Suspend Menu". The menu will now be suspended and the display will be blank. Now back to our remote console. Enter the following command to execute the program (which we transfered to /home/lejos/programs on the brick earlier):&lt;br /&gt;
&lt;blockquote class="tr_bq"&gt;
    jrun -cp /home/lejos/programs/HelloWorld.jar Main&lt;/blockquote&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s1600/putty.PNG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="402" src="http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s640/putty.PNG" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;remote console in putty&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
Look at the display and enjoy the magic again ;). It will again need some seconds until you will see the string on the display. Hit any button on the brick to end the program. If you want the menu back after executing the program press the middle button and the lower button on the brick. The display menu will be back instantly.&lt;br /&gt;
&lt;br /&gt;
If you have any questions or problems during the process feel free to leave a comment.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-12-27&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
