<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JBoss</title>
    <category label="JBoss"/>
    <updated>2015-01-10T02:11:00.363+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>JavaEE - Arquillian - first version to play</title>
        <category label="Arquillian"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JBoss"/>
        <category label="jUnit"/>
        <published>2013-05-29T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/29/javaee-arquillian-first-version-to-pla.html" rel="tag"&gt;JavaEE - Arquillian - first version to play&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-29"&gt;2013-05-29&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &amp;nbsp;;-)&lt;br /&gt;
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.&lt;br /&gt;
kurz: Was ist Arquillian?&lt;br /&gt;
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.&lt;br /&gt;
&lt;a href="http://arquillian.org/" target="_blank"&gt;Arquillian Homepage&lt;/a&gt; –&amp;gt; Unter &lt;a href="https://bitbucket.org/svenruppert/javaee-arquillian" target="_blank"&gt;Bitbucket - JavaEE – Arquillian&lt;/a&gt; sind alle Sourcen in einem Git-Repository.&lt;br /&gt;
&lt;br /&gt;
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.&lt;br /&gt;
Interessant ist der Abschnitt im Profil &lt;strong&gt;arquillian-jbossas-managed&lt;/strong&gt;. Unter &lt;strong&gt;build-&amp;gt;testRessourcen&lt;/strong&gt; ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.&lt;br /&gt;
&lt;br /&gt;
Die nächste Konfigurationsstelle ist die Datei&amp;nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800" height="388" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="865" /&gt;&lt;/a&gt;&lt;br /&gt;
Remote Test auf einem JBoss.&lt;br /&gt;
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.&lt;br /&gt;
In der Datei arquillian.xml unter &lt;strong&gt;jbossas-remot&lt;/strong&gt; ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.&lt;br /&gt;
&lt;br /&gt;
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)&lt;br /&gt;
Demnächst dann mehr mit praktischen Dingen…&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-29&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>One way to deadlock a JBoss AS 7</title>
        <category label="Deadlock"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="RapidPM"/>
        <published>2014-02-03T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html" rel="tag"&gt;One way to deadlock a JBoss AS 7&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-03"&gt;2014-02-03&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Take a standard JBoss AS 7 and create/deploy a simple remote stateless session bean with two methods. One of them should
be asynchronous. As shown in the following example the asynchronous method creates a little bit of load and the second one&amp;nbsp;simulates a login.

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public interface IMyBean
{
 Future&amp;lt;Void&amp;gt; doNothing();
 void login();
}&lt;/pre&gt;
&lt;pre class="brush: java"&gt;@Stateless
@Remote(IMyBean.class)
public class MyBean implements IMyBean
{
 @Override
 @Asynchronous
 public Future&amp;lt;Void&amp;gt; doNothing()
 {
  //Creates Load
  int lo = 0;
  for (int i = 0; i &amp;lt; 5000; i++)
  {
   lo += i;
  }
  System.out.println("nothing done");
  return new AsyncResult&amp;lt;Void&amp;gt;(null);
 }
 @Override
 public void login()
 {
  System.out.println("logged in");
 }
}
&lt;/pre&gt;
In the next step besides 10 EJB-Remote-Clients which access the asynchronous method parallel&amp;nbsp;we create an additional client which repeatly tries to login.
(Note: Classpath contains jboss-ejb-client.properties and jboss-client.jar)

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class HangTest
{
 public static void main(String args[]) throws NamingException
 {
  //EJB-Remote-Access
  Properties jndiProps = new Properties();
  jndiProps.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
  Context context = new InitialContext(jndiProps);
  final IMyBean myBean = (IMyBean) context.lookup("ejb:/hangtest/MyBean!IMyBean");

  //Create and start asynchronous method threads
  final List&amp;lt;Thread&amp;gt; threadList = new ArrayList&amp;lt;&amp;gt;();
  for (int i = 0; i &amp;lt; 10; i++)
  {
   Thread thread = new Thread()
   {
    @Override
    public void run()
    {
     try
     {
      myBean.doNothing().get();
     }
     catch(Exception e)
     {
      e.printStackTrace();
     }
     finally
     {
      threadList.remove(this);
     }
    }
   };
   threadList.add(thread);
   thread.start();
  }

  //Repeated Login
  while(!threadList.isEmpty())
  {
   System.out.println("Try login...");
   myBean.login();
  }
 }
}
&lt;/pre&gt;
The code above works as expected which means that random server messages ("nothing done", "logged in") are printed out and that the login client can login. It also can be executed as many times as you want without a change in behavior.&lt;br /&gt;
BUT if you increase the number of asynchronous method clients for example to 20-30 (depending on your computer) then nothing is printed out and the login client can not login anymore. The JBoss or -&amp;nbsp;to be more specific - some&amp;nbsp;components of it are in a deadlock
(Note: JBoss shutdown does not work anymore).

So what has happened?&lt;br /&gt;
&lt;br /&gt;
To answer this question we have to look into the standalone.xml, especially in the subsystem "urn:jboss:domain:ejb3". This section contains ejb3-related configurations and among them threadpools.&amp;nbsp;In this context it is important&amp;nbsp;that the default threadpool is shared between asynchronous calls, timers and ejb-remote.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;&amp;lt;subsystem xmlns="urn:jboss:domain:ejb3:1.2"&amp;gt;&lt;/pre&gt;
&lt;pre class="brush: java"&gt;...
 &amp;lt;async thread-pool-name="default"/&amp;gt;
 &amp;lt;timer-service thread-pool-name="default"&amp;gt;
  &amp;lt;data-store path="timer-service-data" relative-to="jboss.server.data.dir"/&amp;gt;
        &amp;lt;/timer-service&amp;gt;
 &amp;lt;remote connector-ref="remoting-connector" thread-pool-name="default"&amp;gt;
  &amp;lt;thread-pools&amp;gt;
   &amp;lt;thread-pool name="default"&amp;gt;
    &amp;lt;max-threads count="10"/&amp;gt;
    &amp;lt;keepalive-time time="100" unit="milliseconds"/&amp;gt;
   &amp;lt;/thread-pool&amp;gt;
  &amp;lt;/thread-pools&amp;gt;
   &amp;lt;/remote&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/pre&gt;
&lt;br /&gt;
So if you stumble upon that problem either increase the max-thread count property or even better seperate the thread-pools for asynchronous and ejb-remote components. &lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Raspberry Wildfly Cluster for less than 300EUR</title>
        <category label="IoT"/>
        <category label="JBoss"/>
        <category label="JDK8"/>
        <category label="Raspberry PI"/>
        <category label="Wildfly"/>
        <published>2014-02-13T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/13/raspberry-wildfly-cluster-for-less-tha.html" rel="tag"&gt;Raspberry Wildfly Cluster for less than 300EUR&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-13"&gt;2014-02-13&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;So WildFly 8 is final now.&lt;br /&gt;
In this article i like to show how you can create a development/testing wildly cluster with raspberry pis and only one power supply.&lt;br /&gt;
&lt;br /&gt;
I have bought:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;5x Raspberry Pis (Model B) with Wireless USB-Adapters&lt;/li&gt;
    &lt;li&gt;1x 10-Port USB 2.0 Hub&lt;/li&gt;
    &lt;li&gt;5x USB to Micro USB Adpapter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG" height="400" width="300" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
The Raspberries are configured with Raspbian Wheezy (wlan auto), JDK 8 and Wildfly 8 Final.&lt;br /&gt;
&lt;div&gt;
    In this combination you have to remove the '-server' from the domain.sh otherwise WildFly won't start.&lt;/div&gt;
&lt;br /&gt;
The WildFly Configuration can be made within 5 minutes.&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Master&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Create management user admin (./add-user.sh)&lt;/li&gt;
        &lt;li&gt;Create a management slave user for each of your pi slaves (./add-user.sh)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Remember the secret value at the end of this process for each slave (e.g.&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&amp;lt;secret value="MTIzNDU=" /&amp;gt;&lt;/span&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to the public interface (e.g. 192.168.0.103)&amp;nbsp;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;li&gt;Slave&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Configure host.xml with the slave name of 1.1&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;host name="slave1" xmlns="urn:jboss:domain:2.0"&amp;gt;&lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Configure the server identity&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style="font-family: Menlo; font-size: 11px;"&gt;
                &amp;lt;server-identities&amp;gt;
                &amp;lt;secret value="MTIzNDU="/&amp;gt;
                &amp;lt;/server-identities&amp;gt;
            &lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to master and public interface (e.g. 192.168.0.104)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;To simply the typing i have written a small script that takes the master-ip and the bind-ip&lt;/li&gt;
&lt;span style="font-family: Menlo; font-size: 11px;"&gt;&lt;pre&gt;#MasterAdress
MASTER_ADDRESS=$1

# Bind Addresses
BIND_ADDRESS=$2

JBOSS_BIND_ADDRESS_MANAGEMENT=$BIND_ADDRESS
JBOSS_BIND_ADDRESS=$BIND_ADDRESS
JBOSS_BIND_ADDRESS_UNSECURE=$BIND_ADDRESS

sudo ./domain.sh -Djboss.bind.address.unsecure=$JBOSS_BIND_ADDRESS_UNSECURE -Djboss.bind.address.management=$BOSS_BIND_ADDRESS_MANAGEMENT -Djboss.bind.address=$JBOSS_BIND_ADDRESS -Djboss.domain.master.address=$MASTER_ADDRESS&lt;/pre&gt;
&lt;/span&gt;

        &lt;/ul&gt;
    &lt;/ol&gt;
&lt;/ol&gt;
Ready. Now you can deploy any archive either to main-server-group (just a domain) or other-server-group (full cluster).&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI EJB-Remote Context for wildfly</title>
        <category label="CDI"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="JNDI"/>
        <category label="RapidPM"/>
        <category label="Wildfly"/>
        <published>2014-02-17T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/17/cdi-ejb-remote-context-for-wildfly.html" rel="tag"&gt;CDI EJB-Remote Context for wildfly&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-17"&gt;2014-02-17&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;div&gt;
    This article shows how ejb remote clients can be configured and connected in a more dynamic way.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
Within wildfly (current version 8.0.0.Final) there are several possibilities to connect ejb remote clients. Descriptions can be found on:&lt;br /&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;the standard way with jboss-ejb-client.properties&lt;br /&gt;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project"&gt;https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;a programmatic way&lt;br /&gt;&lt;a href="http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html"&gt;http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        The Problem&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        You have an application for two (or more) tenants which are identical but are deployed on different machines. Customers should be able to switch between those tenants without restarting the application. Additionally the code itself should not depend on tenant specific code.&lt;br /&gt;
        As far as i know this would be necessary with the standard approach (jboss-ejb-client.properties) given above.&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        A Solution&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        After some consideration i have identified the following five components which are needed to implement this feature.&lt;/div&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Component that creates WildFly ejb remote connections&lt;/li&gt;
            &lt;li&gt;Component that produces the JNDI-Context&lt;/li&gt;
            &lt;li&gt;Component that holds the selected tenant-key for the client&lt;/li&gt;
            &lt;li&gt;Component that maps the tenant-keys to connection properties&lt;/li&gt;
            &lt;li&gt;CDI-Modul Qualifier&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;
        Putting them together leads to the following UML:&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;/div&gt;
        &lt;div class="separator" style="clear: both; text-align: center;"&gt;
            &lt;a href="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png" height="382" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        To keep the example as simple as possible i have decided to use the ejb-remote-quickstart example and extend it with the jndicontext module. The current implementation uses a simple property file which holds the following data.&lt;/div&gt;
    &lt;div&gt;
&lt;pre&gt;tenant1.host=localhost
tenant1.port=8080
tenant1.username=test
tenant1.password=test
tenant1.noanonymous=false

tenant2.host=192.168.0.104
tenant2.port=8080
tenant2.username=test
tenant2.password=test
tenant2.noanonymous=false
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;h3&gt;
            The Fazit&lt;/h3&gt;
        &lt;br /&gt;
        The resulting service locator just has to use the JndiSession (in this example the RemoteEJBClient) which technically holds the tenant key and can be set from the GUI.&lt;br /&gt;
        &lt;div&gt;
&lt;pre&gt;public class RemoteEJBClient {
    @Inject @JndiContextAnno
    Instance&amp;lt;Context&amp;gt; contextInstance;

    @Inject
    JndiSession jndiSession;
    //...snip
    private RemoteCalculator lookupRemoteStatelessCalculator() throws NamingException {
        Context context = contextInstance.get();
        //...snip
    }
}

public class CDIBootStrapper {
    public static void main(String[] args) throws Exception
    {
        WeldContainer weld = new Weld().initialize();
        RemoteEJBClient client = weld.instance().select(RemoteEJBClient.class).get();

        client.getJndiSession().setTenantKey("tenant1");
        client.invokeStatelessBean();

        client.getJndiSession().setTenantKey("tenant2");
        client.invokeStatelessBean();
    }
)&lt;/pre&gt;
        &lt;/div&gt;
        So the code looks very clean and in comparison to jboss-ejb-client.properties way more functional.&lt;br /&gt;
        The sources can be found on&amp;nbsp;&lt;a href="https://bitbucket.org/abischof/injectablejndicontext"&gt;https://bitbucket.org/abischof/injectablejndicontext&lt;/a&gt;.&lt;br /&gt;
        Have fun coding... ;)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Wildfly/JBoss: How to secure customer passwords</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-02-28T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/28/wildfly-jboss--how-to-secure-customer-.html" rel="tag"&gt;Wildfly/JBoss: How to secure customer passwords&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-28"&gt;2014-02-28&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;div&gt;
    If you are familiar with Wildfly/JBoss you might now that you can easily configure your system to use JAAS database authentication  for the login process of your customer. Because it is considered bad practice to store passwords in clear text a hash-algorithm (e.g. SHA256, MD5) can be specified to encrypt them. Further informations can be found under&amp;nbsp;&lt;a href="https://docs.jboss.org/author/display/WFLY8/Security+subsystem+configuration"&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    The problem with that approach is that your passwords will be vulnerable to dictionary and rainbowtable attacks (refresh your knowlegde&amp;nbsp;&lt;a href="http://netsecurity.about.com/od/hackertools/a/Rainbow-Tables.htm"&gt;here&lt;/a&gt;).&lt;/div&gt;
&lt;div&gt;
    One way to face this problem is to use salted hashed passwords but the standard DatabaseServerLoginModule does not support that. But you can use &lt;a href="http://www.rtner.de/software/PBKDF2.html"&gt;this&lt;/a&gt;&amp;nbsp;extension of the DatabaseServerLoginModule.&lt;/div&gt;
&lt;div&gt;
    The configuration is fairly easy:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
    Wildfly/JBoss Konfiguration&lt;/h3&gt;
&lt;div&gt;
    &lt;b&gt;1&lt;/b&gt;. Create module&lt;/div&gt;
&lt;div&gt;
    Create the new module de.rtner.security.main and configure the module.xml like this&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;module xmlns="urn:jboss:module:1.1" name="de.rtner.security"&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource-root path="PBKDF2-1.0.4.jar"/&amp;gt;
        &amp;lt;resource-root path="SaltedDatabaseLoginModule-1.0.4.jar"/&amp;gt;
    &amp;lt;/resources&amp;gt;
   &amp;lt;dependencies&amp;gt;
        &amp;lt;module name="javax.api"/&amp;gt;
        &amp;lt;module name="javax.servlet.api"/&amp;gt;
        &amp;lt;module name="org.jboss.as.web-common"/&amp;gt;
        &amp;lt;module name="org.jboss.logging"/&amp;gt;
        &amp;lt;module name="org.picketbox"/&amp;gt;
        &amp;lt;module name="sun.jdk"/&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/module&amp;gt;&lt;/pre&gt;
    Both declared jars must also be present in that folder.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;2&lt;/b&gt;. Update module.xml of picketbox.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    Every custom login module has to be declared as a dependencies in the module.xml of picketbox. So just add this line:&lt;br /&gt;
    &lt;pre&gt;&amp;lt;module name="de.rtner.security"/&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;3&lt;/b&gt;. Update standalone.xml&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;login-module code="de.rtner.security.auth.spi.SaltedDatabaseServerLoginModule" flag="required" module="de.rtner.security"&amp;gt;
 &amp;lt;module-option name="dsJndiName" value="java:jboss/datasources/ExampleDS"/&amp;gt;
 &amp;lt;module-option name="principalsQuery" value="select password from User where login=?"/&amp;gt;
 &amp;lt;module-option name="rolesQuery" value="select role, 'Roles' from UserRole where login=?"/&amp;gt;
 &amp;lt;module-option name="hmacAlgorithm" value="HMacSHA256"/&amp;gt;
 &amp;lt;module-option name="formatter" value="de.rtner.security.auth.spi.PBKDF2HexFormatter"/&amp;gt;
 &amp;lt;module-option name="engine" value="de.rtner.security.auth.spi.PBKDF2Engine"/&amp;gt;
 &amp;lt;module-option name="engine-parameters" value="de.rtner.security.auth.spi.PBKDF2Parameters"/&amp;gt;
&amp;lt;/login-module&amp;gt;&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
The password encryption can be done with the following function.
&lt;br /&gt;
&lt;div&gt;
&lt;pre class="brush: java"&gt;private String createPbKdF2Passwort(String password) throws NoSuchAlgorithmException
{
 PBKDF2Formatter formatter = new PBKDF2HexFormatter();
 SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
 byte[] salt = new byte[8];
 sr.nextBytes(salt);
 int iterations = 1000;
 PBKDF2Parameters p = new PBKDF2Parameters("HmacSHA256", "ISO-8859-1", salt, iterations);
 PBKDF2Engine e = new PBKDF2Engine(p);
 p.setDerivedKey(e.deriveKey(password));
 return formatter.toString(p);
}&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Have fun coding.&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-28&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>PBKDF2 1.1.0 is now available</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-10-15T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/10/15/pbkdf2-1.1.0-is-now-available.html" rel="tag"&gt;PBKDF2 1.1.0 is now available&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-10-15"&gt;2014-10-15&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;div&gt;
        This article gives a short overview over the newest features of the PBKDF2 implementation from Matthias Gaertner. If you don't know what it is and
        what it does no problem. You can read here more about it &lt;a href="http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html"&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;
    &lt;br /&gt;&lt;br/&gt;
    &lt;h2&gt;What is new and noteworthy?&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Fixed warnings on Wildfly 8 due to old picketbox dependency&lt;/li&gt;
            &lt;li&gt;Uploaded to &lt;b&gt;Maven Central&lt;/b&gt;&lt;/li&gt;
            &lt;li&gt;Usage of CI with Travis CI&lt;/li&gt;
            &lt;li&gt;Added more Tests&lt;/li&gt;
            &lt;li&gt;Added sample web application for Wildfly 8 Integration&lt;/li&gt;
            &lt;li&gt;Added more documentation&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        One of the major improvements of this release is the internal refactoring from direct dependencies to gradle so that there is now a much better dependency
        management possible (e.g. Older versions, for example 1.0.5, had problems with newer picketbox versions of Wildfly 8 which lead to log warnings and were not convincing).
        On top of that it was now possible to upload the artefact to maven central:

&lt;pre class="brush: xml"&gt;
&lt;dependency&gt;
   &lt;groupId&gt;de.rtner&lt;/groupId&gt;
   &lt;artifactId&gt;PBKDF2&lt;/artifactId&gt;
   &lt;version&gt;1.1.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;/pre&gt;

        &lt;br/&gt;
        Please let us know if you encounter any issues, or have any feedback on usability, at &lt;a href="https://github.com/m9aertner/PBKDF2"&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;.
    &lt;/div&gt;
&lt;br/&gt;
    &lt;h2&gt;Read more about PBKDF2&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href="http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html"&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="https://github.com/m9aertner/PBKDF2"&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md"&gt;https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-10-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>This article informs you about the new changes</summary>
    </entry>
</feed>
