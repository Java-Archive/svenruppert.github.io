<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Arquillian</title>
    <category label="Arquillian"/>
    <updated>2015-01-10T02:39:48.885+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>JavaEE - Arquillian - first version to play</title>
        <category label="Arquillian"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JBoss"/>
        <category label="jUnit"/>
        <published>2013-05-29T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/29/javaee-arquillian-first-version-to-pla.html" rel="tag"&gt;JavaEE - Arquillian - first version to play&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-29"&gt;2013-05-29&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &amp;nbsp;;-)&lt;br /&gt;
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.&lt;br /&gt;
kurz: Was ist Arquillian?&lt;br /&gt;
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.&lt;br /&gt;
&lt;a href="http://arquillian.org/" target="_blank"&gt;Arquillian Homepage&lt;/a&gt; –&amp;gt; Unter &lt;a href="https://bitbucket.org/svenruppert/javaee-arquillian" target="_blank"&gt;Bitbucket - JavaEE – Arquillian&lt;/a&gt; sind alle Sourcen in einem Git-Repository.&lt;br /&gt;
&lt;br /&gt;
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.&lt;br /&gt;
Interessant ist der Abschnitt im Profil &lt;strong&gt;arquillian-jbossas-managed&lt;/strong&gt;. Unter &lt;strong&gt;build-&amp;gt;testRessourcen&lt;/strong&gt; ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.&lt;br /&gt;
&lt;br /&gt;
Die nächste Konfigurationsstelle ist die Datei&amp;nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800" height="388" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="865" /&gt;&lt;/a&gt;&lt;br /&gt;
Remote Test auf einem JBoss.&lt;br /&gt;
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.&lt;br /&gt;
In der Datei arquillian.xml unter &lt;strong&gt;jbossas-remot&lt;/strong&gt; ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.&lt;br /&gt;
&lt;br /&gt;
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)&lt;br /&gt;
Demnächst dann mehr mit praktischen Dingen…&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-29&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-06-26T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/06/26/cdi-commons-dynamic-service-resolver.html" rel="tag"&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-06-26"&gt;2013-06-26&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;In meinem Blog über CDi und i18n (&lt;a href="http://www.rapidpm.org/2013/06/cdi-commons-i18n.html" target="_blank"&gt;Artikel&lt;/a&gt;) hatte ich einen PropertyRegistryService vorgestellt.&lt;/p&gt; &lt;p&gt;Als Beispiel wurde der Producer für die Instanz eines SimpleDateFormat gezeigt. &lt;/p&gt; &lt;p&gt;&lt;a href="http://lh3.ggpht.com/-uHPakGHkaOQ/UcrzhykV6lI/AAAAAAABSKM/U5BFjin6KH4/s1600-h/image%25255B3%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-nl3-2Ew87K8/UcrzihB3ncI/AAAAAAABSKU/f0Z4x6v8JGU/image_thumb%25255B1%25255D.png?imgmax=800" width="644" height="284"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Nicht schön war die harte Kopplung der Implementierung des PropertyRegistryService. Per Annotation wurde&lt;/p&gt; &lt;p&gt;die Implementierung deklariert. &lt;strong&gt;@CDIPropertyRegistryFileBased&lt;/strong&gt; (im Blog noch @CDIFileBased)&lt;/p&gt; &lt;p&gt;Immer wieder muss aber zur Laufzeit entschieden werden welche Implementierung verwendet werden soll/muss.&lt;/p&gt; &lt;p&gt;Das kann verschiedene Gründe haben wie z.B. das derzeitige Lastverhalten, der angemeldete User und und und.&lt;/p&gt; &lt;p&gt;Wie also die Endscheidung vornehmen? &lt;/p&gt; &lt;p&gt;Zwei Dinge sind notwendig:&lt;/p&gt; &lt;p&gt;1) Das Interface der implementierenden Klasse, in unserem Fall PropertyRegistryService&lt;/p&gt; &lt;p&gt;2) und der Qualifier um den richtigen Producer zu selektieren.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-h00St984Puw/UcrzjsYJWqI/AAAAAAABSKY/_tdGiHgBOtM/s1600-h/image%25255B10%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-qqqZ7bBXoYU/UcrzkSEbvAI/AAAAAAABSKk/uysM0o1UCdo/image_thumb%25255B6%25255D.png?imgmax=800" width="1028" height="436"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Das Interface ist relativ leicht zu ermitteln. Mann kann es fest angeben, da man weiß das man genau dieses Interface benötigt.&lt;/p&gt; &lt;p&gt;Wenn auch das dynamisch ermittelt werden muss, kann man hier ähnlich wie bei den MessageRessourcen vorgehen. Es wird ein Key übergeben, der an anderer Stelle auf ein Interface gemappt wird. Hier einfach simuliert durch die Methode &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Class mapp2Class(final String key)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Spannender wird es bei der Auswahl der richtigen Qualifiers. Das ist der Kern der Implementierung.&amp;nbsp; Simuliert wird es hier &lt;/p&gt; &lt;p&gt;durch die Methode &lt;strong&gt;resolveContextImpl().&lt;/strong&gt; Wie genau die Implementierung aussehen kann, hängt von der Umgebung ab und welche Parameter ausgewertet werden müssen.&lt;/p&gt; &lt;p&gt;Die Implementierung hier erzeugt ein &lt;strong&gt;AnnotationLiteral&amp;lt;CDIPropertyRegistryFileBased&amp;gt;.&lt;/strong&gt; Das ist wieder eine harte Kopplung, kann jedoch wieder durch einen Mappingmechanismus zur Laufzeit aufgelöst werden.&amp;nbsp; Am einfachsten,&amp;nbsp; in dem man eine Klasse dynamisch instanziiert, die von AnnotationLitaral erbt.&lt;/p&gt; &lt;p&gt;z.B.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-G1N0nxPr5Jw/UcrzlHIDuvI/AAAAAAABSKs/Los4mxtfuRs/s1600-h/image%25255B14%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y0L-RO_BVbQ/Ucrzl2JaOdI/AAAAAAABSK0/H3f7eFzzq1Y/image_thumb%25255B8%25255D.png?imgmax=800" width="644" height="118"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-06-26&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Transactions tested with Arquillian</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IntelliJ"/>
        <category label="jUnit"/>
        <category label="Transactions"/>
        <category label="Weld"/>
        <published>2013-07-15T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/07/15/cdi-transactions-tested-with-arquillia.html" rel="tag"&gt;CDI Transactions tested with Arquillian&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-07-15"&gt;2013-07-15&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;How to implement a scope like an transaction? The main goal was the reusability for an SE environment.&lt;/p&gt; &lt;p&gt;After a little bit google- searching I found the ConversationScope. A google start, but not usable in an SE environment.&lt;/p&gt; &lt;p&gt;So I started to write my own Scope. (&lt;a href="https://bitbucket.org/svenruppert/cdi-commons" target="_blank"&gt;Source –&amp;gt; Bitbucket&lt;/a&gt;) First step will be an annotation CDITransactionScope with the default Annotations.&lt;/p&gt; &lt;p&gt;The only new one is the annotation @NormalScope. With this annotation the container will use this as an Scope-Qualifier.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-8_n9oH0Dbm4/UeP4SKa0QwI/AAAAAAABSuU/2x_jChe15Qs/s1600-h/image%25255B8%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y8G10V5KAP4/UeP4SmByerI/AAAAAAABSuc/8PSmYE4yWaU/image_thumb%25255B4%25255D.png?imgmax=800" width="644" height="100"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt; &lt;p&gt;The next step is the implementation of an extension. This is done by the class CDITransactionExtension extends Extension.&lt;/p&gt; &lt;p&gt;The interface Extension itself is empty and only a marker.&amp;nbsp; The task to full fill is the registration of an context. &lt;/p&gt; &lt;p&gt;The AfterBeanDiscovery event is used to add the instance of the context implementation. Important to know is, that at this point the init-phase of the weld-container is not ready.&lt;/p&gt; &lt;p&gt;No &lt;strong&gt;@Inject&lt;/strong&gt; is possible and the only instance that can be injected is the BeanManager.&amp;nbsp; &lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-w7ajr6R2Wpo/UeP4TMXBvSI/AAAAAAABSug/Fd7arvk8qqk/s1600-h/image%25255B12%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-UPQ2B0YHxyk/UeP4TWPOnnI/AAAAAAABSus/oiAHxpFRDzY/image_thumb%25255B6%25255D.png?imgmax=800" width="644" height="124"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally we have to implement the heard of the transaction, the CDITransactionContext implements Context.&lt;/p&gt; &lt;p&gt;This is a class, not managed by the Container and again no &lt;strong&gt;@Inject&lt;/strong&gt; is possible, but the BeanManager&lt;/p&gt; &lt;p&gt;is usable. (see &lt;strong&gt;CDITransactionExtension&lt;/strong&gt; ) &lt;/p&gt; &lt;p&gt;Four methods are found to implement from the interface Context.&lt;/p&gt; &lt;p&gt;1) public Class&amp;lt;? extends Annotation&amp;gt; getScope()&lt;/p&gt; &lt;p&gt;2) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual, CreationalContext&amp;lt;T&amp;gt; creationalContext);&lt;/p&gt; &lt;p&gt;3) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual);&lt;/p&gt; &lt;p&gt;4) public boolean isActive();&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Nr 2 and 3 are the important methods to implement. This methods are handling the instance-management.&lt;/p&gt; &lt;p&gt;The easiest implementation could be a map like HashMap&amp;lt;Class, Object&amp;gt;.&lt;/p&gt; &lt;p&gt;This implementation will cache all classes implementing the Interface Cacheable. (&lt;a href="https://bitbucket.org/rapidpm/genericcache" target="_blank"&gt;GenericCache&lt;/a&gt;) &lt;/p&gt; &lt;p&gt;If an Class is implementing this Interface it will be cached, otherwise you will always get a new instance.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-6bfsAetJgo0/UeP4UAQJKrI/AAAAAAABSu0/to6jHAfYi5Q/s1600-h/image%25255B21%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-Ox2h6Dou6EY/UeP4UkYhxPI/AAAAAAABSu8/mPyXJd_ZWrc/image_thumb%25255B11%25255D.png?imgmax=800" width="908" height="772"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To activate this Extension, the class CDITransactionExtension must be registered in the file META-INF/javax.enterprise.inject.spi.Extension &lt;/p&gt; &lt;p&gt;with the full class name. &lt;/p&gt; &lt;p&gt;Now we can start writing transactions. &lt;/p&gt; &lt;p&gt;The Transaction (&lt;strong&gt;AbstractCDITransaction&lt;/strong&gt;) is an Executor-Pattern.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-qdFoduyDt0E/UeP4VeY1VOI/AAAAAAABSvA/q2Hsj9Z0Rkw/s1600-h/image%25255B26%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-wyJOQFyWvX4/UeP4V5E1H2I/AAAAAAABSvM/eQO5yuJdMEw/image_thumb%25255B14%25255D.png?imgmax=800" width="644" height="377"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To Implement a transaction you have to implement an transaction – class with the method doIt().&lt;/p&gt; &lt;p&gt;Here is an excample with references inside and ad the same time outside of the active transaction.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-l69QbJiKoXU/UeP4WVnFc5I/AAAAAAABSvU/ueWyg9BvvOU/s1600-h/image%25255B30%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-tqIEH8iq9XI/UeP4Ww--MsI/AAAAAAABSvc/QK5bf-jKmJM/image_thumb%25255B16%25255D.png?imgmax=800" width="644" height="358"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Inside the transaction are all instances with the Qualifier @&lt;strong&gt;CDITransactionScop&lt;/strong&gt; .&lt;/p&gt; &lt;p&gt;For this jUnitTest I implemented two Producers, one for the Instances inside the transaction and one for the outside one.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-zUQhJDisv4Y/UeP4XQ1EfuI/AAAAAAABSvg/XzXjLsCJ1l4/s1600-h/image%25255B34%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh6.ggpht.com/-Zldm9h4o5E4/UeP4X_orOmI/AAAAAAABSvs/CsMKhkxeZqw/image_thumb%25255B18%25255D.png?imgmax=800" width="644" height="351"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally the UML for this small demo.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh5.ggpht.com/-pMH_HP0lwT0/UeP4YZGo_CI/AAAAAAABSv0/2GoNh3uvdNU/s1600-h/image%25255B38%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-RKdm-qREa4Y/UeP4Y7e2MCI/AAAAAAABSv8/r9TFk6fpDuA/image_thumb%25255B20%25255D.png?imgmax=800" width="883" height="772"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-07-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-07-17T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/07/17/cdi-commons-dynamic-service-resolver.html" rel="tag"&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-07-17"&gt;2013-07-17&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;In meinem Blog vom &lt;a href="http://www.rapidpm.org/2013/06/cdi-commons-dynamic-service-resolver.html" target="_blank"&gt;26.6.2013&lt;/a&gt; habe ich über die Möglichkeit geschrieben, wie man zur Laufzeit die &lt;br /&gt;
Implementierung auswählen kann die in die entsprechende Stelle injected wird.&lt;br /&gt;
Es war immer noch notwendig die Producer anzupassen wie in dem Beispiel des SimpleDateFormatterProducer&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-3nOsUPRQFBY/UeZRhRWi8FI/AAAAAAABSyE/ydt6LTVhrd4/s1600-h/image%25255B4%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh4.ggpht.com/-Z1PL3KBjqb8/UeZRhzjaSxI/AAAAAAABSyM/HgBpBsB-kQ0/image_thumb%25255B2%25255D.png?imgmax=800" height="291" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="1028" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Gleich mehrere Dinge die nicht angenehm sind. &lt;br /&gt;
1) der ContextResolver ist hier hart per Qualifier angegeben.&lt;br /&gt;
2) Die Implementierung eines Constructors selbst&lt;br /&gt;
3) Lazy-Init des AttributespropertyregistryService &lt;br /&gt;
4) fehlende Default Implementierung&lt;br /&gt;
&lt;br /&gt;
Aus Sicht der Entwickler wäre folgendes wünschenswert.&lt;br /&gt;
Ein Inject des PropertyregistryService mit folgender Anweisung: &lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-45yPDOnUJxw/UeZRiZrDRSI/AAAAAAABSyQ/Y1ZESUxf9YM/s1600-h/image%25255B23%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-I-yScB0k1CI/UeZRi_UnpXI/AAAAAAABSyc/3u4HtZS8jz0/image_thumb%25255B13%25255D.png?imgmax=800" height="37" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="644" /&gt;&lt;/a&gt;&lt;br /&gt;
Um das zu erreichen wird die Klasse &lt;strong&gt;PropertyRegistryServiceProducer&lt;/strong&gt; implementiert.&lt;br /&gt;
Hier wird ein allgemeiner Producer für den PropertyregistryServcie geschrieben.&lt;br /&gt;
&lt;a href="http://lh4.ggpht.com/-sylKRPpui48/UeZRjfS06YI/AAAAAAABSyk/GXdNjNHsl28/s1600-h/image%25255B13%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh3.ggpht.com/-tfvsFsLLHiM/UeZRjzBZnlI/AAAAAAABSyo/ESmx0QU5_0o/image_thumb%25255B7%25255D.png?imgmax=800" height="544" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="1028" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
zwei Dinge sind hier von Bedeutung:&lt;br /&gt;
1) Der Inject einer Default-Implementierung , in diesem Fall der Inject einer FileBasedRegistry&lt;br /&gt;
2) Der Inject einers ContextResolvers mit @Any und @Default&lt;br /&gt;
Nun kann zur Laufzeit der ContextResolver ausgewertet werden um die Endscheidung zu treffen welche Implementierung verwendet werden soll.&lt;br /&gt;
Der ContextResolver selbst wird wohl immer eine spezialisierte Implementierung in einem Projekt darstellen und muss deshalb selbst Implementiert werden.&lt;br /&gt;
Eine Default-Implementierung ist dem Projekt als Beispiel in den test – Foldern beigelegt. (&lt;strong&gt;DefaultPropertyContextResolver&lt;/strong&gt;)&lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-TCFHS7F4WGA/UeZRkTfzDOI/AAAAAAABSyw/m0xYmEL6KP4/s1600-h/image%25255B18%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-JkhZXOORYrM/UeZRkqRcRnI/AAAAAAABSy8/vuUpFYsOYKw/image_thumb%25255B10%25255D.png?imgmax=800" height="162" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="644" /&gt;&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-07-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.logger - ProgrammingHandbook - RapidPM</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="Weld"/>
        <published>2013-08-01T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/08/01/cdi.commons.logger-programminghandbook.html" rel="tag"&gt;cdi.commons.logger - ProgrammingHandbook - RapidPM&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-08-01"&gt;2013-08-01&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;div style="background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;"&gt;
Die Definition eines Loggers gehört zu fast jeder Klasse. Immer wieder ist der Logger zu definieren und in diesem Zuge dann auch die Entscheidung zu treffen, welcher Logger zu verwenden ist.&lt;/div&gt;
&lt;div style="background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;"&gt;
Nachträglich dieses zu ändern bedeutet immer, alle Klassen zu modifizieren. Es geht auch anders..&lt;/div&gt;
&lt;div style="background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;"&gt;
... siehe&amp;nbsp;&lt;/div&gt;
&lt;a href="http://wiki.rapidpm.org/display/PHB/cdi.commons.logger"&gt;cdi.commons.logger - ProgrammingHandbook - RapidPM&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://chrome.google.com/webstore/detail/pengoopmcjnbflcjbmoeodbmoflcgjlk" style="font-size: 13px;"&gt;'via Blog this'&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-08-01&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.fx -JavaFX/CDI Bootstrap</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="Weld"/>
        <published>2013-08-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/08/03/cdi.commons.fx-javafx-cdi-bootstrap.html" rel="tag"&gt;cdi.commons.fx -JavaFX/CDI Bootstrap&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-08-03"&gt;2013-08-03&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;The both technologies JavaFX and CDI are greate for itself.. but how to combine them? How I can get managed JavaFX - controller instances? &lt;br /&gt;
Starting from the JavaFX – side, we have to implement the Class extending &lt;strong&gt;javafx.application.Application.&lt;/strong&gt; The importand method will be &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;public&lt;/code&gt; &lt;code&gt;void&lt;/code&gt; &lt;code&gt;start(Stage primaryStage) &lt;/code&gt;&lt;code&gt;throws&lt;/code&gt; &lt;code&gt;Exception&lt;/code&gt;&lt;/em&gt;&lt;/blockquote&gt;
&lt;code&gt;&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/main/java/org/rapidpm/demo/cdi/commons/fx/CDIJavaFXBaseApplication.java?at=develop" target="_blank"&gt;CDIJavaFXBaseApplication&lt;/a&gt;&lt;/code&gt; &lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-spRH4z861ZQ/Uf12wRaYx5I/AAAAAAABTJI/dma-IzG6hho/s1600-h/image%25255B3%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-IKNxCJX9Ma8/Uf12wwRsReI/AAAAAAABTJQ/MQTcwt1GbIU/image_thumb%25255B1%25255D.png?imgmax=800" height="274" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt;  &lt;br /&gt;
&amp;nbsp; &lt;br /&gt;
With &lt;strong&gt;CDIContainerSingleton.getInstance()&lt;/strong&gt; you will get an instance of the Weld-Container. After the normal JavaFX – init&amp;nbsp; there will be an event fired with the primaryStage as attribute. Now the primaryStage is available in an managed environment. &lt;br /&gt;
JAvaFX –&amp;gt; CDI &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;cdi.event()&lt;/code&gt;&lt;code&gt;.select(Stage.&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;new&lt;/code&gt; &lt;code&gt;AnnotationLiteral&amp;lt;CDIStartupScene&amp;gt;() {})&lt;/code&gt;&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .fire(primaryStage);&lt;/em&gt;&lt;/code&gt;&lt;/blockquote&gt;
The observer will catch this event. Hownthis will be donw, I show with the excample jUnit-test.&lt;br /&gt;
(&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/test/java/org/rapidpm/demo/cdi/commons/fx/JavaFXBaseTest.java?at=develop" target="_blank"&gt;JavaFXBaseTest&lt;/a&gt;)&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-pe3l8kSIZrI/Uf12xUqXCaI/AAAAAAABTJY/4qNT0JYh-5o/s1600-h/image%25255B7%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh6.ggpht.com/-mYyW73L1y7A/Uf12xkbSleI/AAAAAAABTJg/GrkqVjLTMhM/image_thumb%25255B3%25255D.png?imgmax=800" height="345" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&amp;gt; testImpl(final Stage stage). The jUnit-Test will be a manged instance itself.&lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-rIZgDI2CmZc/Uf12yFhNcaI/AAAAAAABTJo/xmDBb7Nilas/s1600-h/image%25255B11%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-ANX-6HvYjEk/Uf12y-vIj3I/AAAAAAABTJw/sbkL-wTuD-A/image_thumb%25255B5%25255D.png?imgmax=800" height="484" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="636" /&gt;&lt;/a&gt; &lt;br /&gt;
But how to get the manged controller class instance?&lt;br /&gt;
This is done by the &lt;code&gt;&lt;strong&gt;FXMLLoaderSingleton used from the jUnit-test.&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;
&lt;blockquote&gt;
&lt;pre class="brush:java"&gt;
final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;br /&gt;
During the process of loading the fxml-file the used FxmlLoader will get an instance of an ControllerFactory-Callback.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-81g1FPtpMV0/Uf12zchLfMI/AAAAAAABTJ4/UZ6beCx-JkE/s1600-h/image%25255B15%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-snchFSsAGE8/Uf12zxccG1I/AAAAAAABTKA/WmMrwTqTh50/image_thumb%25255B7%25255D.png?imgmax=800" height="379" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The importand lines are the following &lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-TW3PcealhwQ/Uf120NC8jFI/AAAAAAABTKI/8Tz8jER8lbU/s1600-h/image%25255B19%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-2vpQxC1vfnI/Uf1207BA-xI/AAAAAAABTKQ/f8jnqwb7CC0/image_thumb%25255B9%25255D.png?imgmax=800" height="93" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The ControllerFactory-&amp;gt;Callback.call() will give back a manged instance of the controller class.&lt;br /&gt;
Now you can use CDI inside the pojo-fx-controller class.&lt;br /&gt;


&lt;pre class="prettyprint"&gt;
public class LoginController implements CDIJavaFxBaseController {
    // Standard FXML injected fields
 @FXML TextField loginField;
 @FXML PasswordField passwordField;
 @FXML Text feedback;
 
 // CDI Injected field
 @Inject LoginService loginService;
 
    // Default application parameters
 @Inject @CDIJavaFXBaseApp
    Parameters applicationParameters;
 
 @FXML protected void handleSubmitButtonAction(ActionEvent event) {
  feedback.setText(loginService.login(loginField.getText(), passwordField.getText()));
 }

 @Override
 public void initialize(URL location, ResourceBundle resources) {
  loginField.setText(applicationParameters.getNamed().get("user"));
 }
}
&lt;/pre&gt;



&lt;br /&gt;
So we are done..&amp;nbsp; Happy coding ;-)&lt;br /&gt;
&lt;br /&gt;
UML-Diagramm&lt;br /&gt;
&lt;img alt="" src="http://wiki.rapidpm.org/download/attachments/8093789/uml_fx_20130802_001.png?version=1&amp;amp;modificationDate=1375433878726&amp;amp;api=v2" height="479" width="640" /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-08-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 1</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-01-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/01/10/fxcontroller-with-cdi-managed-dynamico.html" rel="tag"&gt;FXController with CDI managed DynamicObjectAdapter - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-01-10"&gt;2014-01-10&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Today I will show the first step how you can use a dynamic proxy for JavaFX Controller.&lt;br/&gt;
This we will need for the CDI support inside TestFX.. but this later..&lt;br/&gt;
&lt;br/&gt;
During I was writing on my reflection shortcut together with Dr. Heinz Kabutz&lt;br/&gt;
(will be first available in german, later in english if asked for) I was thinking about his Newsletter &lt;br/&gt;
about "Object Adapter based on Dynamic Proxy". &lt;br/&gt;
Based on this we will now transform this into an CDI pattern for JavaFX Controller.&lt;br/&gt;
&lt;br/&gt;
The basic target will be an decorator for an CDI environment, to switch between implementations of defined methods&lt;br/&gt;
of an controller. Ok, there is an decorator defined inside the CDI environment but with some hard limitations.&lt;br/&gt;
&lt;br/&gt;
First of all, you have to define the decorator inside the beans.xml. I don´t like this. &lt;br/&gt;
If something will be changed you have to restart the container. And the definition is static.&lt;br/&gt;
The second I not like, is the usage of an decorator. &lt;br/&gt;
&lt;br/&gt;
You have to annotate the class, &lt;br/&gt;
you have to inject the basic implementation&lt;br/&gt;
and you have to extend the basic implementation.  &lt;br/&gt;
&lt;br/&gt;
This is too much and the main disadvantage: you have to decide what decorator to use in the static context.&lt;br/&gt;
&lt;br/&gt;
How to solve this? &lt;br/&gt;
&lt;br/&gt;
Let´s start with the basic step. With the default methods in JDK8 you don´t need a basic Implementation class.&lt;br/&gt;
But you have an interface. Let´s say we have an interface called DemoLogic.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@CDINotMapped
public interface DemoLogic {

    public default int add(int a, int b){
        return a+b;
    }

    public default int sub(int a, int b){
        return a-b;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Importand is the annotation, to exclude this from the default scope inside CDI. You will see it later why..&lt;br/&gt;
&lt;br/&gt;
The next thing we want to have is an special implementation from the add method. This we will implement inside a class &lt;br/&gt;
called DemoLogicAdapter_A.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@CDINotMapped
public class DemoLogicAdapter_A implements DemoLogic{

    public int add(int a, int b){
        System.out.println("DemoLogicAdapter_A.add");
        return a+b + 100;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Same here with the annotation. The good thing is, you really have to implement the changed method only.&lt;br/&gt;
No other delegator stuff.&lt;br/&gt;
&lt;br/&gt;
Next we need, is something to decide dynamically if we want to use the original implementation or the special one.&lt;br/&gt;
This we will simulate with a singleton calles Context. This class with only one boolean attribute called original&lt;br/&gt;
is to simulate a decicion logic.&lt;br/&gt;
If the attribute is true, we are in context original otherwise we are inside the context customer specific.&lt;br/&gt;

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@Singleton
public class Context {

    public boolean original = true;
}
    &lt;/class&gt;&lt;/pre&gt;

Now we will use it like the developer will do it later in a high level way.&lt;br/&gt;
For this we write a jUnit Test to test this.&lt;br/&gt;
The test will do the following.&lt;br/&gt;
Inject the DemoLogic, call the method add and test if the original version was used.&lt;br/&gt;
After this switch the context by setting the attribut original to false.&lt;br/&gt;
Now get the demologic again and call the method add. &lt;br/&gt;
If all is all right we will get the customer specific result.&lt;br/&gt;


&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, "org.rapidpm.commons")
                .addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml");
    }

    @Inject @DynamicDecoratorTest Instance&lt;DemoLogic&gt; demoLogic;
    @Inject Context context;
    @Test
    public void testDemoLogicOriginalTest() throws Exception {
    Assert.assertNotNull(demoLogic);
    final DemoLogic demoLogic1 = demoLogic.get();
    final int add = demoLogic1.add(1, 1);
    Assert.assertEquals(2,add);
    System.out.println("add = " + add);

    context.original = false;
    final DemoLogic demoLogic2 = demoLogic.get();
    final int addAdapted = demoLogic2.add(1, 1);
    Assert.assertEquals(102,addAdapted);
    System.out.println("addAdapted = " + addAdapted);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
I am using arquillian to have CDI support inside my jUnit Tests.&lt;br/&gt;
The annotation DynamicDecoratorTest is to separate this test from the rest of my tests.&lt;br/&gt;
&lt;br/&gt;
You see the usage quite clear. The developer will only see the interface. He will use it like &lt;br/&gt;
he will do it as normal. No change to see! Let´s asume the context switch is done by the system,&lt;br/&gt;
hidden, so the the develper is not able to see it. &lt;br/&gt;
He will write code only with the thinking about the business logic to implement.&lt;br/&gt;
&lt;br/&gt;
Afer we described what we want to have, we will implement the core. &lt;br/&gt;
To get an instance of the DemoLogic, we need a producer. We will call the class DemoLogicProducer.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class DemoLogicProducer {

    @Inject Instance&lt;DynamicObjectAdapterFactory&gt; dynamicObjectAdapterFactoryInstance;

    @Inject Context context;

    @Produces @DynamicDecoratorTest
    public DemoLogic create(ManagedInstanceCreator instanceCreator){
    final DemoLogic demoLogic = instanceCreator.activateCDI(new DemoLogic() {});

    final DynamicObjectAdapterFactory dynamicObjectAdapterFactory = dynamicObjectAdapterFactoryInstance.get();

    final Object adapter;
    if (context.original){
    adapter = new Object();
    } else {
    adapter = instanceCreator.activateCDI(new DemoLogicAdapter_A());
    }

    return dynamicObjectAdapterFactory.adapt(demoLogic, DemoLogic.class, adapter);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
The basic what we are simulating here ist the switch between original and customer specific.&lt;br/&gt;
This will be more comfortable in the next post. (using a ContextResolver)&lt;br/&gt;
But to show the basic step this is made explicite simple.&lt;br/&gt;
If the attribute is true, use the original one otherwise use the customer specific.&lt;br/&gt;
Very simple.. Both instances are manually put inside the CDI environment. &lt;br/&gt;
This ist only to show that the adapter itself can be managed too.&lt;br/&gt;
&lt;br/&gt;
The most importand step is the transparent wrapping with the DynamicObjectAdapterFactory.&lt;br/&gt;
The developer will not see this, until he is debugging ;-)&lt;br/&gt;
&lt;br/&gt;
How this factory is working? &lt;br/&gt;
The factory is using the java.lang.reflect.Proxy from the JDK itself. An old but very usefull class.&lt;br/&gt;
In my case I will use this in side a CDI managed environment. &lt;br/&gt;

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class DynamicObjectAdapterFactory {

    @Inject Instance&lt;CDIInvocationHandler&gt; cdiInvocationHandlerInstance;

    public  &lt;T&gt; T adapt(final Object adaptee,final Class&lt;T&gt; target,final Object adapter) {

        final CDIInvocationHandler invocationHandler = cdiInvocationHandlerInstance
        .get()
        .adapter(adapter)
        .adaptee(adaptee);

        return (T) Proxy.newProxyInstance(
        target.getClassLoader(),
        new Class[]{target},
        invocationHandler
        );
        }

        }
        &lt;/class&gt;&lt;/pre&gt;
This means I will be able to inject, for example, the InvocationHandler. &lt;br/&gt;
This I need, because I need a managed InvocationHandler. &lt;br/&gt;
The usage of the Proxy is nothing complex. But the InvocationHandler is the final and importand step.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public class CDIInvocationHandler implements InvocationHandler {

    @Inject @CDILogger Logger logger;

    private Map&lt;MethodIdentifier, Method&gt; adaptedMethods = new HashMap&lt;&gt;();

    private Object adapter;
    private Object adaptee;

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        if (adaptedMethods.isEmpty()){
            final Class&lt;?&gt; adapterClass = adapter.getClass();
            Method[] methods = adapterClass.getDeclaredMethods();
            for (Method m : methods) {
                adaptedMethods.put(new MethodIdentifier(m), m);
            }
        }else{
            if (logger.isDebugEnabled()) {
                logger.debug("adaptedMethods is initialized..");
            }
        }
        try {
            Method other = adaptedMethods.get(new MethodIdentifier(method));
            if (other != null) {
                return other.invoke(adapter, args);
            } else {
                return method.invoke(adaptee, args);
            }
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }

    public CDIInvocationHandler adapter(final Object adapter) {
        this.adapter = adapter;
        return this;
    }

    public CDIInvocationHandler adaptee(final Object adaptee) {
        this.adaptee = adaptee;
        return this;
    }


}

public class MethodIdentifier {
    private final String name;
    private final Class[] parameters;

    public MethodIdentifier(Method m) {
        name = m.getName();
        parameters = m.getParameterTypes();
    }

    // we can save time by assuming that we only compare against
    // other MethodIdentifier objects
    public boolean equals(Object o) {
        MethodIdentifier mid = (MethodIdentifier) o;
        return name.equals(mid.name) &amp;&amp;
                Arrays.equals(parameters, mid.parameters);
    }

    public int hashCode() {
        return name.hashCode();
    }
}

    &lt;/class&gt;&lt;/pre&gt;

The method invoke is called every time a method is called on the proxy. This is the place to decide which method will be called.&lt;br/&gt;
From the adapter we will get all methods and put them inside a HashMap. The key is based on method-name and attributes. &lt;br/&gt;
If a method is called with this key, we will get the adapter instance of this method from the map and &lt;br/&gt;
will call this instead of the original one.&lt;br/&gt;
If not key found, we will call the original nethod.&lt;br/&gt;
This is really simple!&lt;br/&gt;
&lt;br/&gt;
This means you have everywhere CDI managed instances.&lt;br/&gt;
You have only to implement what you whant to change.&lt;br/&gt;
It is dynamic with every request.&lt;br/&gt;
No beans.xml must be edited.&lt;br/&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  &lt;br/&gt;
&lt;br/&gt;
Next step will be the integration iside an JavaFX controller.. and TestFX CDI Support&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-01-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 2</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-02-07T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/07/fxcontroller-with-cdi-managed-dynamico.html" rel="tag"&gt;FXController with CDI managed DynamicObjectAdapter - Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-07"&gt;2014-02-07&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Based on my &lt;a href="http://www.rapidpm.org/2014/01/fxcontroller-with-cdi-managed.html"&gt;blog article part 1&lt;/a&gt; we want to integrate the DynamicObjectAdapter into an JavaFX application.
To remember: We have an interface called DemoLogic with two methods. add(..) and sub(..)
The implementation is really simple, but at runtime we could switch the implementation partially.
For this we needed an adapter.
&lt;br/&gt;
The biggest tdifference compared to the default CDI decorator was,
that we need no definition inside the beans.xml. The implementation is smaller
and no need for Qualifiers and other biolder-plate code.
&lt;br/&gt;
This DemoLogic we want to use now inside an JavaFX application.
For this we ned first an fxml.file called DemoPane.fxml. Here we will define a few elements.

&lt;br /&gt;
&lt;pre class="brush: javafx"&gt;
&amp;lt;?import javafx.scene.control.Button?&amp;gt;
&amp;lt;?import javafx.scene.control.TextField?&amp;gt;
&amp;lt;?import javafx.scene.layout.VBox?&amp;gt;
&amp;lt;?import javafx.scene.control.Label?&amp;gt;
&amp;lt;?import javafx.scene.control.CheckBox?&amp;gt;
&amp;lt;fx:root type=&amp;quot;javafx.scene.layout.AnchorPane&amp;quot;
            xmlns:fx=&amp;quot;http://javafx.com/fxml&amp;quot;&amp;gt;
    &amp;lt;children&amp;gt;
        &amp;lt;VBox&amp;gt;
            &amp;lt;children&amp;gt;
                &amp;lt;Button fx:id=&amp;quot;button&amp;quot; text=&amp;quot;Hello World&amp;quot; /&amp;gt;
                &amp;lt;CheckBox fx:id=&amp;quot;checkbox&amp;quot; text=&amp;quot;switch context&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldA&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldB&amp;quot;/&amp;gt;
                &amp;lt;Label fx:id=&amp;quot;label&amp;quot;/&amp;gt;
            &amp;lt;/children&amp;gt;
        &amp;lt;/VBox&amp;gt;

    &amp;lt;/children&amp;gt;

&amp;lt;/fx:root&amp;gt;
    &lt;/class&gt;&lt;/pre&gt;

With the button we will activate the calculation, with the checkbox we will switch the context.
To have a small as possible implementation, there is no error checking.
&lt;br/&gt;
The next will be the controller called DemoController. This is a normal JavaFX Controller, but CDI managed.
How to get this? Well there is a good blog article here ;-) &lt;a href="http://www.rapidpm.org/2013/08/javafxcdi-bootstrap-add-on.html"&gt;CDI JavaFX bootstrapping&lt;/a&gt;.
&lt;br/&gt;
Inside the DemoController we will get an Instance of the DemoLogic and the Context.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;
    &lt;/class&gt;&lt;/pre&gt;

The full implementation will be like the following.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@DynamicDecoratorTest
public class DemoController implements Initializable{

    @FXML public TextField textFieldA;
    @FXML public TextField textFieldB;
    @FXML public Button button;
    @FXML public Label label;
    @FXML public CheckBox checkbox;

    @Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        button.setText(&amp;quot;klick me&amp;quot;);
        button.setOnAction(actionEvent -&amp;gt; {

            final DemoLogic demoLogic = demoLogicInstance.get();

            final String textFieldAText = textFieldA.getText();
            final Integer a = Integer.valueOf(textFieldAText);

            final String textFieldBText = textFieldB.getText();
            final Integer b = Integer.valueOf(textFieldBText);

            final int result = demoLogic.add(a, b);
            label.setText(result+&amp;quot;&amp;quot;);

        });

        checkbox.setOnAction(actionEvent -&amp;gt; {
            context.original = checkbox.isSelected();
        });
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Inside the method initialize you will find the connection between the GUI logic and the business logic.
This is now clean devided.
&lt;br/&gt;
To test this I was using Arquillian. LAter we will see how we could do this with TestFX.
We are working on the CDI Support.

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, &amp;quot;org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;junit.org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;demo&amp;quot;)
                .addAsManifestResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);
    }

    @Inject @DynamicDecoratorTest
    Instance&amp;lt;DemoController&amp;gt; demoControllerInstance;
    @Inject
    Context context;

    static final FXMLLoader loader = new FXMLLoader();

    @Test
    public void testDemoLogicJavaFXTest() throws Exception {
        loader.setControllerFactory(param -&amp;gt; demoControllerInstance.get());
        Application.launch(DemoApp.class);
    }


    public static class DemoApp extends Application {
        @Override
        public void start(Stage stage) throws Exception {

            final URL resource = getClass()
                    .getClassLoader()
                    .getResource(&amp;quot;DemoPane.fxml&amp;quot;);
            loader.setLocation(resource);
            final DemoController controller = (DemoController) loader
                    .getControllerFactory()
                    .call(DemoController.class);
            try {

                loader.setController(controller);
                loader.setRoot(new AnchorPane());
                final Parent root = (Parent) loader.load();

                stage.setScene(new Scene(root));
                stage.setTitle(&amp;quot;Custom Control&amp;quot;);
                stage.setWidth(300);
                stage.setHeight(200);
                stage.show();
            } catch (IOException exception) {
                throw new RuntimeException(exception);
            }

        }

        public static void main(String[] args) {
            launch(args);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-07&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
