<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Kotlin</title>
    <category label="Kotlin"/>
    <updated>2015-01-10T01:39:11.559+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>use Kotlin inside JavaFX with CDI</title>
        <category label="Callback"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="Kotlin"/>
        <published>2013-10-09T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/10/09/use-kotlin-inside-javafx-with-cdi.html" rel="tag"&gt;use Kotlin inside JavaFX with CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-10-09"&gt;2013-10-09&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;I tried the combination of JavaFX with CDI and injection of &lt;a href="http://kotlin.jetbrains.org/"&gt;Kotlin&lt;/a&gt; and it works very well.
&lt;br/&gt;
First the CDI - managed Callable
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[ 
public abstract class CDICallable&lt;T&gt; implements Callable&lt;T&gt; {
    protected CDICallable() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Second the TextFieldBindingCallable for the JavaFX-binding
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class LeftTextFieldBindingCallable extends CDICallable&lt;String&gt; {

    @Inject Instance&lt;DemoLogic&gt; demoLogic;

    @Override public String call() throws Exception {
        return "leftTextField - " + demoLogic.get().doIt();
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Third the implementation of the DemoLogic

Java - Version
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class DemoLogic {

    public String doIt() {
        return System.nanoTime() + "";
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
changed to &lt;b&gt;Kotlin&lt;/b&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public open class DemoLogic() {
    public open fun doIt(): String? {
        return System.nanoTime().toString()  ;
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;

The code with the @Inject of DemoLogic isnÂ´t changed inside the class &lt;b&gt;LeftTextFieldBindingCallable&lt;/b&gt;
and it is running well..
&lt;/br&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class PairedTextField extends Pane {

    private final TextField leftTextField = new TextField();
    private final TextField rightTextField = new TextField();

    private final HBox hb = new HBox();
    private int spacing = 10;

    @Inject Instance&lt;LeftTextFieldBindingCallable&gt; leftTextFieldBindingCallableInstance;
    @Inject Instance&lt;RightTextFieldBindingCallable&gt; rightTextFieldBindingCallableInstance;


    public PairedTextField() {
        setAnchors(hb, 0.0);
        hb.getChildren().addAll(leftTextField, rightTextField);
        hb.setSpacing(spacing);
        getChildren().add(hb);
        setPadding(new Insets(0, 10, 0, 10));

        CDIContainerSingleton.getInstance().activateCDI(this);

    }

    @PostConstruct
    public void init() {
        final StringBinding leftTextFieldBinding = Bindings.createStringBinding(leftTextFieldBindingCallableInstance.get(), leftTextField.textProperty());

        final StringBinding rigthTextFieldBinding = Bindings.createStringBinding(rightTextFieldBindingCallableInstance.get(), rightTextField.textProperty());


        leftTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().bind(leftTextFieldBinding);
            }
        });
        leftTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().unbind();
            }
        });

        rightTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().bind(rigthTextFieldBinding);
            }
        });
        rightTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().unbind();
            }
        });
    }


    private void setAnchors(Node node, Double anchor) {
        AnchorPane.setBottomAnchor(node, anchor);
        AnchorPane.setLeftAnchor(node, anchor);
        AnchorPane.setRightAnchor(node, anchor);
        AnchorPane.setTopAnchor(node, anchor);
    }
}
]]&gt;&lt;/script&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-10-09&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
