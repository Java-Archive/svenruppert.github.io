<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Callback</title>
    <category label="Callback"/>
    <updated>2015-01-10T02:39:48.888+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>CDI Callback&lt;TableColumn, TableCell&gt; cellFactory - from FXML</title>
        <category label="Callback"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <category label="TableView"/>
        <published>2013-09-19T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/09/19/cdi-callback-tablecolumn-tablecell-cel.html" rel="tag"&gt;CDI Callback&lt;TableColumn, TableCell&gt; cellFactory - from FXML&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-09-19"&gt;2013-09-19&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;How to get a full managed JavaFX-element declared in the fxml-file?&lt;br/&gt;

Let´s say we have something like the following:&lt;br/&gt;

&lt;script class="brush: javafx" type="syntaxhighlighter"&gt;&lt;![CDATA[
&lt;TableView fx:id="tableView" editable="true" VBox.vgrow="ALWAYS" style="-fx-font-size: 80%"
                   tableMenuButtonVisible="true"&gt;
    &lt;columns&gt;
        &lt;FilterableStringTableColumn prefWidth="120.0" text="vorname"&gt;
            &lt;cellFactory&gt;
                &lt;EditingAutoCompleteStringCellFactory/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="vorname"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
        &lt;FilterableStringTableColumn prefWidth="120.0" text="nachname"&gt;
            &lt;cellFactory&gt;
                &lt;EditingStringCellFactoryCallback/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="nachname"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
        &lt;FilterableDateTableColumn prefWidth="120.0" text="datum"&gt;
            &lt;cellFactory&gt;
                &lt;EditingDateCellFactoryCallback/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="datum"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDateTableColumn&gt;
        &lt;FilterableDoubleTableColumn prefWidth="120.0" text="betrag"&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="betrag"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDoubleTableColumn&gt;
    &lt;/columns&gt;
&lt;/TableView&gt;
]]&gt;&lt;/script&gt;

This looks like a normal definition of a TableView with some cell-factories.
The intressting part is the instantiating of the cellFactory elements. They are
created from the JavaFX part. How to get them as full managed bean?&lt;br/&gt;

Based on my blog entry about  (&lt;a href="http://www.rapidpm.org/2013/08/cdicommonsfx-javafxcdi-bootstrap.html"&gt;CDI-JavaFX bootstrapping&lt;/a&gt;) I wanted to have full cdi managed JavaFX elements but defined in my fxml-file.&lt;br/&gt;

How to get this with a ComboBoxCell you can see here (&lt;a href="http://www.rapidpm.org/2013/09/cdi-comboboxcell-how-to-reduce-80-of.html"&gt;cdi comboboxcell how to reduce 80 of code&lt;/a&gt;)&lt;br/&gt;

The aproach was to define an element that is able to associate itself as CellFactory.
Only two line of code are used during the init - phase:&lt;br/&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
@Inject Instance&lt;BetragComboboxCell&gt; betragComboBoxCellInstance;
 
private void initTable() {
    final BetragComboBoxCell cell = betragComboBoxCellInstance.get();
    cell.associateWithCol(tableView, "betrag");
}
]]&gt;&lt;/script&gt;


BUT: the definition inside the fxml-file is &lt;br/&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
        &lt;FilterableDoubleTableColumn prefWidth="120.0" text="betrag"&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="betrag"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDoubleTableColumn&gt;
]]&gt;&lt;/script&gt;

You only could (implicit)define a normal CellFactory, because the creation of this element would be done by JavaFX.&lt;br/&gt;

Now I want to write a more precise fxml file.&lt;br/&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
&lt;FilterableStringTableColumn prefWidth="120.0" text="vorname"&gt;
            &lt;cellFactory&gt;
                &lt;EditingAutoCompleteStringCellFactory/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property="vorname"/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
]]&gt;&lt;/script&gt;

Now you could see, the CellFactory is well defined. Here an EditingAutoCompleteStringCellFactory.
This is an element with injected autocomplete functions/data.&lt;br/&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class EditingAutoCompleteStringCellFactory 
                implements Callback&lt;TableColumn&lt;FilteredTableDataRow, ?&gt;,
                                      TableCell&lt;FilteredTableDataRow, ?&gt;&gt;
]]&gt;&lt;/script&gt;

Inside this class you can use all cdi features.&lt;br/&gt;

The missing part is: How to get this as managed instance?&lt;br/&gt;
The short answer is.. make it managed by yourself ;-)&lt;br/&gt;

Let´s say the controller is a managed instance, you can get the BeanManager with&lt;br/&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
@Inject BeanManager beanManager;
]]&gt;&lt;/script&gt;

Now I started to get during the init-phase the right column&lt;br/&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
 if(column.getText().equals("vorname")){ 
   //do something on column
 } else{
  //nothing to do
 }
}
]]&gt;&lt;/script&gt;

After you found the right column, start with the CDI-stuff
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final TableColumn&lt;TransientDemoDataRow, String&gt; columnString = (TableColumn&lt;TransientDemoDataRow, String&gt;) column;

final Callback&lt;? extends TableColumn&lt;TransientDemoDataRow, String&gt;, ? extends TableCell&lt;TransientDemoDataRow,String&gt;&gt; cellFactory = columnString.getCellFactory();

final AnnotatedType&lt;EditingAutoCompleteStringCellFactory&gt; annotationType = beanManager.createAnnotatedType(EditingAutoCompleteStringCellFactory.class);

final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);

final CreationalContext&lt;EditingAutoCompleteStringCellFactory&gt; creationalContext = beanManager.createCreationalContext(null);

                injectionTarget.inject(cellFactory, creationalContext);
                injectionTarget.postConstruct(cellFactory);

]]&gt;&lt;/script&gt;

Ready..   but this code is not nice...  and done for every column this is toooooo much code.&lt;br/&gt;

So I started to reduce it.&lt;br/&gt;
- reducing the generics..&lt;br/&gt;
- getting the class from the instance itself&lt;br/&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final Callback cellFactory = column.getCellFactory();
final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
final CreationalContext creationalContext = beanManager.createCreationalContext(null);
injectionTarget.inject(cellFactory, creationalContext);
injectionTarget.postConstruct(cellFactory);
]]&gt;&lt;/script&gt;

Done..  OK, this is short and easy..  and you can do it for every column..&lt;br/&gt;

&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
 final Callback cellFactory = column.getCellFactory();
 final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
 final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
 final CreationalContext creationalContext = beanManager.createCreationalContext(null);
 injectionTarget.inject(cellFactory, creationalContext);
 injectionTarget.postConstruct(cellFactory);
}
]]&gt;&lt;/script&gt;

or more generic...&lt;br/&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;?, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;?, ?&gt; column : columns) {
 final Callback cellFactory = column.getCellFactory();
 final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
 final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
 final CreationalContext creationalContext = beanManager.createCreationalContext(null);
 injectionTarget.inject(cellFactory, creationalContext);
 injectionTarget.postConstruct(cellFactory);
}
]]&gt;&lt;/script&gt;

Now you can use CDI-managed elements as CellFactories and define them inside your fxml. &lt;br/&gt;

Nice, Managed and TypeSave&lt;br/&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-09-19&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>use Kotlin inside JavaFX with CDI</title>
        <category label="Callback"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="Kotlin"/>
        <published>2013-10-09T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/10/09/use-kotlin-inside-javafx-with-cdi.html" rel="tag"&gt;use Kotlin inside JavaFX with CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-10-09"&gt;2013-10-09&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;I tried the combination of JavaFX with CDI and injection of &lt;a href="http://kotlin.jetbrains.org/"&gt;Kotlin&lt;/a&gt; and it works very well.
&lt;br/&gt;
First the CDI - managed Callable
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[ 
public abstract class CDICallable&lt;T&gt; implements Callable&lt;T&gt; {
    protected CDICallable() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Second the TextFieldBindingCallable for the JavaFX-binding
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class LeftTextFieldBindingCallable extends CDICallable&lt;String&gt; {

    @Inject Instance&lt;DemoLogic&gt; demoLogic;

    @Override public String call() throws Exception {
        return "leftTextField - " + demoLogic.get().doIt();
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Third the implementation of the DemoLogic

Java - Version
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class DemoLogic {

    public String doIt() {
        return System.nanoTime() + "";
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
changed to &lt;b&gt;Kotlin&lt;/b&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public open class DemoLogic() {
    public open fun doIt(): String? {
        return System.nanoTime().toString()  ;
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;

The code with the @Inject of DemoLogic isn´t changed inside the class &lt;b&gt;LeftTextFieldBindingCallable&lt;/b&gt;
and it is running well..
&lt;/br&gt;
&lt;script class="brush: java" type="syntaxhighlighter"&gt;&lt;![CDATA[
public class PairedTextField extends Pane {

    private final TextField leftTextField = new TextField();
    private final TextField rightTextField = new TextField();

    private final HBox hb = new HBox();
    private int spacing = 10;

    @Inject Instance&lt;LeftTextFieldBindingCallable&gt; leftTextFieldBindingCallableInstance;
    @Inject Instance&lt;RightTextFieldBindingCallable&gt; rightTextFieldBindingCallableInstance;


    public PairedTextField() {
        setAnchors(hb, 0.0);
        hb.getChildren().addAll(leftTextField, rightTextField);
        hb.setSpacing(spacing);
        getChildren().add(hb);
        setPadding(new Insets(0, 10, 0, 10));

        CDIContainerSingleton.getInstance().activateCDI(this);

    }

    @PostConstruct
    public void init() {
        final StringBinding leftTextFieldBinding = Bindings.createStringBinding(leftTextFieldBindingCallableInstance.get(), leftTextField.textProperty());

        final StringBinding rigthTextFieldBinding = Bindings.createStringBinding(rightTextFieldBindingCallableInstance.get(), rightTextField.textProperty());


        leftTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().bind(leftTextFieldBinding);
            }
        });
        leftTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().unbind();
            }
        });

        rightTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().bind(rigthTextFieldBinding);
            }
        });
        rightTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().unbind();
            }
        });
    }


    private void setAnchors(Node node, Double anchor) {
        AnchorPane.setBottomAnchor(node, anchor);
        AnchorPane.setLeftAnchor(node, anchor);
        AnchorPane.setRightAnchor(node, anchor);
        AnchorPane.setTopAnchor(node, anchor);
    }
}
]]&gt;&lt;/script&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-10-09&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
