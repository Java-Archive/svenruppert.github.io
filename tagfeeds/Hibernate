<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hibernate</title>
    <category label="Hibernate"/>
    <updated>2015-01-10T01:52:33.565+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>Loeschen von JPA-Entitaeten (Blaettern) in Baumstrukturen (und kleine, fiese Hibernate-Bugs...)</title>
        <category label="Baum"/>
        <category label="Baumstruktur"/>
        <category label="Bug"/>
        <category label="Hibernate"/>
        <category label="JPA"/>
        <category label="Set"/>
        <published>2013-06-07T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/06/07/loeschen-von-jpa-entitaeten-(blaettern.html" rel="tag"&gt;Loeschen von JPA-Entitaeten (Blaettern) in Baumstrukturen (und kleine, fiese Hibernate-Bugs...)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-06-07"&gt;2013-06-07&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;br /&gt;
&lt;br /&gt;
Ich weiß nicht ob es nur mir so geht, aber im Umgang mit JPA/Hibernate tat ich mich anfangs recht schwer. Das fing schon bei trivialen Sachen (sollte man meinen) wie dem Löschen von Entitäten an.. Wenn dann noch Baumstrukturen hinzukommen, tappt man schnell in die ein oder andere Falle. Hier mal ein Beispiel einer Umsetzung einer Entitäts-Baumstruktur (inkl. dem Löschen von Blättern im Baum).&lt;br /&gt;
&lt;br /&gt;
Ich habe heute eine Entität "SearchPattern" erweitert. Zuvor stand diese für sich alleine, hatte also keine Verbindungen zu anderen Tabellen / Entitäten.&lt;br /&gt;
Hier stellte das Löschen natürlich noch kein Problem dar:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;entityManager.remove(toDeleteSearchPattern);&lt;br /&gt;
entityManager.flush();&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
bumms..fertig.&lt;br /&gt;
&lt;br /&gt;
Nun habe ich die Entität dahingehend erweitert, dass sie eine Baumstruktur darstellt.&lt;br /&gt;
Sprich: Ein SearchPattern kann ein Parent-SearchPattern und eine Liste von Kind-SearchPattern haben. Dies realisierte ich grob skizziert folgendermaßen:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;@Entity&lt;br /&gt;
public class SearchPattern{&lt;br /&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
@OneToOne&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private SearchPattern parent;&lt;br /&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
@OneToMany&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private List&amp;lt;SearchPattern&amp;gt; children;&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Lassen wir den Fall, dass ein Parent-SearchPattern (also eine Entität die Kinder hat) gelöscht werden soll , mal außen vor und betrachten den Fall, dass eine "Blatt"-Entität gelöscht werden soll. Also ein SearchPattern, dass keine Kinder aber einen Vater hat. In diesem Fall muss der Löschvorgang innerhalb einer Transaktion nun grob so aussehen:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;parentSearchPattern.getChildren().remove(toDeleteSearchPattern);&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;entityManager.remove(toDeleteSearchPattern);&lt;br /&gt;
entityManager.flush();&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Es wird also zunächst das zu löschende SearchPattern aus der Kindliste des Vaters entfernt. Anschließend kann dann das eigentliche SearchPattern entfernt werden, da dieses nun nicht mehr in anderen Entitäten referenziert wird. Anschließend können die Änderungen geflusht werden. &lt;br /&gt;
&lt;br /&gt;
Übrigens: Wer in Hibernate-Entitäten mit Collections arbeitet, sollte zumindest meiner Einschätzung nach wenn möglich auf Listen (statt Sets) setzen. Zunächst hatte ich für die Kinder ein Set benutzt. Ich habe es jedoch nicht hinbekommen, das zu löschende SearchPattern aus der Kindliste des Vaters zu entfernen. Ich dachte zunächst ich hätte einfach Tomaten auf den Augen, aber nein..alles schien okay zu sein. Es wollte mir einfach nicht in den Kopf warum ich das gewünschte SearchPattern nicht aus dem Set removen konnte. Die equals- und hashcode-Methoden der Entität waren korrekt und die SearchPattern-Instanz die ich der .remove-Methode übergeben habe war definitiv in dem Set enthalten. Woran lags? Nun, offensichtlich hat Hibernate einen Bug (und das scheinar schon recht lange! &lt;a href="http://yigitdarcin.com/2010/01/08/hibernate-persistentset-remove-not-working/"&gt;http://yigitdarcin.com/2010/01/08/hibernate-persistentset-remove-not-working/&lt;/a&gt; leider funktioniert der dort verlinkte Link zum entsprechenden Bugtracking-System bei mir zur Zeit nicht) , der es manchmal unmöglich macht etwas aus dem Set einer Entität zu löschen. Nachdem ich das Set in eine List umwandelte, funktionierte das Entfernen einwandfrei. &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-06-07&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
