<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ContextResolver</title>
    <category label="ContextResolver"/>
    <updated>2015-01-10T02:14:20.983+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>CDI ContextResolver Pattern 2.0</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="CDI"/>
        <category label="ContextResolver"/>
        <published>2014-05-14T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/05/14/cdi-contextresolver-pattern-2.0.html" rel="tag"&gt;CDI ContextResolver Pattern 2.0&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-05-14"&gt;2014-05-14&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;b&gt;What is the ContextResolver Pattern?&lt;/b&gt;&lt;br /&gt;
It is a pattern described by Sven Ruppert (&lt;a href="http://jaxenter.de/artikel/CDI-entscheide-spaet-entscheide-gut-168301"&gt;here&lt;/a&gt;) to solve the following problem.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Problem&lt;/b&gt;&lt;br /&gt;
A service has several implementations which are provided to clients depending on a specific environment context (for example: test- or developmentcontext) on the service side. The
client does not know about the context and the environment context must be dynamically configurable.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Solution&lt;/b&gt;&lt;br /&gt;
Decouple the service creation from the context resolving by introducing&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;a ContextResolver which determines the current context and returns an annotation literal&lt;/li&gt;
    &lt;li&gt;a Service Context Qualifier&lt;/li&gt;
    &lt;li&gt;a service producer which uses the servicecontextqualifier&lt;/li&gt;
&lt;/ul&gt;
With that you can develop very flexible and extendable modules or applications which can be dynamically configured at runtime.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;b&gt;The Evolution&lt;/b&gt;&lt;br /&gt;
The previous version is implemented with CDI extensions which is a little bit harder to understand and needs a&amp;nbsp;&lt;i&gt;javax.enterprise.inject.spi.Extension&lt;/i&gt; file. So here
is the improved version which uses only plain CDI-Producers and therefore should be easier to understand.&lt;br /&gt;
&lt;br /&gt;
The client:&lt;br /&gt;
&lt;pre class="brush: java"&gt;@Inject
@DemoLogicContext
Instance&amp;lt;DemoLogic&amp;gt; demoLogicInst;
&lt;/pre&gt;
&lt;br /&gt;
The producer:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class DemoLogicProducer
{
 @Produces
 @DemoLogicContext
 public DemoLogic create(BeanManager beanManager, @Any Instance&amp;lt;ContextResolver&amp;gt; contextResolvers)
 {
  return ManagedBeanCreator.createManagedInstance(beanManager, contextResolvers, DemoLogic.class);
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ContextResolver:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class DemoLogicContextResolver implements ContextResolver
{
 @Inject
 Context context;

 @Override
 public AnnotationLiteral&amp;lt;?&amp;gt; resolveContext(Class&amp;lt;?&amp;gt; targetClass)
 {
  //Determines the context and returns annotionliteral 
  return context.isUseB() ? new MandantB.Literal() : new MandantA.Literal();
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ManagedBeanCreator:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class ManagedBeanCreator
{
 public static &amp;lt;T&amp;gt; T createManagedInstance(BeanManager beanManager, Instance&amp;lt;ContextResolver&amp;gt; contextResolvers,
   Class&amp;lt;? extends T&amp;gt; clazz)
 {
  //FindFirst
  for (ContextResolver contextResolver : contextResolvers)
  {
   AnnotationLiteral&amp;lt;?&amp;gt; annotationLiteral = contextResolver.resolveContext(DemoLogic.class);
   Set&amp;lt;Bean&amp;lt;?&amp;gt;&amp;gt; beans = beanManager.getBeans(clazz, annotationLiteral);

   //Create CDI Managed Bean
   Bean&amp;lt;?&amp;gt; bean = beans.iterator().next();
   CreationalContext&amp;lt;?&amp;gt; ctx = beanManager.createCreationalContext(bean);
   return (T) beanManager.getReference(bean, clazz, ctx);
  }
  return null;
 }
}
&lt;/pre&gt;


    The sources can be found
    &lt;a href="https://bitbucket.org/abischof/cdicontextresolver2"&gt;here&lt;/a&gt;.
Have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-05-14&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
