<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Deadlock</title>
    <category label="Deadlock"/>
    <updated>2015-01-10T01:52:33.564+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <entry>
        <title>One way to deadlock a JBoss AS 7</title>
        <category label="Deadlock"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="RapidPM"/>
        <published>2014-02-03T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html" rel="tag"&gt;One way to deadlock a JBoss AS 7&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-03"&gt;2014-02-03&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Take a standard JBoss AS 7 and create/deploy a simple remote stateless session bean with two methods. One of them should
be asynchronous. As shown in the following example the asynchronous method creates a little bit of load and the second one&amp;nbsp;simulates a login.

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public interface IMyBean
{
 Future&amp;lt;Void&amp;gt; doNothing();
 void login();
}&lt;/pre&gt;
&lt;pre class="brush: java"&gt;@Stateless
@Remote(IMyBean.class)
public class MyBean implements IMyBean
{
 @Override
 @Asynchronous
 public Future&amp;lt;Void&amp;gt; doNothing()
 {
  //Creates Load
  int lo = 0;
  for (int i = 0; i &amp;lt; 5000; i++)
  {
   lo += i;
  }
  System.out.println("nothing done");
  return new AsyncResult&amp;lt;Void&amp;gt;(null);
 }
 @Override
 public void login()
 {
  System.out.println("logged in");
 }
}
&lt;/pre&gt;
In the next step besides 10 EJB-Remote-Clients which access the asynchronous method parallel&amp;nbsp;we create an additional client which repeatly tries to login.
(Note: Classpath contains jboss-ejb-client.properties and jboss-client.jar)

&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class HangTest
{
 public static void main(String args[]) throws NamingException
 {
  //EJB-Remote-Access
  Properties jndiProps = new Properties();
  jndiProps.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
  Context context = new InitialContext(jndiProps);
  final IMyBean myBean = (IMyBean) context.lookup("ejb:/hangtest/MyBean!IMyBean");

  //Create and start asynchronous method threads
  final List&amp;lt;Thread&amp;gt; threadList = new ArrayList&amp;lt;&amp;gt;();
  for (int i = 0; i &amp;lt; 10; i++)
  {
   Thread thread = new Thread()
   {
    @Override
    public void run()
    {
     try
     {
      myBean.doNothing().get();
     }
     catch(Exception e)
     {
      e.printStackTrace();
     }
     finally
     {
      threadList.remove(this);
     }
    }
   };
   threadList.add(thread);
   thread.start();
  }

  //Repeated Login
  while(!threadList.isEmpty())
  {
   System.out.println("Try login...");
   myBean.login();
  }
 }
}
&lt;/pre&gt;
The code above works as expected which means that random server messages ("nothing done", "logged in") are printed out and that the login client can login. It also can be executed as many times as you want without a change in behavior.&lt;br /&gt;
BUT if you increase the number of asynchronous method clients for example to 20-30 (depending on your computer) then nothing is printed out and the login client can not login anymore. The JBoss or -&amp;nbsp;to be more specific - some&amp;nbsp;components of it are in a deadlock
(Note: JBoss shutdown does not work anymore).

So what has happened?&lt;br /&gt;
&lt;br /&gt;
To answer this question we have to look into the standalone.xml, especially in the subsystem "urn:jboss:domain:ejb3". This section contains ejb3-related configurations and among them threadpools.&amp;nbsp;In this context it is important&amp;nbsp;that the default threadpool is shared between asynchronous calls, timers and ejb-remote.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;&amp;lt;subsystem xmlns="urn:jboss:domain:ejb3:1.2"&amp;gt;&lt;/pre&gt;
&lt;pre class="brush: java"&gt;...
 &amp;lt;async thread-pool-name="default"/&amp;gt;
 &amp;lt;timer-service thread-pool-name="default"&amp;gt;
  &amp;lt;data-store path="timer-service-data" relative-to="jboss.server.data.dir"/&amp;gt;
        &amp;lt;/timer-service&amp;gt;
 &amp;lt;remote connector-ref="remoting-connector" thread-pool-name="default"&amp;gt;
  &amp;lt;thread-pools&amp;gt;
   &amp;lt;thread-pool name="default"&amp;gt;
    &amp;lt;max-threads count="10"/&amp;gt;
    &amp;lt;keepalive-time time="100" unit="milliseconds"/&amp;gt;
   &amp;lt;/thread-pool&amp;gt;
  &amp;lt;/thread-pools&amp;gt;
   &amp;lt;/remote&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/pre&gt;
&lt;br /&gt;
So if you stumble upon that problem either increase the max-thread count property or even better seperate the thread-pools for asynchronous and ejb-remote components. &lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
