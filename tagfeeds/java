<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>java</title>
    <category label="java"/>
    <updated>2015-01-10T01:39:11.554+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <author>
        <name>Marco Ebbinghaus</name>
    </author>
    <entry>
        <title>Java8 CompletableFuture for JavaFX and CDI Part II</title>
        <category label="java"/>
        <category label="javafx"/>
        <category label="blub"/>
        <published>2014-04-13T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/04/13/java8-completablefuture-for-javafx-and.html" rel="tag"&gt;Java8 CompletableFuture for JavaFX and CDI Part II&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-04-13"&gt;2014-04-13&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;The last part was describing how you could reach the goal to make the order of some dependent method calls independent.
Now we will see, how we could use this for the combination of CDI and JavaFX.
&lt;br/&gt;
If you want to have CDI managed Controllers inside your JavaFX application you have to deal with the two life cycles.
The init from CDI and the init from JavaFX. If you are combining both technologies, you will have the problem that
the order of the livecycle steps are not always in the same order. Depending from the technology that will start,
the order of the init methods will change. For CDI it is the method with the annotation Postconstruct and for JavaFX the method initialize.
&lt;br/&gt;
Well, lets see what you could do..
&lt;br/&gt;
For this example I will start with the FXMLoader. Check the Method setControllerFactory.
You will see, that after the creation of the Controller instance the method initInstance() will be called.
&lt;br /&gt;
&lt;pre class="brush: java"&gt;
@Singleton
public class FXMLLoaderSingleton {

    private @Inject @CDILogger Logger logger;
    private @Inject Instance&amp;lt;CDIJavaFxBaseController&amp;gt; instance;

    private final ClassLoader cachingClassLoader = new FXClassLoader(FXMLLoader.getDefaultClassLoader());
    private final Map&amp;lt;Class, FXMLLoader&amp;gt; class2LoaderMap = new HashMap&amp;lt;Class, FXMLLoader&amp;gt;();

    public FXMLLoader getFXMLLoader(Class clazz) {
        final Map&amp;lt;Class, FXMLLoader&amp;gt; loaderMap = class2LoaderMap;
        final String name = clazz.getName();
        if (loaderMap.containsKey(clazz)) {
            if (logger.isDebugEnabled()) {
                logger.debug(&amp;quot;fx loader fuer diese klasse schon in der map &amp;quot; + name);
            }
        } else {
            final String fxmlFileName = clazz.getSimpleName() + &amp;quot;.fxml&amp;quot;;
            if (logger.isDebugEnabled()) {
                logger.debug(&amp;quot;fxmlFileName -&amp;gt; &amp;quot; + fxmlFileName);
            }
            final URL resource = clazz.getResource(fxmlFileName);
//            FXMLLoader loader = new CDIFXMLLoader(resource);
            FXMLLoader loader = new FXMLLoader(resource);
            loader.setClassLoader(cachingClassLoader);
            loader.setControllerFactory(new Callback&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;() {
                @Override
                public Object call(Class&amp;lt;?&amp;gt; param) {
                    final Class&amp;lt;JavaFXBaseController&amp;gt; p = (Class&amp;lt;JavaFXBaseController&amp;gt;) param;
                    final JavaFXBaseController controller = instance.select(p).get();
                    &lt;b&gt;controller.initInstance(); //trigger async call&lt;/b&gt;
                    return controller;
                }
            });
            try {
                final Class&amp;lt;?&amp;gt; aClass = Class.forName(clazz.getName() + &amp;quot;Controller&amp;quot;);
                final CDIJavaFxBaseController call = (CDIJavaFxBaseController) loader.getControllerFactory().call(aClass);
                loader.setController(call);
            } catch (ClassNotFoundException e) {
                logger.error(e);
            }
            loaderMap.put(clazz, loader);
        }
        return loaderMap.get(clazz);
    }

    private FXMLLoaderSingleton() {
    }
}
&lt;/pre&gt;
&lt;br/&gt;
The method &lt;b&gt;initInstance()&lt;/b&gt; will trigger the init-process. Inside the method the task will be called async.
The task itself will wait until the CDi and JavaFX init will be ready. After this the method  initBusinessLogic will be called.
This means, thet the developer only will have to implement the method &lt;b&gt;initBusinessLogic&lt;/b&gt; and he will be sure that all init stuff is done.
&lt;br/&gt;
Happy coding ;-)

&lt;br /&gt;
&lt;pre class="brush: java"&gt;
public abstract class JavaFXBaseController implements CDIJavaFxBaseController {

    public static final String DONE = "done";

    private boolean mockModusActive = false;
    public boolean isMockModusActive() {
        return mockModusActive;
    }
    public void setMockModusActive(boolean mockModusActive) {
        this.mockModusActive = mockModusActive;
    }

    public abstract void cleanUp();

    public abstract void setI18n();

    private @Inject @CDILogger Logger logger;

    private Boolean initCompleteCDI = false;
    private Boolean initCompleteFX = false;

    public CompletableFuture&amp;lt;String&amp;gt; supplyAsync;

    @Override
    public final void initInstance(){
       final CachedThreadPoolSingleton instance = CachedThreadPoolSingleton.getInstance();
       supplyAsync = CompletableFuture.supplyAsync(task, instance.cachedThreadPool);
       if (logger.isDebugEnabled()) supplyAsync.thenAccept(logger::debug);  //logger
    }

    public final Supplier&amp;lt;String&amp;gt; task = ()-&gt; {
        //        Warten bis alle true
        while(! (initCompleteCDI &amp;&amp; initCompleteFX) ){
        try {
        //evtl loggen
        if (logger.isDebugEnabled()) {
        logger.debug("initCompleteCDI = " + initCompleteCDI);
        logger.debug("initCompleteFX = " + initCompleteFX);
        logger.debug("getClass().getName() = " + getClass().getName());
        }
        TimeUnit.MILLISECONDS.sleep(1);
        } catch (InterruptedException e) {
        e.printStackTrace();
        return e.toString();
        }
        }

        if (logger.isInfoEnabled()) {
        logger.info("initBusinessLogic() =&gt; called now");
        }
        final boolean fxApplicationThread = Platform.isFxApplicationThread();
        if ( ! fxApplicationThread){
        Platform.runLater(this::initBusinessLogic);
        } else {
        initBusinessLogic();
        }


        if (logger.isInfoEnabled()) {
        logger.info("initBusinessLogic() =&gt; done now");
        }
        return DONE;
        };

        @PostConstruct
        public final void postconstruct(){
        if (logger.isDebugEnabled()) {
        logger.debug("PostConstruct mockModusActive == " + mockModusActive);
        }
        cdiPostConstruct();
        initCompleteCDI = true;
        if (logger.isDebugEnabled()) {
        logger.debug("postconstruct ready " + getClass().getName());
        }
        }

        public abstract void cdiPostConstruct();

        @Override
        public final void initialize(URL url, ResourceBundle resourceBundle) {
        if (logger.isDebugEnabled()) {
        logger.debug("initialize mockModusActive== " + mockModusActive);
        }
        initializeFX(url, resourceBundle);
        initCompleteFX = true;
        if (logger.isDebugEnabled()) {
        logger.debug("initialize ready " + getClass().getName());
        }
        }


        protected abstract void initializeFX(URL url, ResourceBundle resourceBundle);
        /**
        * wird nach der init von CDI und JavaFX aufgerufen,
        * egal in welcher Reihenfolge die init durchlaufen wird.
        *
        * ein blockierender method call
        *
        */
        public abstract void initBusinessLogic();
        }
&lt;/pre&gt;





&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-04-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Mocking IoT Tinkerforge Sensors</title>
        <category label="java"/>
        <category label="iot"/>
        <category label="tinkerforge"/>
        <published>2014-05-12T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/05/12/mocking-iot-tinkerforge-sensors.html" rel="tag"&gt;Mocking IoT Tinkerforge Sensors&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-05-12"&gt;2014-05-12&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;A couple of days have passed since the TinkerForge-API has been published on maven central. But what can you do with it if there is no hardware around. This was my situation
as i wanted to try it out and play with the weatherstation from jaxenter (&lt;a href="http://jaxenter.de/Internet-of-Things-mit-Java-8-TinkerForge-Teil-5-171242"&gt;weatherstation&lt;/a&gt;).&lt;br/&gt;
So what can you do now? You can either mock the hardware sensor and struggle with the protocol of the sensors or you can mock the software sensor. The latter approach seems easier to me. So lets start.&lt;br/&gt;

If you only want to have a single value request (e.g. getTemperature()) the task is easy. You only have to override the method on sensor instantiation.
&lt;pre class="brush: java"&gt;
new BrickletTemperature("dV6", new IPConnection()){
    @Override
    public short getTemperature() throws TimeoutException, NotConnectedException {
           return 42;
    }
};
&lt;/pre&gt;

The more interesting task is to hack the callback listeners so that you continuously get measured values. Ok, this would be no real data but it should be sufficient for
testing and playing. To hack the sensor we need to dive a little bit into the internals of the sensors. If you add a listener to a sensor it is put into an internal list which is
processed if a specific callback event (for example for temperature) is fired. In this process the changed value is passed.&lt;br/&gt;
So the task is to create a thread which fires a specific callback event on a sensor.

&lt;pre class="brush: java"&gt;
//Creates Standard-BrickletTemperature with injected IPConnection
BrickletTemperature brickletTemperature = new BrickletTemperature("kjh6", ipConnection);

//Determine the callback event constants (note: callbackreached listeners are ignored)
List&amp;lt;Integer&amp;gt; ints = new ArrayList&lt;&gt;();
    Field[] declaredFields = deviceClass.getDeclaredFields();
    for (Field declaredField : declaredFields) {
    String fieldName = declaredField.getName();
    if (fieldName.startsWith("CALLBACK_") &amp;&amp; !fieldName.endsWith("REACHED")) {
    declaredField.setAccessible(true);
    int callbackIndex = declaredField.getInt(device);
    ints.add(callbackIndex);
    }
    }

    //Creates a Value generator for the bricklet
    try {
    createBrickletMock(ipConnection, brickletTemperature, (byte) 200, ints);
    } catch (NoSuchMethodException e) {e.printStackTrace();}
&lt;/pre&gt;
The callback events of each sensor are mapped to a constant in the sensor class which starts with CALLBACK (callback reached events have CALLBACK_&amp;lt;name&amp;gt;_REACHED) so that you can use reflection to read the values.
&lt;pre class="brush: java"&gt;
static &amp;lt;Bricklet extends Device&amp;gt; void startCallbackListenerThread(IPConnection ipcon, Device bricklet, byte startValue, List&amp;lt;Integer&amp;gt; callbackIndizes) throws NoSuchMethodException {
        Class&amp;lt;IPConnection&amp;gt; ipConnectionClass = IPConnection.class;
        Method callDeviceListener = ipConnectionClass.getDeclaredMethod("callDeviceListener", Device.class, byte.class, byte[].class);
        callDeviceListener.setAccessible(true);

        //start thread for each callback event
        for (int callbackIndex : callbackIndizes) {
            new Thread(() -&amp;gt; {

                try {

                    Random random = new Random();
                    while (true) {

                        //Generates values -1, 0 or 1
                        int randomDiff = random.nextInt(3) - 1;

                        //Invoke on device
                        callDeviceListener.invoke(ipcon, bricklet, (byte) callbackIndex, new byte[]{0, 0, 0, 0, 0, 0, 0, 0, (byte) (startValue + randomDiff), 0});


                        //wait 5s
                        Thread.sleep(THREAD_SLEEP_MILLIS);
                    }
                } catch (IllegalAccessException | InvocationTargetException | InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
        }
    }&lt;/pre&gt;

So have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-05-12&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI ContextResolver Pattern 2.0</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="CDI"/>
        <category label="ContextResolver"/>
        <published>2014-05-14T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/05/14/cdi-contextresolver-pattern-2.0.html" rel="tag"&gt;CDI ContextResolver Pattern 2.0&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-05-14"&gt;2014-05-14&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;b&gt;What is the ContextResolver Pattern?&lt;/b&gt;&lt;br /&gt;
It is a pattern described by Sven Ruppert (&lt;a href="http://jaxenter.de/artikel/CDI-entscheide-spaet-entscheide-gut-168301"&gt;here&lt;/a&gt;) to solve the following problem.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Problem&lt;/b&gt;&lt;br /&gt;
A service has several implementations which are provided to clients depending on a specific environment context (for example: test- or developmentcontext) on the service side. The
client does not know about the context and the environment context must be dynamically configurable.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Solution&lt;/b&gt;&lt;br /&gt;
Decouple the service creation from the context resolving by introducing&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;a ContextResolver which determines the current context and returns an annotation literal&lt;/li&gt;
    &lt;li&gt;a Service Context Qualifier&lt;/li&gt;
    &lt;li&gt;a service producer which uses the servicecontextqualifier&lt;/li&gt;
&lt;/ul&gt;
With that you can develop very flexible and extendable modules or applications which can be dynamically configured at runtime.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;b&gt;The Evolution&lt;/b&gt;&lt;br /&gt;
The previous version is implemented with CDI extensions which is a little bit harder to understand and needs a&amp;nbsp;&lt;i&gt;javax.enterprise.inject.spi.Extension&lt;/i&gt; file. So here
is the improved version which uses only plain CDI-Producers and therefore should be easier to understand.&lt;br /&gt;
&lt;br /&gt;
The client:&lt;br /&gt;
&lt;pre class="brush: java"&gt;@Inject
@DemoLogicContext
Instance&amp;lt;DemoLogic&amp;gt; demoLogicInst;
&lt;/pre&gt;
&lt;br /&gt;
The producer:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class DemoLogicProducer
{
 @Produces
 @DemoLogicContext
 public DemoLogic create(BeanManager beanManager, @Any Instance&amp;lt;ContextResolver&amp;gt; contextResolvers)
 {
  return ManagedBeanCreator.createManagedInstance(beanManager, contextResolvers, DemoLogic.class);
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ContextResolver:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class DemoLogicContextResolver implements ContextResolver
{
 @Inject
 Context context;

 @Override
 public AnnotationLiteral&amp;lt;?&amp;gt; resolveContext(Class&amp;lt;?&amp;gt; targetClass)
 {
  //Determines the context and returns annotionliteral 
  return context.isUseB() ? new MandantB.Literal() : new MandantA.Literal();
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ManagedBeanCreator:
&lt;br /&gt;
&lt;pre class="brush: java"&gt;public class ManagedBeanCreator
{
 public static &amp;lt;T&amp;gt; T createManagedInstance(BeanManager beanManager, Instance&amp;lt;ContextResolver&amp;gt; contextResolvers,
   Class&amp;lt;? extends T&amp;gt; clazz)
 {
  //FindFirst
  for (ContextResolver contextResolver : contextResolvers)
  {
   AnnotationLiteral&amp;lt;?&amp;gt; annotationLiteral = contextResolver.resolveContext(DemoLogic.class);
   Set&amp;lt;Bean&amp;lt;?&amp;gt;&amp;gt; beans = beanManager.getBeans(clazz, annotationLiteral);

   //Create CDI Managed Bean
   Bean&amp;lt;?&amp;gt; bean = beans.iterator().next();
   CreationalContext&amp;lt;?&amp;gt; ctx = beanManager.createCreationalContext(bean);
   return (T) beanManager.getReference(bean, clazz, ctx);
  }
  return null;
 }
}
&lt;/pre&gt;


    The sources can be found
    &lt;a href="https://bitbucket.org/abischof/cdicontextresolver2"&gt;here&lt;/a&gt;.
Have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-05-14&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Simple Forge for Rapid Development</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="javaee"/>
        <category label="forge"/>
        <published>2014-05-21T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/05/21/simple-forge-for-rapid-development.html" rel="tag"&gt;Simple Forge for Rapid Development&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-05-21"&gt;2014-05-21&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;This article covers the simple usage of Forge to build up an application (or at least an almost complete stack for a prototype).&lt;br /&gt;
So what is Forge? It is a command line tool to create and configure Java projects. You can setup different modules (for example cdi or jpa) and Forge generates all resources needed. This can be anything from java classes to deployment descriptors right up to java test classes or JSF files. On top of that this behavior is incremental, so that you can use it at any time you want.&lt;br /&gt;
&lt;br /&gt;
The setup of the modules is done by Convention over Configuration so that everything is quite simple and comprehensible. The Command line also supports tab-completion and makes the usage very fluent.&lt;br /&gt;
&lt;br /&gt;
You may ask why not Forge 2 (it is already in version 2.5.0). It is faster and a little bit easier but it lacks in one point: the Arquillian module is currently not migrated but it is planed.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Example&lt;/b&gt;&lt;br /&gt;
At first we have to tell Forge to use defaults. Then we create a project with name forgetest and the topLevelPackage de.bischinger. With this a Maven War project is created.&lt;br /&gt;
&lt;pre style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;"&gt;[no project] Development $ set ACCEPT_DEFAULTS true;
[no project] Development $ new-project --named forgetest --topLevelPackage de.bischinger;&lt;/pre&gt;
After this you can see that the shell changes from "no project" to your project name "forge test".&lt;br /&gt;
Now we want to add persistence namely Hibernate and WildFly (creates a persistence.xml and adds dependency to pom.xml)&lt;br /&gt;
&lt;pre style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;"&gt;[forgetest] forgetest $ persistence setup --provider HIBERNATE --container WILDFLY;
&lt;/pre&gt;
Create a JPA entity customer with a required field name. For this we need also to setup JPA validation.&lt;br /&gt;
&lt;pre style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;"&gt;[forgetest] forgetest $ validation setup --provider HIBERNATE_VALIDATOR;
[forgetest] forgetest $ entity --named Customer --package de.bischinger.model;
[forgetest] Customer.java $ field string --named name;
[forgetest] Customer.java $ constraint NotNull --onProperty name;
&lt;/pre&gt;
The interesting part is once again that after the creation the shell switches to the created context so that you can easily create the fields. You can also list the context with &lt;i&gt;ls&lt;/i&gt;.&lt;br /&gt;
&lt;br /&gt;
Now we want to build a simple JSF UI for the customer entity. At first we need to setup Scaffold which generates our UI.&lt;br /&gt;
&lt;pre style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;"&gt;[forgetest] Customer.java $ scaffold setup;
[forgetest] Customer.java $ scaffold from-entity de.bischinger.model.Customer.java;
&lt;/pre&gt;
After this we can build our application with &lt;i&gt;build&lt;/i&gt;&amp;nbsp;and after deploying (which can also be done with Forge but this would be another topic) we can see the following JSF-Page. On the left side is our link to the customers where we can already create, search and delete customers. It also has a paging feature.&lt;br /&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
    &lt;a href="http://4.bp.blogspot.com/-aD-MwxP_yr8/U3xRxzDgRUI/AAAAAAAAAC0/CeFU1hJQRiY/s1600/Bildschirmfoto+2014-05-21+um+09.10.41.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-aD-MwxP_yr8/U3xRxzDgRUI/AAAAAAAAAC0/CeFU1hJQRiY/s1600/Bildschirmfoto+2014-05-21+um+09.10.41.png" height="177" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    Ok - the GUI still must be customized but this is again another topic. The point is that i have spent so much time in the past to reach a state like this - now it is possible within just 2 minutes.&lt;/div&gt;
&lt;br /&gt;
But we are not finished yet - what about tests? For this we can install the Arquillian plugin into our project. We setup Arquillian to use a WildFly-Managed-Container with JUnit after which we can create our tests.&lt;br /&gt;
&lt;pre style="background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;"&gt;[forgetest] Customer.java $ forge install-plugin arquillian;
[forgetest] Customer.java $ arquillian setup --containerName WILDFLY_MANAGED --testFramework junit;
[forgetest] Customer.java $ arquillian create-test --class de.bischinger.model.Customer.java;&lt;/pre&gt;
Done.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Conclusion&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;
From my point of view this tool is worth a lot. I can integrate and configure almost any standard technology (JPA, Validation...) i want in no time. This way i can really concentrate on the business. Forge is nicely integrated in the JBoss Developer Studio, it can also be used on any shell and it is easy to understand. The generated sources can also be studied to familiarize with unknown technologies.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-05-21&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Vaadin Valo: The new theme (since version 7.3)</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="vaadin"/>
        <category label="theme"/>
        <published>2014-05-25T00:00:00+02:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/05/25/vaadin-valo--the-new-theme-(since-vers.html" rel="tag"&gt;Vaadin Valo: The new theme (since version 7.3)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-05-25"&gt;2014-05-25&lt;/time&gt; &lt;a href="/team/marco-ebbinghaus" rel="author"&gt;from Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;h2&gt;
    Vaadin's roadmap&amp;nbsp;&lt;/h2&gt;
Vaadin released the most current release 7.2 in the middle of may. It offers some interesting features like responsive layouts for components (letting components react on size changes and set new css-styles depending on the current size), native support for IE11 and improved push channel with support for long polling, Tomcat 8, Wildfly 8, Glassfish 4, Jetty 9.1. To be honest, I didn't already try all new features.

&lt;br /&gt;
&lt;br /&gt;
As you can read on their roadmap (&lt;a href="https://vaadin.com/blog/-/blogs/7-series" target="_blank"&gt;here&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href="https://vaadin.com/roadmap" target="_blank"&gt;here&lt;/a&gt;) the next release 7.3 (to be released in june) will contain a new theme called 'Valo' which looks pretty nice and which I wanted to try for a new project. There are already two alpha versions available for it and I will show you later in this post how I got it running.&lt;br /&gt;
&lt;br /&gt;
Then there will be a version 7.4 which will contain a new component 'Grid' which seems to become very important. By now the Table-component seems to be one of the core components used in Vaadin-applications. If we believe the Vaadin guys, Grid will become Table's big brother with lots of improvements and new functions that the Table can't offer (e.g. dynamic row heights). I'm very curious about it and it really seems to become a big component because its release will be splitted in two parts. A first version of Grid will be released with version 7.4 but the following release 7.5 will mainly focus on extending the Grid-component.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    Valo&lt;/h2&gt;
&lt;div&gt;
    Let's focus on the new theme 'Valo'. The Vaadin guys posted a preview-picture of the new styles and in my opinion this looks really nice:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="403" src="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;a href="https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676"&gt;https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    As I already wrote it will be included in release version 7.3 in june. There are already two beta versions - alpha1 and alpha2 - which you can use to start experimenting.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Here is what I did to get a Vaadin-Project running with the new theme in version 7.3.0.alpha2 (I mainly followed the instructions from the &lt;a href="http://vaadin.com/download/prerelease/7.3/7.3.0/7.3.0.alpha2/release-notes.html" target="_blank"&gt;release notes&lt;/a&gt;&amp;nbsp;but at some points I had to go a slightly different way):&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    &lt;ol&gt;
        &lt;li&gt;Create a new maven project from the vaadin archetype "vaadin-archetype-application" with version 7.3.0.alpha2&lt;/li&gt;
        &lt;li&gt;mvn clean install&lt;/li&gt;
        &lt;li&gt;Navigate to the exploded war-directory and from there navigate to WEB-INF/lib&lt;/li&gt;
        &lt;li&gt;Extract "vaadin-themes-7.3.0.alpha2.jar" as it contains the needed "valo" folder&lt;/li&gt;
        &lt;li&gt;Copy the folder VAADIN/themes/valo (from the extracted vaadin-themes-7.3.0.alpha2 folder) to the folder src/main/webapp/VAADIN/themes in your Vaadin-project. The "valo" folder should now exist next to your "mytheme"-folder.&lt;/li&gt;
        &lt;li&gt;Change the content of the "mytheme.scss"-file in your "mytheme"-folder to the following:&lt;br /&gt;&lt;pre&gt;// Any variables you wish to override should be done before importing Valo

// Modify the base color of the theme
$v-app-background-color: hsl(200, 50%, 50%);

@import "../valo/valo";

@mixin mytheme {
  @include v-valo;
}&lt;/pre&gt;
        &lt;/li&gt;
        &lt;li&gt;Install ruby (because it contains the needed sass-compiler which will be included in the final 7.3-release but which is not included in the alpha-version). You can download and install it from &lt;a href="http://www.rubyinstaller.org/" target="_blank"&gt;http://www.rubyinstaller.org/&lt;/a&gt;. I installed it on Windows and after installing it I used the console to install the sass-compiler via ruby by entering the following command: gem install sass
        &lt;/li&gt;
        &lt;li&gt;Navigate via console to your project and into the folder src/main/webapp/VAADIN/mytheme
        &lt;/li&gt;
        &lt;li&gt;Enter the following command: sass styles.scss styles.css&lt;/li&gt;
        &lt;li&gt;Go into your project's pom.xml. Comment out the &amp;lt;goal&amp;gt;compile-theme&amp;lt;/goal&amp;gt; - entry in the "vaadin-maven-plugin".&lt;i&gt; Look at the update at the end of this posting for more explaination on this.&lt;/i&gt;&lt;/li&gt;
        &lt;li&gt;Build&amp;nbsp;(e.g. by running mvn install)&amp;nbsp;and deploy your war file to your web-/applicationserver - Done!&lt;/li&gt;
    &lt;/ol&gt;
    &lt;b style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;"&gt;IMPORTANT: Have a look at your styles.css-file in your mytheme-folder before trying to deploy the application. It should be filled with many thousands of lines. And THAT is the right content. If you have a content like&lt;/b&gt;&lt;br /&gt;
&lt;pre style="background-color: white; color: #222222; font-size: 13px; line-height: 18.479999542236328px;"&gt;@import "../valo/valo";

.mytheme {
 name: v-valo args: []
}
&lt;/pre&gt;
    &lt;b style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;"&gt;then the vaadin sass-compiler (which doesn't work in that alpha version) was run, which overwrites the right content and crashes our theme! This might happen if you didn't comment out the goal-entry from the vaadin-maven-plugin (see step 10) and then run a mvn install.&lt;/b&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;strike&gt;I was wondering why the styles.css was overwritten when a mvn install was executed because this normally only happens after a vaadin:compile-theme task  (from the vaadin maven plugin) was run and I didn't expect that task to be run when executing a install-task. But as it seems..it does.&lt;/strike&gt;&amp;nbsp;&amp;lt;-- Update: Step 10 will fix that.&lt;br /&gt;
    &lt;ol&gt;
    &lt;/ol&gt;
    &lt;h2&gt;
        Result&lt;/h2&gt;
    &lt;ol&gt;
    &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
    That's how the Vaadin-Sample-Application looks like with Valo:&lt;br /&gt;
    &lt;br /&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;a href="http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG" height="576" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div class="separator" style="clear: both; text-align: center;"&gt;
        &lt;a href="http://1.bp.blogspot.com/-sAhi-vf9lTc/U4EKgBDhJ2I/AAAAAAAAAM4/-N87eumCEko/s1600/valo.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;br /&gt;
    Beautiful, isn't it?&lt;br /&gt;
    &lt;br /&gt;
    ----------&lt;br /&gt;
    &lt;br /&gt;
    &lt;b&gt;&lt;i&gt;Update 27.05.2014:&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;
    In the first version of this posting step 10 was "Check if the styles.css has the right content" and I wrote that I couldn't run mvn install because it overwrote the styles.css with the wrong content. So I had to let my IDE make the war-file instead of using mvn install. I fixed that now.&lt;br /&gt;
    &lt;br /&gt;
    Explaination: The task "compile-theme" from the vaadin-maven-plugin tries to compile the content of styles.scss and write the compiled content to styles.css (I don't know how that scss-stuff works in detail). BUT &lt;b&gt;the compiler used by the compile-theme-task doesn't work&lt;/b&gt; in the used alpha-version (the Vaadin guys say it will work in the final release). Because it doesn't work we need to install a compiler which works the correct way (we do this by installing ruby and running the command from step 8 and 9). After running that command the styles.css is valid and &lt;b&gt;we don't want to run the compile-theme task&lt;/b&gt; anymore because it will overwrite the styles.css with invalid content. The vaadin-maven-plugin says by its &amp;lt;execution&amp;gt; --&amp;gt; &amp;lt;goal&amp;gt;-entries that those &amp;lt;goal&amp;gt; entries should be run when mvn package or install is called. That's the reason why we have to comment out the compile-theme-task in our pom.xml. After doing that we can just use mvn install as always and then deploy the war-file.&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/marco-ebbinghaus" rel="author"&gt;Marco Ebbinghaus&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-05-25&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Big data collections with MapDB</title>
        <category label="java"/>
        <category label="javafx"/>
        <category label="mapdb"/>
        <published>2014-06-11T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/06/11/big-data-collections-with-mapdb.html" rel="tag"&gt;Big data collections with MapDB&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-06-11"&gt;2014-06-11&lt;/time&gt; &lt;a href="/team/alexander-bischof" rel="author"&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;div&gt;
        This article gives a short overview over the open source software&amp;nbsp;&lt;a href="http://www.mapdb.org/"&gt;MapDB&lt;/a&gt;&amp;nbsp;which is now in version 1.0.3.
    &lt;br /&gt;&lt;br/&gt;
    &lt;h2&gt;
        What is MapDB?&lt;/h2&gt;
    &lt;div&gt;
        Original designed as a storage engine for an astronomical desktop application it had two design goals &lt;b&gt;minimal overhead&lt;/b&gt; and &lt;b&gt;simplicity&lt;/b&gt;. Over the time the engine had evolved and the third goal &lt;b&gt;provide an alternative Java memory model&lt;/b&gt;&amp;nbsp;was added. So now it is a storage engine which is specialized for big data collections and for that has some cool features.&lt;br /&gt;
        For example:&lt;/div&gt;
    &lt;ul&gt;
        &lt;li&gt;Write to Heap, OffHeap, File or TempFile&lt;/li&gt;
        &lt;li&gt;Synchronization of Maps/TreeMaps/Sets and Queues&amp;nbsp;&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Maps can also be build with composite keys&lt;/li&gt;
            &lt;li&gt;bidirectional maps&lt;/li&gt;
            &lt;li&gt;synchronization between maps (in case you have a 1-N association)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Caching&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;expiration on disk usage, access or write time&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Compression&lt;/li&gt;
        &lt;li&gt;Faceting aka Histogram&lt;/li&gt;
        &lt;li&gt;Simulated Auto-Increment&lt;/li&gt;
        &lt;li&gt;Transactions (Note: a single transaction can only be used once)&lt;/li&gt;
        &lt;li&gt;Querying&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h2&gt;
        Small Example&lt;/h2&gt;
    The following example shows the simplicity in the context of IoT where i put 10 million temperature values into a collection which is backed by an off-heap and group the values into five groups (cold, fresh, warm, hot and burns). For filling the cache I also use auto increment.&lt;/div&gt;
&lt;pre class="brush: java"&gt;
    public class TemperatureRepository {
    private final Atomic.Long keyinc;
    private ConcurrentHashMap&amp;lt;String, Long&amp;gt; histogram;
    private HTreeMap&amp;lt;Long, Integer&amp;gt; temperatureMap;

    public TemperatureRepository() {
        //Create off-heap memory cache
        temperatureMap = DBMaker.newCache(1.0);

        //Get Autoincrement counter
        DB db = new DB(temperatureMap.getEngine());
        keyinc = db.getAtomicLong("map_temp");

        // histogram, category is a key, count is a value
        histogram = new ConcurrentHashMap&amp;lt;String, Long&amp;gt;(); //any map will do

        // bind histogram to primary map
        // we need function which returns category for each map entry
        Bind.histogram(temperatureMap, histogram, (key, value) -&amp;gt; {
            String ret = null;

            if (value &amp;lt; 0) {
                ret = "cold";
            } else if (value &amp;lt; 10) {
                ret = "fresh";
            } else if (value &amp;lt; 20) {
                ret = "warm";
            } else if (value &amp;lt; 30) {
                ret = "hot";
            } else {
                ret = "burns";
            }
            return ret;
        });
    }

    public void add(int temperature) {
        temperatureMap.put(keyinc.incrementAndGet(), temperature);
    }

    public void printHistogram() {
        System.out.println(histogram);
    }

    public static void main(String[] args) {
        TemperatureRepository temperatureRepository = new TemperatureRepository();
        new Random().ints(-10,40).parallel().limit(1_000_000).forEach(e-&amp;gt; temperatureRepository.add(e));
        temperatureRepository.printHistogram();
    }
}
&lt;/pre&gt;
&lt;div&gt;
    &lt;br /&gt;
    &lt;h2&gt;
        Fazit&lt;/h2&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Until now I haven't had the chance to use MapDB in a productive environment but on our playground at&amp;nbsp;&lt;a href="http://www.rapidpm.org/"&gt;www.rapidpm.org&lt;/a&gt;&amp;nbsp;it makes a very good impression.&lt;/div&gt;

&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/alexander-bischof" rel="author"&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-06-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
