<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>IDEA</title>
    <category label="IDEA"/>
    <updated>2015-01-10T02:11:00.363+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>IntelliJ - kleine Dinge aus dem Entwickleralltag..</title>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Tools"/>
        <published>2013-05-22T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/22/intellij-kleine-dinge-aus-dem-entwickl.html" rel="tag"&gt;IntelliJ - kleine Dinge aus dem Entwickleralltag..&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-22"&gt;2013-05-22&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;Bei der Verwendung von IntelliJ heute ist mir ein kleines Symbol am Rand aufgefallen. Bei näherer Betrachtung ist mir aufgefallen…&amp;nbsp; es zeigt mir an dass es hier eine Rekursion gibt.. Nettes Icon..&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh4.ggpht.com/-kpNzrYtCKgg/UZ0oJAXuNII/AAAAAAABQ1c/dHaHcsyRM40/s1600-h/image%25255B5%25255D.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-_nMBkpHGIhk/UZ0oKEKBFoI/AAAAAAABQ1k/D_ocl9SAPGw/image_thumb%25255B3%25255D.png?imgmax=800" width="496" height="281"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-22&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JavaEE - Arquillian - first version to play</title>
        <category label="Arquillian"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JBoss"/>
        <category label="jUnit"/>
        <published>2013-05-29T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/05/29/javaee-arquillian-first-version-to-pla.html" rel="tag"&gt;JavaEE - Arquillian - first version to play&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-05-29"&gt;2013-05-29&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &amp;nbsp;;-)&lt;br /&gt;
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.&lt;br /&gt;
kurz: Was ist Arquillian?&lt;br /&gt;
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.&lt;br /&gt;
&lt;a href="http://arquillian.org/" target="_blank"&gt;Arquillian Homepage&lt;/a&gt; –&amp;gt; Unter &lt;a href="https://bitbucket.org/svenruppert/javaee-arquillian" target="_blank"&gt;Bitbucket - JavaEE – Arquillian&lt;/a&gt; sind alle Sourcen in einem Git-Repository.&lt;br /&gt;
&lt;br /&gt;
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.&lt;br /&gt;
Interessant ist der Abschnitt im Profil &lt;strong&gt;arquillian-jbossas-managed&lt;/strong&gt;. Unter &lt;strong&gt;build-&amp;gt;testRessourcen&lt;/strong&gt; ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.&lt;br /&gt;
&lt;br /&gt;
Die nächste Konfigurationsstelle ist die Datei&amp;nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800" height="388" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="865" /&gt;&lt;/a&gt;&lt;br /&gt;
Remote Test auf einem JBoss.&lt;br /&gt;
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.&lt;br /&gt;
In der Datei arquillian.xml unter &lt;strong&gt;jbossas-remot&lt;/strong&gt; ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.&lt;br /&gt;
&lt;br /&gt;
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)&lt;br /&gt;
Demnächst dann mehr mit praktischen Dingen…&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-05-29&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-06-26T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/06/26/cdi-commons-dynamic-service-resolver.html" rel="tag"&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-06-26"&gt;2013-06-26&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;&lt;p&gt;In meinem Blog über CDi und i18n (&lt;a href="http://www.rapidpm.org/2013/06/cdi-commons-i18n.html" target="_blank"&gt;Artikel&lt;/a&gt;) hatte ich einen PropertyRegistryService vorgestellt.&lt;/p&gt; &lt;p&gt;Als Beispiel wurde der Producer für die Instanz eines SimpleDateFormat gezeigt. &lt;/p&gt; &lt;p&gt;&lt;a href="http://lh3.ggpht.com/-uHPakGHkaOQ/UcrzhykV6lI/AAAAAAABSKM/U5BFjin6KH4/s1600-h/image%25255B3%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-nl3-2Ew87K8/UcrzihB3ncI/AAAAAAABSKU/f0Z4x6v8JGU/image_thumb%25255B1%25255D.png?imgmax=800" width="644" height="284"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Nicht schön war die harte Kopplung der Implementierung des PropertyRegistryService. Per Annotation wurde&lt;/p&gt; &lt;p&gt;die Implementierung deklariert. &lt;strong&gt;@CDIPropertyRegistryFileBased&lt;/strong&gt; (im Blog noch @CDIFileBased)&lt;/p&gt; &lt;p&gt;Immer wieder muss aber zur Laufzeit entschieden werden welche Implementierung verwendet werden soll/muss.&lt;/p&gt; &lt;p&gt;Das kann verschiedene Gründe haben wie z.B. das derzeitige Lastverhalten, der angemeldete User und und und.&lt;/p&gt; &lt;p&gt;Wie also die Endscheidung vornehmen? &lt;/p&gt; &lt;p&gt;Zwei Dinge sind notwendig:&lt;/p&gt; &lt;p&gt;1) Das Interface der implementierenden Klasse, in unserem Fall PropertyRegistryService&lt;/p&gt; &lt;p&gt;2) und der Qualifier um den richtigen Producer zu selektieren.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-h00St984Puw/UcrzjsYJWqI/AAAAAAABSKY/_tdGiHgBOtM/s1600-h/image%25255B10%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-qqqZ7bBXoYU/UcrzkSEbvAI/AAAAAAABSKk/uysM0o1UCdo/image_thumb%25255B6%25255D.png?imgmax=800" width="1028" height="436"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Das Interface ist relativ leicht zu ermitteln. Mann kann es fest angeben, da man weiß das man genau dieses Interface benötigt.&lt;/p&gt; &lt;p&gt;Wenn auch das dynamisch ermittelt werden muss, kann man hier ähnlich wie bei den MessageRessourcen vorgehen. Es wird ein Key übergeben, der an anderer Stelle auf ein Interface gemappt wird. Hier einfach simuliert durch die Methode &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Class mapp2Class(final String key)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Spannender wird es bei der Auswahl der richtigen Qualifiers. Das ist der Kern der Implementierung.&amp;nbsp; Simuliert wird es hier &lt;/p&gt; &lt;p&gt;durch die Methode &lt;strong&gt;resolveContextImpl().&lt;/strong&gt; Wie genau die Implementierung aussehen kann, hängt von der Umgebung ab und welche Parameter ausgewertet werden müssen.&lt;/p&gt; &lt;p&gt;Die Implementierung hier erzeugt ein &lt;strong&gt;AnnotationLiteral&amp;lt;CDIPropertyRegistryFileBased&amp;gt;.&lt;/strong&gt; Das ist wieder eine harte Kopplung, kann jedoch wieder durch einen Mappingmechanismus zur Laufzeit aufgelöst werden.&amp;nbsp; Am einfachsten,&amp;nbsp; in dem man eine Klasse dynamisch instanziiert, die von AnnotationLitaral erbt.&lt;/p&gt; &lt;p&gt;z.B.&lt;/p&gt; &lt;p&gt;&lt;a href="http://lh6.ggpht.com/-G1N0nxPr5Jw/UcrzlHIDuvI/AAAAAAABSKs/Los4mxtfuRs/s1600-h/image%25255B14%25255D.png"&gt;&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y0L-RO_BVbQ/Ucrzl2JaOdI/AAAAAAABSK0/H3f7eFzzq1Y/image_thumb%25255B8%25255D.png?imgmax=800" width="644" height="118"&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-06-26&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Hot Swap in Java with DCEVM</title>
        <category label="IDEA"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Tools"/>
        <published>2013-07-12T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/07/12/hot-swap-in-java-with-dcevm.html" rel="tag"&gt;Hot Swap in Java with DCEVM&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-07-12"&gt;2013-07-12&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Immer auf der Suche nach neuen Werkzeugen…&amp;nbsp; Hier DCEVM (&lt;a href="http://ssw.jku.at/dcevm/" target="_blank"&gt;http://ssw.jku.at/dcevm/&lt;/a&gt;)&lt;br /&gt;
Und das beste: Es gibt es schon als intelliJ Plugin..&lt;br /&gt;
&lt;a href="http://blogs.jetbrains.com/idea/2013/07/get-true-hot-swap-in-java-with-dcevm-and-intellij-idea/" target="_blank"&gt;http://blogs.jetbrains.com/idea/2013/07/get-true-hot-swap-in-java-with-dcevm-and-intellij-idea/&lt;/a&gt;&lt;br /&gt;
das normale HotSwaping hat enge Grenzen sobald man an der Struktur der Klassen Veränderungen vornimmt. Hier gab es bisher immer noch das kommerzielle Werkzeug jRebel.&lt;br /&gt;
(Danke übrigens an das jRebel Team f die OSS Lizenz)&lt;br /&gt;
Nun gibt es eine OSS Lösung die genau an dieser Stelle weiterhilft. &lt;br /&gt;
Ich werde von meinen Tests berichten… &lt;img alt="Zwinkerndes Smiley" class="wlEmoticon wlEmoticon-winkingsmile" src="http://lh6.ggpht.com/-G022Pyxe_B0/Ud-RlflpOrI/AAAAAAABSkE/ULRusdSNp3Q/wlEmoticon-winkingsmile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-07-12&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.fx -JavaFX/CDI Bootstrap</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="Weld"/>
        <published>2013-08-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2013/08/03/cdi.commons.fx-javafx-cdi-bootstrap.html" rel="tag"&gt;cdi.commons.fx -JavaFX/CDI Bootstrap&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2013-08-03"&gt;2013-08-03&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;The both technologies JavaFX and CDI are greate for itself.. but how to combine them? How I can get managed JavaFX - controller instances? &lt;br /&gt;
Starting from the JavaFX – side, we have to implement the Class extending &lt;strong&gt;javafx.application.Application.&lt;/strong&gt; The importand method will be &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;public&lt;/code&gt; &lt;code&gt;void&lt;/code&gt; &lt;code&gt;start(Stage primaryStage) &lt;/code&gt;&lt;code&gt;throws&lt;/code&gt; &lt;code&gt;Exception&lt;/code&gt;&lt;/em&gt;&lt;/blockquote&gt;
&lt;code&gt;&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/main/java/org/rapidpm/demo/cdi/commons/fx/CDIJavaFXBaseApplication.java?at=develop" target="_blank"&gt;CDIJavaFXBaseApplication&lt;/a&gt;&lt;/code&gt; &lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-spRH4z861ZQ/Uf12wRaYx5I/AAAAAAABTJI/dma-IzG6hho/s1600-h/image%25255B3%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-IKNxCJX9Ma8/Uf12wwRsReI/AAAAAAABTJQ/MQTcwt1GbIU/image_thumb%25255B1%25255D.png?imgmax=800" height="274" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt;  &lt;br /&gt;
&amp;nbsp; &lt;br /&gt;
With &lt;strong&gt;CDIContainerSingleton.getInstance()&lt;/strong&gt; you will get an instance of the Weld-Container. After the normal JavaFX – init&amp;nbsp; there will be an event fired with the primaryStage as attribute. Now the primaryStage is available in an managed environment. &lt;br /&gt;
JAvaFX –&amp;gt; CDI &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;cdi.event()&lt;/code&gt;&lt;code&gt;.select(Stage.&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;new&lt;/code&gt; &lt;code&gt;AnnotationLiteral&amp;lt;CDIStartupScene&amp;gt;() {})&lt;/code&gt;&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .fire(primaryStage);&lt;/em&gt;&lt;/code&gt;&lt;/blockquote&gt;
The observer will catch this event. Hownthis will be donw, I show with the excample jUnit-test.&lt;br /&gt;
(&lt;a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/test/java/org/rapidpm/demo/cdi/commons/fx/JavaFXBaseTest.java?at=develop" target="_blank"&gt;JavaFXBaseTest&lt;/a&gt;)&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-pe3l8kSIZrI/Uf12xUqXCaI/AAAAAAABTJY/4qNT0JYh-5o/s1600-h/image%25255B7%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh6.ggpht.com/-mYyW73L1y7A/Uf12xkbSleI/AAAAAAABTJg/GrkqVjLTMhM/image_thumb%25255B3%25255D.png?imgmax=800" height="345" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&amp;gt; testImpl(final Stage stage). The jUnit-Test will be a manged instance itself.&lt;br /&gt;
&lt;a href="http://lh3.ggpht.com/-rIZgDI2CmZc/Uf12yFhNcaI/AAAAAAABTJo/xmDBb7Nilas/s1600-h/image%25255B11%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-ANX-6HvYjEk/Uf12y-vIj3I/AAAAAAABTJw/sbkL-wTuD-A/image_thumb%25255B5%25255D.png?imgmax=800" height="484" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="636" /&gt;&lt;/a&gt; &lt;br /&gt;
But how to get the manged controller class instance?&lt;br /&gt;
This is done by the &lt;code&gt;&lt;strong&gt;FXMLLoaderSingleton used from the jUnit-test.&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;
&lt;blockquote&gt;
&lt;pre class="brush:java"&gt;
final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;br /&gt;
During the process of loading the fxml-file the used FxmlLoader will get an instance of an ControllerFactory-Callback.&lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-81g1FPtpMV0/Uf12zchLfMI/AAAAAAABTJ4/UZ6beCx-JkE/s1600-h/image%25255B15%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-snchFSsAGE8/Uf12zxccG1I/AAAAAAABTKA/WmMrwTqTh50/image_thumb%25255B7%25255D.png?imgmax=800" height="379" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The importand lines are the following &lt;br /&gt;
&lt;a href="http://lh6.ggpht.com/-TW3PcealhwQ/Uf120NC8jFI/AAAAAAABTKI/8Tz8jER8lbU/s1600-h/image%25255B19%25255D.png"&gt;&lt;img alt="image" border="0" src="http://lh5.ggpht.com/-2vpQxC1vfnI/Uf1207BA-xI/AAAAAAABTKQ/f8jnqwb7CC0/image_thumb%25255B9%25255D.png?imgmax=800" height="93" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /&gt;&lt;/a&gt; &lt;br /&gt;
The ControllerFactory-&amp;gt;Callback.call() will give back a manged instance of the controller class.&lt;br /&gt;
Now you can use CDI inside the pojo-fx-controller class.&lt;br /&gt;


&lt;pre class="prettyprint"&gt;
public class LoginController implements CDIJavaFxBaseController {
    // Standard FXML injected fields
 @FXML TextField loginField;
 @FXML PasswordField passwordField;
 @FXML Text feedback;
 
 // CDI Injected field
 @Inject LoginService loginService;
 
    // Default application parameters
 @Inject @CDIJavaFXBaseApp
    Parameters applicationParameters;
 
 @FXML protected void handleSubmitButtonAction(ActionEvent event) {
  feedback.setText(loginService.login(loginField.getText(), passwordField.getText()));
 }

 @Override
 public void initialize(URL location, ResourceBundle resources) {
  loginField.setText(applicationParameters.getNamed().get("user"));
 }
}
&lt;/pre&gt;



&lt;br /&gt;
So we are done..&amp;nbsp; Happy coding ;-)&lt;br /&gt;
&lt;br /&gt;
UML-Diagramm&lt;br /&gt;
&lt;img alt="" src="http://wiki.rapidpm.org/download/attachments/8093789/uml_fx_20130802_001.png?version=1&amp;amp;modificationDate=1375433878726&amp;amp;api=v2" height="479" width="640" /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2013-08-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
