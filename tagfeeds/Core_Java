<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Core Java</title>
    <category label="Core Java"/>
    <updated>2015-01-10T01:39:11.557+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <entry>
        <title>are you missing the ? operator from project coin?</title>
        <category label="Core Java"/>
        <category label="Proxy"/>
        <category label="Reflection"/>
        <published>2014-02-20T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/02/20/are-you-missing-the-operator-from-proj.html" rel="tag"&gt;are you missing the ? operator from project coin?&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-02-20"&gt;2014-02-20&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;How to get rid of 90% boiler plate code from NPE-save model - surfing?
&lt;br/&gt;
What I am meaning with modell surfing?
For example you have a class DemoClassA.&lt;br/&gt;
Inside DemoClassA you have an instance of DemoClassB.&lt;br/&gt;
Inside DemoClassB you have an instance of DemoClassC. And so on..&lt;br/&gt;
&lt;br/&gt;
You need something like the following.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
String value = demoClassA.getDemoClassB().getDemoClassC().getValue();
    &lt;/class&gt;&lt;/pre&gt;
The bad thing is if your valid model could have ClassB or ClassC with null.
You only have to show the value inside your GUI if the complete getter - cascade will be valid.
The first would be something like this.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class="brush: java"&gt;  
 DemoClassB valueB = demoClassA.getDemoClassB();
 if(demoB != null){
    DemoClassC demoC = demoB.getDemoClassC();
    if(demoC != null){
     String value = demoC.getValue();
    }
 }
    &lt;/class&gt;&lt;/pre&gt;
A lot of booooring code. Project Coin had something with Wildcards.
&lt;br/&gt;
&lt;pre class="brush: java"&gt; 
 String value = demoClassA?.getDemoClassB()?.getDemoClassC()?.getValue();
    &lt;/class&gt;&lt;/pre&gt;
This is really nice, but it was not accepted. So I had do something like this for myself.
&lt;br/&gt;
One main point will be that the objects are ready initialized and I could not change the source code from this part.
Other languages as plain Java are not allowed.
No other frameworks, no AOP and something like this.
Puuhh.. what else?
&lt;br/&gt;
I was thinking about the newsletter nr 180 (&lt;a href="http://www.javaspecialists.eu/archive/Issue180.html"&gt;http://www.javaspecialists.eu/archive/Issue180.html&lt;/a&gt;) from Heinz Kabutz.
He explained how to generate static Proxy Classes. This was a good point to start from.
&lt;br/&gt;
The key concept is the generating of Proxy Classes on the fly if they are needed. Via Reflection the real Subject is analysed and the Proxy generated. He is instanciating the new proxy class and the real subject with the default constructor. For my project this was not helpfull, because the model was grown over the last 10 years. Nearly no default constructor is available and the project owner was building something like a RMI Lazy Loading inside the persistent model. This model itself is used directly inside Swing.. hmmmmm  nothing was I really want to use... &lt;br/&gt;
Changing the old code is very time consuming. &lt;br/&gt;
On the other side I was writing a lot of this if != null code. &lt;br/&gt;
So I decided to write a Proxy that I can use on initialized objects. This must be recursive to get the NPE save getter cascades.
Based on Heinz code, I started to write a &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject &lt;/b&gt;to stop the instance creation on the real Subject.
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
public class VirtualProxySourceGeneratorOnExistingObject extends VirtualProxySourceGenerator {

    public VirtualProxySourceGeneratorOnExistingObject(
            Class subject, Class realSubject) {
        super(subject, realSubject, Concurrency.OnExistingObject);
    }
    protected void addRealSubjectCreation(PrintWriter out,  String name, String realName) {
        out.printf(" public %s realSubject;%n", name);
        out.println();
        out.printf(" private %s realSubject() {%n", name);
        out.println(" return realSubject;");
        out.println(" }");
    }
}
    &lt;/class&gt;&lt;/pre&gt;
After this I changed the &lt;b&gt;VirtualProxySourceGenerator&lt;/b&gt;to use this &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject&lt;/b&gt; and changed it in a way that a getter method will generate a new Proxy for the next realSubject.
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
public abstract class VirtualProxySourceGenerator {

    protected final Class subject;
    protected final Class realSubject;
    private final String proxy;
    private CharSequence charSequence;
    private Concurrency type;

    public VirtualProxySourceGenerator(
            Class subject, Class realSubject, Concurrency type) {
        this.subject = subject;
        this.realSubject = realSubject;
        this.type = type;
        this.proxy = makeProxyName(subject, type);

    }

    private static String makeProxyName(Class subject, Concurrency type) {
        return "$$_" + subject.getName().replace('.', '_') +
                "Proxy_" + Integer.toHexString(System.identityHashCode(
                subject.getClassLoader())) + "_" + type;
    }

    public String getProxyName() {
        return proxy;
    }

    public CharSequence getCharSequence() {
        if (charSequence == null) {
            StringWriter sw = new StringWriter();
            generateProxyClass(new PrintWriter(sw));
            charSequence = sw.getBuffer();
        }
        //System.out.println("charSequence = " + charSequence.toString());
        return charSequence;
    }

    private void generateProxyClass(PrintWriter out) {
        addClassDefinition(out);
        addProxyBody(out);
        out.close();
    }

    private void addProxyBody(PrintWriter out) {
        addRealSubjectCreation(out, subject.getName(), realSubject.getName());
        addProxiedMethods(out);
        out.println("}");
    }

    protected abstract void addRealSubjectCreation(PrintWriter out, String name, String realName);


    private void addClassDefinition(PrintWriter out) {
        addImports(out);
        out.printf("public class %s %s %s {%n",
                proxy, getInheritanceType(subject), subject.getName());
    }

    private String getInheritanceType(Class subject) {
        return subject.isInterface() ? "implements" : "extends";
    }

    protected void addImports(PrintWriter out) {

    }

    private void addToStringIfInterface(PrintWriter out) {
        if (subject.isInterface()) {
            out.println();
            out.println(" public String toString() {");
            out.println(" if(realSubject() == null ) return \"NullObjectHolder in \" + this.getClass() ;");
            out.println(" return realSubject().toString();");
            out.println(" }");
        }
    }

    private void addProxiedMethods(PrintWriter out) {
        for (Method m : subject.getMethods()) {
            addProxiedMethod(out, m);
        }
        addToStringIfInterface(out);
    }

    private void addProxiedMethod(PrintWriter out, Method m) {
        if (Modifier.isFinal(m.getModifiers())) return;
        addMethodSignature(out, m);
        addMethodBody(out, m);   //NPE da val ger getter gefuellt wird

        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf(");%n }%n");
        else {
            out.printf(");%n");  //end of orig method.. start proxy additional stuff
            final boolean aFinal = Modifier.isFinal(returnType.getModifiers());
            if (!returnType.isPrimitive() &amp;&amp; !returnType.isArray() &amp;&amp; ! aFinal ){
                final String typeName = returnType.getTypeName();
                final String proxyGenerator = "org.rapidpm.module.se.commons.proxy.ProxyGenerator";
                final String concurrency = "org.rapidpm.module.se.commons.proxy.Concurrency";
                out.printf(" if (val == null) { System.out.println(\" val == null for method  + " +m.getName()+ "\");} %n");
                out.printf(typeName + " proxyObj = " + proxyGenerator+ ".make("+typeName+".class, "+typeName+".class, " +concurrency+"."+type.toString()+"); %n");

                if (type.equals(Concurrency.OnExistingObject)){
                    out.printf("try { %n");
                    out.printf("    proxyObj.getClass().getDeclaredField(\"realSubject\").set(proxyObj, val);  %n");
                    out.printf("} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {  %n");
                    out.printf("    e.printStackTrace(); %n");
                    out.printf("}  %n");
                }
                out.printf(" return proxyObj; %n");
            } else {
                out.printf(" return val; %n");
            }
                out.printf("%n}%n");
        }
    }

    private void addMethodSignature(PrintWriter out, Method m) {
        out.printf("%n public %s", Util.prettyPrint(m.getReturnType()));
        out.printf(" %s(", m.getName());
        addParameterList(out, m);
        out.printf(") {%n ");
    }

    private void addParameterList(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? "" : ", ";
            out.printf("%s p%d%s", Util.prettyPrint(types[i]), i, next);
        }
    }

    private void addMethodBody(PrintWriter out, Method m) {
        addMethodBodyDelegatingToRealSubject(out, m);
    }

    private void addMethodBodyDelegatingToRealSubject(PrintWriter out, Method m) {
        //hole result
        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf("realSubject().%s(", m.getName());
        else if(m.getName().equals("toString")){
            out.println("String val;");
            out.println(" if(realSubject() == null ) val = \"NullObjectHolder in \" + this.getClass() ; ");
            out.printf(" else val = realSubject().%s(", m.getName());
        } else if(m.getName().startsWith("get") &amp;&amp; ! returnType.isPrimitive()){
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + " val;");
            out.println(" if(realSubject() == null ) val = null ; ");
            out.printf(" else val = realSubject().%s(", m.getName());   
        } else {
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + " val;");
            out.printf("val = realSubject().%s(", m.getName());  

        }
        addMethodCall(out, m);
    }

    private void addMethodCall(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? "" : ", ";
            out.printf("p%d%s", i, next);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
The result is really cool. see the following code ;-)
&lt;br/&gt;
&lt;pre class="brush: java"&gt;
       DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println("value = " + value);
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;

You can navigate the full path. no NPE! No boiler plate code!

&lt;pre class="brush: java"&gt;
@Test
    public void testGenerator00X() throws  Exception {
        DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println("value = " + value);

    }

private DemoClassA proxy(DemoClassA demoClassA) {
        final Class&amp;lt;DemoClassA&amp;gt; aClass = (Class&amp;lt;DemoClassA&amp;gt;) demoClassA.getClass();
        final DemoClassA demo = ProxyGenerator.make(aClass, aClass, Concurrency.OnExistingObject);

        final Class&amp;lt;? extends DemoClassA&amp;gt; aClassProxy = demo.getClass();
        try {
            aClassProxy.getDeclaredField(&amp;quot;realSubject&amp;quot;).set(demo,demoClassA );
        } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {
            e.printStackTrace();
        }
        return demo;
    }
    &lt;/class&gt;&lt;/pre&gt;
You can now use every getter.. not NPE. Only the result will be an null. This was exactly what I needed to get only the valid values from the model if they are available.
This means, that you could proxy an object after you have initialized it.
The full source code is available under : &lt;a href="https://bitbucket.org/rapidpm/modules"&gt;https://bitbucket.org/rapidpm/modules&lt;/a&gt; on the develop branch. I will merge it into the version 2.0 as generic pattern and CDI managed...



&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-02-20&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Java8 CompletableFuture for JavaFX and CDI Part I</title>
        <category label="CDI"/>
        <category label="Concurrency"/>
        <category label="Core Java"/>
        <category label="Java8"/>
        <category label="JavaFX"/>
        <published>2014-03-28T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class="article clearfix"&gt;
							&lt;header class="article-header"&gt;
								&lt;h2 class="article-title"&gt;&lt;a href="/2014/03/28/java8-completablefuture-for-javafx-and.html" rel="tag"&gt;Java8 CompletableFuture for JavaFX and CDI Part I&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime="2014-03-28"&gt;2014-03-28&lt;/time&gt; &lt;a href="/team/sven-ruppert" rel="author"&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class="article-content clearfix"&gt;
								&lt;div class="post-thumb"&gt;
									&lt;img src="./site/content/post_thumb.jpg" width="" height="" alt="" /&gt;
								&lt;/div&gt;
								&lt;div class="post-excerpt"&gt;Java8 CompletableFuture for JavaFX and CDI Part I

Java8 will give you a few more tools to solve concurrency problems.&lt;br/&gt;
One of them is the CompletableFuture. I will show you, how you could sync the &lt;br/&gt;
two different init-cycles from CDI and JavaFX with this.&lt;br/&gt;
&lt;br/&gt;
CDI and JavaFX are using a life-cycle during the init process. &lt;br/&gt;
For CDI you can use the method that is annotated with the &lt;br/&gt;
AnnotationLiteral @Postconstruct and for JavaFX you can use the method initialize(..)
&lt;br/&gt;
If you want to have a method that is called after both others are finished you have to think &lt;br/&gt;
about the problem that it is not clear which method is called first.&lt;br/&gt;
To show more in detail what the problem is let us think about the following.
&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
private String pattern;
private SimpleDateFormat sdf;

//beispielhaft für eine init
public void createSDF(){
    this.sdf = new SimpleDateFormat(this.pattern);        
}

//beispielhaft für eine init
public void newPattern(final String pattern) {
    this.pattern = pattern;
}

public String format(final Date date){
    return sdf.fomat(date);
}
&lt;/pre&gt;

To use the method format(..) you must use the methods newPattern(..) and createSDF first.&lt;br/&gt;
But both in the right order like the following code snipp.
&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
newPattern("yyyy.MM.dd");
createSDF();
final String s = versionAB.format(new Date());
System.out.println("s = " + s);
&lt;/pre&gt;
If you are calling first createSDF(..) for example you will get an exception.&lt;br/&gt;
But thinking to the problem with CDI and JavaFX it must be
valid to do something like the following.
&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
createSDF();
newPattern("yyyy.MM.dd");

final String s = versionAB.format(new Date());
System.out.println("s = " + s);
&lt;/pre&gt;
The method creatdSDF(..) is called before newPattern(..).&lt;br/&gt;
The solution is quite simple. The method call from createSDF must be non blocking but&lt;br/&gt;
waiting with the execution until newPattern(..) was called.&lt;br/&gt;
The same with format(..). This method call must wait until both are finished but itself it &lt;br/&gt;
is an blocking method call. This is to give the developer the feeling he expected, &lt;br/&gt;
if he is working with the result from format(..).
&lt;br/&gt;
To solve this we have to booleans called initCompleteA and initCompleteB. &lt;br/&gt;
Both are false in the beginning. If newPattern(..) is called initcompleteA will be true, &lt;br/&gt;
and initCompleteB will be true after the method creatSDF() is ready.

&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
public void newPattern(final String pattern) {
    this.pattern = pattern;
    initCompleteA=true;
    System.out.println("newPattern = " + pattern);
}
public void createSDF(){
    CompletableFuture&amp;lt;Void&amp;gt; supplyAsync
        = CompletableFuture
        .supplyAsync(taskCreateSDF, cachedThreadPool);
    supplyAsync.thenAccept(System.out::println);
}
public Supplier&amp;lt;Void&amp;gt; taskCreateSDF = ()-&amp;gt; {
    while(! initCompleteA ){
        try {
            System.out.println("createSDF is waiting" );
            TimeUnit.MILLISECONDS.sleep(4);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    sdf = new SimpleDateFormat(pattern);
    initCompleteB = true;
    return null;
};
&lt;/pre&gt;

The Method format(..) now is only waiting for both...
&lt;br /&gt;
&lt;pre class="brush: java"&gt; 
public Supplier&amp;lt;String&amp;gt; task = ()-&amp;gt; {
//Warten bis alle true
    while(! (initCompleteA &amp;&amp; initCompleteB) ){
        try {
            System.out.println("initCompleteA = " + initCompleteA);
            System.out.println("initCompleteB = " + initCompleteB);
            System.out.println("pattern = " + pattern);
            System.out.println("sdf = " + sdf);
            TimeUnit.MILLISECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    return sdf.format(this.date);
};
private Date date;

public String format(final Date date){
    this.date = date;
    supplyAsync = CompletableFuture
        .supplyAsync(task, cachedThreadPool);
    try {
        return supplyAsync.get();
    } catch (InterruptedException | ExecutionException e) {
        e.printStackTrace();
    }
    return "";
}
&lt;/pre&gt;

The example you will find at
&lt;a href="http://stash.rapidpm.org/projects/PUB/repos/jaxenter.de-0016-async-calls/browse"&gt;http://stash.rapidpm.org/projects/PUB/repos/jaxenter.de-0016-async-calls/browse&lt;/a&gt;
&lt;br/&gt;
The next Part will show how we have to implement
the JavaFX CDI bootstrapping to use this.
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class="article-footer clearfix"&gt;
								&lt;span class="post-author"&gt;&lt;a href="/team/sven-ruppert" rel="author"&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class="post-date"&gt;&lt;a href="#" rel="date"&gt;2014-03-28&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
</feed>
