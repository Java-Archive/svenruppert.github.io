Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &nbsp;;-)<br />
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.<br />
kurz: Was ist Arquillian?<br />
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.<br />
<a href="http://arquillian.org/" target="_blank">Arquillian Homepage</a> –&gt; Unter <a href="https://bitbucket.org/svenruppert/javaee-arquillian" target="_blank">Bitbucket - JavaEE – Arquillian</a> sind alle Sourcen in einem Git-Repository.<br />
<br />
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.<br />
Interessant ist der Abschnitt im Profil <strong>arquillian-jbossas-managed</strong>. Unter <strong>build-&gt;testRessourcen</strong> ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.<br />
<br />
Die nächste Konfigurationsstelle ist die Datei&nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.<br />
<a href="http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800" height="388" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="865" /></a><br />
Remote Test auf einem JBoss.<br />
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.<br />
In der Datei arquillian.xml unter <strong>jbossas-remot</strong> ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.<br />
<br />
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)<br />
Demnächst dann mehr mit praktischen Dingen…