<div style="text-align: center;">
    <i><span style="font-size: x-small;">The full code and demo jUnit you will find under :&nbsp;<a href="https://bitbucket.org/rapidpm/modules/src/6e440e241875/javafx-filtered-tableview?at=release/1.1.1" target="_blank">BitBucket Repo - RapidPM - Modules - javafx-filtered-tableview</a>&nbsp;</span></i></div>
<div style="text-align: center;">
    <i><span style="font-size: x-small;">Please use the release/1.1.1 branch and a commit after&nbsp;<a href="https://bitbucket.org/rapidpm/modules/commits/6e440e241875c2f574741bd1f0e0749054996326">6e440e2</a>&nbsp;</span></i></div>
<br />

Today I needed a button inside my TableView.

Something needed to be activated, based on some other values in this row.

How to do this in a nice, lean and decoupled way? One goal was the possibillity that the definition could be done inside the fxml - file.

LetÂ´s start with the basic cdi managed <b>ButtonCell</b>:

<script class="brush: java" type="syntaxhighlighter"><![CDATA[ 
public abstract class ButtonCell<T> extends TableCell<T, Boolean> {

    public Button cellButton;
    public abstract String getButtonLabelText();
    private List<ButtonCellAction<T>> actionList = new ArrayList<>();

    private @Inject @CDILogger Logger logger;

    public ButtonCell() {

    }

    @PostConstruct
    public void init(){
        if (logger.isDebugEnabled()) {
            logger.debug("ButtonCell->init");
        }
        cellButton = new Button(getButtonLabelText());
        cellButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                for (final ButtonCellAction<T> buttonCellAction : actionList) {
                    if (logger.isDebugEnabled()) {
                        logger.debug("execute buttonCellAction-> " + buttonCellAction);
                    }
                    buttonCellAction.execute(ButtonCell.this, t);
                }
            }
        });
    }

    @Override
    protected void updateItem(Boolean t, boolean empty) {
        super.updateItem(t, empty);
        if (!empty) {
            setGraphic(cellButton);
        }
    }

    public static abstract class ButtonCellAction<T> {
        public abstract void execute(ButtonCell<T> buttonCell, ActionEvent t);
    }


    public List<ButtonCellAction<T>> getActionList() {
        return actionList;
    }
}
]]></script>

The main part here is the method <b>setOnAction()</b>: With this we are iterating over a list of ButtonCellActions.
<br/>
Now we have to implement a class for our used TableView. In this example an simple delete-button.
<br/>

<script class="brush: java" type="syntaxhighlighter"><![CDATA[
public class DeleteButtonCell extends ButtonCell<TransientDemoDataRow> {

    private @Inject @CDILogger Logger logger;
    private @Inject @CDIPropertyRegistryService PropertyRegistryService propertyRegistryService;
    private @Inject DeleteButtonLogic logic;

    @Override public String getButtonLabelText() {
        return propertyRegistryService.getRessourceForKey("delete");
    }

    public DeleteButtonCell() {

    }

    @PostConstruct
    public void init(){
        super.init();
        if (logger.isDebugEnabled()) {
            logger.debug("DeleteButtonCell->init");
        }
        getActionList().add(new ButtonCellAction<TransientDemoDataRow>() {
            @Override public void execute(ButtonCell<TransientDemoDataRow> buttonCell, ActionEvent t) {
                if (logger.isDebugEnabled()) {
                    final Object source = t.getSource();
                    logger.debug("ButtonCellAction -> " + source);
                }
                final TableRow tableRow = buttonCell.getTableRow();
            }
        });
    }
}
]]></script>

At this point we are able to inject all the needed logic (here :<b>DeleteButtonLogic</b>) to fullfill our task. The logic will be activated inside an implementtion of the class <b>ButtonCellAction</b>. The order you are filling the Actions is the order the actions are processed. quite easy and mostly all you need.
<br/>
The implementation is easy, but we want to put this to an fxml file like the following?:

<script class="brush: javafx" type="syntaxhighlighter"><![CDATA[
<TableColumn text="tcdelete" sortable="false">
 <cellFactory>
  <DeleteButtonCellFactory/>
 </cellFactory>
 <cellValueFactory>
  <DeleteButtonCellValueFactory/>
 </cellValueFactory>
</TableColumn>
]]></script>

For this we need the CellFactory and the CellValueFactory.
Both implementations are small:

<script class="brush: java" type="syntaxhighlighter"><![CDATA[
public class DeleteButtonCellFactory
        implements Callback<TableColumn<TransientDemoDataRow, ?>, TableCell<TransientDemoDataRow, ?>> {

    @Inject Instance<DeleteButtonCell>  deleteButtonCellInstance;

    public DeleteButtonCellFactory() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }

    @Override public TableCell<TransientDemoDataRow, ?> call(TableColumn<TransientDemoDataRow, ?> column) {
        return deleteButtonCellInstance.get();
    }
}
]]></script>

<script class="brush: java" type="syntaxhighlighter"><![CDATA[
public class DeleteButtonCellValueFactory
        implements Callback<TableColumn.CellDataFeatures<TransientDemoDataRow, Boolean>,ObservableValue<Boolean>> {


    @Override public ObservableValue<Boolean> call(TableColumn.CellDataFeatures<TransientDemoDataRow, Boolean> p) {
        final TransientDemoDataRow value = p.getValue();
        return new SimpleBooleanProperty(value != null);
    }
}
]]></script>

This is all..  and the result is nice and clean..
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-2UVVaH6biHA/Ukw537ReTJI/AAAAAAABUVc/mULLql4jTi0/s1600/uml-buttoncell.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-2UVVaH6biHA/Ukw537ReTJI/AAAAAAABUVc/mULLql4jTi0/s400/uml-buttoncell.png" /></a></div>

 