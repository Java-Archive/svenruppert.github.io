<p>How to implement a scope like an transaction? The main goal was the reusability for an SE environment.</p> <p>After a little bit google- searching I found the ConversationScope. A google start, but not usable in an SE environment.</p> <p>So I started to write my own Scope. (<a href="https://bitbucket.org/svenruppert/cdi-commons" target="_blank">Source –&gt; Bitbucket</a>) First step will be an annotation CDITransactionScope with the default Annotations.</p> <p>The only new one is the annotation @NormalScope. With this annotation the container will use this as an Scope-Qualifier.</p> <p><a href="http://lh4.ggpht.com/-8_n9oH0Dbm4/UeP4SKa0QwI/AAAAAAABSuU/2x_jChe15Qs/s1600-h/image%25255B8%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-y8G10V5KAP4/UeP4SmByerI/AAAAAAABSuc/8PSmYE4yWaU/image_thumb%25255B4%25255D.png?imgmax=800" width="644" height="100"></a></p> <p>&nbsp; </p> <p>The next step is the implementation of an extension. This is done by the class CDITransactionExtension extends Extension.</p> <p>The interface Extension itself is empty and only a marker.&nbsp; The task to full fill is the registration of an context. </p> <p>The AfterBeanDiscovery event is used to add the instance of the context implementation. Important to know is, that at this point the init-phase of the weld-container is not ready.</p> <p>No <strong>@Inject</strong> is possible and the only instance that can be injected is the BeanManager.&nbsp; </p> <p><a href="http://lh5.ggpht.com/-w7ajr6R2Wpo/UeP4TMXBvSI/AAAAAAABSug/Fd7arvk8qqk/s1600-h/image%25255B12%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-UPQ2B0YHxyk/UeP4TWPOnnI/AAAAAAABSus/oiAHxpFRDzY/image_thumb%25255B6%25255D.png?imgmax=800" width="644" height="124"></a></p> <p>&nbsp;</p> <p>Finally we have to implement the heard of the transaction, the CDITransactionContext implements Context.</p> <p>This is a class, not managed by the Container and again no <strong>@Inject</strong> is possible, but the BeanManager</p> <p>is usable. (see <strong>CDITransactionExtension</strong> ) </p> <p>Four methods are found to implement from the interface Context.</p> <p>1) public Class&lt;? extends Annotation&gt; getScope()</p> <p>2) public &lt;T&gt; T get(Contextual&lt;T&gt; contextual, CreationalContext&lt;T&gt; creationalContext);</p> <p>3) public &lt;T&gt; T get(Contextual&lt;T&gt; contextual);</p> <p>4) public boolean isActive();</p> <p>&nbsp;</p> <p>Nr 2 and 3 are the important methods to implement. This methods are handling the instance-management.</p> <p>The easiest implementation could be a map like HashMap&lt;Class, Object&gt;.</p> <p>This implementation will cache all classes implementing the Interface Cacheable. (<a href="https://bitbucket.org/rapidpm/genericcache" target="_blank">GenericCache</a>) </p> <p>If an Class is implementing this Interface it will be cached, otherwise you will always get a new instance.</p> <p><a href="http://lh5.ggpht.com/-6bfsAetJgo0/UeP4UAQJKrI/AAAAAAABSu0/to6jHAfYi5Q/s1600-h/image%25255B21%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh3.ggpht.com/-Ox2h6Dou6EY/UeP4UkYhxPI/AAAAAAABSu8/mPyXJd_ZWrc/image_thumb%25255B11%25255D.png?imgmax=800" width="908" height="772"></a></p> <p>&nbsp;</p> <p>To activate this Extension, the class CDITransactionExtension must be registered in the file META-INF/javax.enterprise.inject.spi.Extension </p> <p>with the full class name. </p> <p>Now we can start writing transactions. </p> <p>The Transaction (<strong>AbstractCDITransaction</strong>) is an Executor-Pattern.</p> <p><a href="http://lh6.ggpht.com/-qdFoduyDt0E/UeP4VeY1VOI/AAAAAAABSvA/q2Hsj9Z0Rkw/s1600-h/image%25255B26%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh4.ggpht.com/-wyJOQFyWvX4/UeP4V5E1H2I/AAAAAAABSvM/eQO5yuJdMEw/image_thumb%25255B14%25255D.png?imgmax=800" width="644" height="377"></a></p> <p>&nbsp;</p> <p>To Implement a transaction you have to implement an transaction – class with the method doIt().</p> <p>Here is an excample with references inside and ad the same time outside of the active transaction.</p> <p><a href="http://lh6.ggpht.com/-l69QbJiKoXU/UeP4WVnFc5I/AAAAAAABSvU/ueWyg9BvvOU/s1600-h/image%25255B30%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-tqIEH8iq9XI/UeP4Ww--MsI/AAAAAAABSvc/QK5bf-jKmJM/image_thumb%25255B16%25255D.png?imgmax=800" width="644" height="358"></a></p> <p>&nbsp;</p> <p>Inside the transaction are all instances with the Qualifier @<strong>CDITransactionScop</strong> .</p> <p>For this jUnitTest I implemented two Producers, one for the Instances inside the transaction and one for the outside one.</p> <p><a href="http://lh5.ggpht.com/-zUQhJDisv4Y/UeP4XQ1EfuI/AAAAAAABSvg/XzXjLsCJ1l4/s1600-h/image%25255B34%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh6.ggpht.com/-Zldm9h4o5E4/UeP4X_orOmI/AAAAAAABSvs/CsMKhkxeZqw/image_thumb%25255B18%25255D.png?imgmax=800" width="644" height="351"></a></p> <p>&nbsp;</p> <p>Finally the UML for this small demo.</p> <p>&nbsp;</p> <p><a href="http://lh5.ggpht.com/-pMH_HP0lwT0/UeP4YZGo_CI/AAAAAAABSv0/2GoNh3uvdNU/s1600-h/image%25255B38%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://lh5.ggpht.com/-RKdm-qREa4Y/UeP4Y7e2MCI/AAAAAAABSv8/r9TFk6fpDuA/image_thumb%25255B20%25255D.png?imgmax=800" width="883" height="772"></a></p>  