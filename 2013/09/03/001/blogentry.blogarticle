<div style="text-align: center;">
    <i><span style="font-size: x-small;">The full code and demo jUnit you will find under :&nbsp;<a href="https://bitbucket.org/rapidpm/modules/src/265b5f577e8f9b5a875408a9659d58a02f72b1af/javafx-chart-pie-drilldown?at=develop" target="_blank">BitBucket Repo - RapidPM - Modules - javafx-chart-pie-drilldown</a>&nbsp;</span></i></div>
<div style="text-align: center;">
    <i><span style="font-size: x-small;">Please use the develop branch and a commit after&nbsp;<a href="https://bitbucket.org/rapidpm/modules/commits/265b5f577e8f9b5a875408a9659d58a02f72b1af?at=develop">265b5f5</a>&nbsp;</span></i></div>
<br />
Sometimes you want to have a drill down pi chart for a tableview. This code often looks like the following <br />
(example from the oracle side)<br />
<a href="http://lh5.ggpht.com/-5KuGN_tnaic/UiYI9GTqX6I/AAAAAAABTXI/CKp7qJaPg8M/s1600-h/image%25255B3%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-ydmWK3GgtJk/UiYI9gFkecI/AAAAAAABTXM/tsHeNgJAvL0/image_thumb%25255B1%25255D.png?imgmax=800" height="484" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="530" /></a><br />
<br />
What you can see, is the direct way of putting the data together for each drilldown-level.<br />
But if you want to drill down more than one level.. the code will be long.<br />
For this example I am using the following demo data table.<br />
<br />
<a href="http://lh6.ggpht.com/-Dln9HPL38mw/UiYI-gzJA7I/AAAAAAABTXY/l7uE_hEpjOc/s1600-h/image%25255B8%25255D.png"><img alt="image" border="0" src="http://lh3.ggpht.com/-SnrHBEPMMHM/UiYI_MHshTI/AAAAAAABTXc/jFwz7iu2k_w/image_thumb%25255B4%25255D.png?imgmax=800" height="244" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="231" /></a><br />
What I want to reach is a short way for a developer to aggregate from one row to an other (in both directions)<br />
Here the pie–chart for this demo data and clicking the following steps:<br />
Rows: Vorname-&gt;Nachname-&gt;Datum-&gt;Betrag <br />
Data: Holger-&gt;Hoppel-&gt;2013.10.01-&gt;122.0 <br />
<a href="http://lh6.ggpht.com/-M8cJy_3fHmw/UiYI_txlqdI/AAAAAAABTXo/RRn5gXIi2LU/s1600-h/image%25255B11%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-CQyGxK2HMYI/UiYJAPlSEII/AAAAAAABTXs/ZZZHHNwgSFE/image_thumb%25255B5%25255D.png?imgmax=800" height="244" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="206" /></a><a href="http://lh4.ggpht.com/-2_gTKMNX8mE/UiYJApNHhRI/AAAAAAABTX4/WFwxYSfYKUY/s1600-h/image%25255B14%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-FKGgdz6m5Co/UiYJBcGFtsI/AAAAAAABTYA/3Kyxlx2ij9Q/image_thumb%25255B6%25255D.png?imgmax=800" height="244" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="191" /></a><a href="http://lh4.ggpht.com/-IUAsBkI3mcs/UiYJCFnpZSI/AAAAAAABTYI/ILGKNlZsSsU/s1600-h/image%25255B17%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-K3YgnWkqaZM/UiYJCmmseGI/AAAAAAABTYQ/hDD7FDcvN90/image_thumb%25255B7%25255D.png?imgmax=800" height="244" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="221" /></a><a href="http://lh5.ggpht.com/-uIxOkfx3ZxU/UiYJDFf2Z7I/AAAAAAABTYY/hNh3S0nL0yo/s1600-h/image%25255B21%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-YUPfZV8MP3U/UiYJD_HH73I/AAAAAAABTYg/ZtSsq2GJljo/image_thumb%25255B9%25255D.png?imgmax=800" height="244" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="244" /></a><br />
You can see, that for each level you will get the aggregated data from the table..&nbsp; But how to do it?<br />
The basic is the Aggregator-Class<br />
<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public abstract class MapAggregator<T, K> {

    private @Inject @CDILogger Logger logger;

    public abstract K getKeyElement(T t);

    public Map<K, List<T>> aggregate(final Collection<T> dataCollection) {
        final Map<K, List<T>> result = new HashMap<>();
        for (final T dataObject : dataCollection) {
            final K key = getKeyElement(dataObject);
            if (result.containsKey(key)) {
                if (logger.isDebugEnabled()) {
                    logger.debug("key schon vorhanden -> " + key);
                }
            } else {
                result.put(key, new ArrayList<T>());
            }
            result.get(key).add(dataObject);
        }
        return result;
    }
}
]]></script>
<br />
<span class="nt" style="background-color: ghostwhite; color: navy; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 14px; line-height: 19px; white-space: pre;"></span>

With this you can aggregate a collection to a map. The key is the aggregated value from the collection elements.<br />
For this example: A Collection of the TransientDemoDataRow (Collection<transientdemodatarow>) aggregated over the attribute vorname.</transientdemodatarow><br />

<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public class TransientDemoDataRow {


    private String vorname;
    private String nachname;
    private String datum;
    private Double betrag;

    @PostConstruct
    public void init() {

    }

    public String getVorname() {
        return vorname;
    }

    public void setVorname(String vorname) {
        this.vorname = vorname;
    }

    public String getNachname() {
        return nachname;
    }

    public void setNachname(String nachname) {
        this.nachname = nachname;
    }

    public String getDatum() {
        return datum;
    }

    public void setDatum(String datum) {
        this.datum = datum;
    }

    public Double getBetrag() {
        return betrag;
    }

    public void setBetrag(Double betrag) {
        this.betrag = betrag;
    }
}
]]></script>
With our demo data table you will get a map with two collections. <br />
a) Holger –&gt; List of 6 elements<br />
b) Willi –&gt; List of 4 elements<br />
This is the data for the first level of the DrillDownPieChart. (first pic of the pie charts see above)<br />
For our DrillDownPieChart we are using the following aggregator extending the MapAggregator<t>.</t><br />
<t></t><br />
<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public abstract class DrillDownPieChartMapAggregator<T> extends MapAggregator<T, String> {


    /**
     * Calculate the Value for the PiChart.Data based on the aggregated values
     *
     * @param aggregatedValues
     * @return
     */
    public abstract double aggregateValue(List<T> aggregatedValues);

    public abstract String getLevelName();

    private DrillDownPieChartMapAggregator<T> nextLevelAggregator;
    private DrillDownPieChartMapAggregator<T> parentLevelAggregator;

    public DrillDownPieChartMapAggregator<T> getNextLevelAggregator() {
        return nextLevelAggregator;
    }

    public DrillDownPieChartMapAggregator<T> getParentLevelAggregator() {
        return parentLevelAggregator;
    }

    public void setNextLevelAggregator(DrillDownPieChartMapAggregator<T> nextLevelAggregator) {
        this.nextLevelAggregator = nextLevelAggregator;
        this.nextLevelAggregator.parentLevelAggregator = this;
    }

    public boolean isLastOne() {
        if (nextLevelAggregator == null) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isFirstOne() {
        if (parentLevelAggregator == null) {
            return true;
        } else {
            return false;
        }
    }

}
]]></script>
<br />
We are holding the reference to the next level aggregator and the reference to the parent aggregator.<br />
To implement the aggregator for each col. we want to use for our DrillDownPieChart we have to write code like the following<br />
<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public static class BetragAggregator extends DrillDownPieChartMapAggregator<TransientDemoDataRow> {
        @Override public double aggregateValue(List<TransientDemoDataRow> aggregatedValues) {
            double betrag = 0;
            for (final TransientDemoDataRow aggregatedValue : aggregatedValues) {
                betrag = betrag + aggregatedValue.getBetrag();
            }
            return betrag;
        }

        @Override public String getLevelName() {
            return "Betrag";
        }

        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getBetrag() + " € Beträge";
        }
    }

    public static class DatumAggregator extends DrillDownPieChartMapAggregator<TransientDemoDataRow> {
        @Override public double aggregateValue(List<TransientDemoDataRow> aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return "Datum";
        }
        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getDatum();
        }
    }

    public static class VornameAggregator extends DrillDownPieChartMapAggregator<TransientDemoDataRow> {
        @Override public double aggregateValue(List<TransientDemoDataRow> aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return "Vorname";
        }

        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getVorname();
        }
    }


    public static class NachnameAggregator extends DrillDownPieChartMapAggregator<TransientDemoDataRow> {
        @Override public double aggregateValue(List<TransientDemoDataRow> aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return "Nachname";
        }
        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getNachname();
        }
    }

]]></script>
<br />
The method getLevelName is to label the PieChart for the user.<br />
The method getKeyElement is the value used for the aggregation.<br />
The method aggregateValue is to calculate the double, used by the pie chart as value.<br />
After this you have to put all together… the logic-part is done now..<br />
<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public class DrillDownPieChartPaneController implements CDIJavaFxBaseController {

    @FXML DemoDrillDownPieChart piechart;


    @Inject Instance<VornameAggregator> vornameAggregatorInstance;
    @Inject Instance<NachnameAggregator> nachnameAggregatorInstance;
    @Inject Instance<DatumAggregator> datumAggregatorInstance;
    @Inject Instance<BetragAggregator> betragAggregatorInstance;


    @Override public void initialize(URL url, ResourceBundle resourceBundle) {

        //setze Aggregatoren
        final VornameAggregator vornameAggregator = vornameAggregatorInstance.get();

        final NachnameAggregator nachnameAggregator = nachnameAggregatorInstance.get();
        vornameAggregator.setNextLevelAggregator(nachnameAggregator);

        final DatumAggregator datumAggregator = datumAggregatorInstance.get();
        nachnameAggregator.setNextLevelAggregator(datumAggregator);

        final BetragAggregator betragAggregator = betragAggregatorInstance.get();
        datumAggregator.setNextLevelAggregator(betragAggregator);

        piechart.setRootAggregator(vornameAggregator);

    }


    public void init() {
        piechart.init();
    }

]]></script>
The gui part looks like this: Extending the DrillDownPieChart with the type you need as data holder, here the TransientDemoDataRow.<br />
<script type="syntaxhighlighter" class="brush: java"><![CDATA[
public class TransientDemoDataRow {


    private String vorname;
    private String nachname;
    private String datum;
    private Double betrag;

    @PostConstruct
    public void init() {

    }

    public String getVorname() {
        return vorname;
    }

    public void setVorname(String vorname) {
        this.vorname = vorname;
    }

    public String getNachname() {
        return nachname;
    }

    public void setNachname(String nachname) {
        this.nachname = nachname;
    }

    public String getDatum() {
        return datum;
    }

    public void setDatum(String datum) {
        this.datum = datum;
    }

    public Double getBetrag() {
        return betrag;
    }

    public void setBetrag(Double betrag) {
        this.betrag = betrag;
    }
}
]]></script>
and putting it to a fxml file.<br />
<script type="syntaxhighlighter" class="brush: javafx"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<?import gui.org.rapidpm.modul.javafx.chart.pie.drilldown.DemoDrillDownPieChart?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<fx:root type="gui.org.rapidpm.modul.javafx.chart.pie.drilldown.DrillDownPieChartPane"
         fx:id="DrillDownPieChartPane" xmlns:fx="http://javafx.com/fxml" style="-fx-background-color:#EEEEEE">

    <children>
        <AnchorPane minHeight="0.0" minWidth="0.0" VBox.vgrow="ALWAYS"
                    AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
            <children>
                <Label text="hallo Hier bin ich"/>
                <DemoDrillDownPieChart fx:id="piechart">

                </DemoDrillDownPieChart>
            </children>
        </AnchorPane>
    </children>
</fx:root>
]]></script>
ready…&nbsp; <br />
<br />
The steps for a developer are:<br />
1) writing the transient data holder for an row –&gt; TransientDemoDataRow<br />
2) extending the DrillDownPieChart –&gt; DemoDrillDownPieChart extends<transientdemodatarow></transientdemodatarow><br />
3) extending the DrillDownPieChartMapAggregator –&gt; NachnameAggregator extends DrillDownPieChartMapAggregator<transientdemodatarow></transientdemodatarow><br />
4) putting all aggregator implementations together –&gt; Controller – Class<br />
5) add the element to the fxml file, <br />
6) init() and ready<br />
For a normal TableView with a handfull of rows you will need less than 30 min.<br />
<br />
The basic classes to use for an developer:<br />
<a href="http://lh3.ggpht.com/-SJ-pDNpLOMc/UiYJNA9ohpI/AAAAAAABTaY/ofUQV5uIuEk/s1600-h/image%25255B54%25255D.png"><img alt="image" border="0" src="http://lh4.ggpht.com/-WMXinq5fTd8/UiYJNoBLSEI/AAAAAAABTag/WlbvOUwDZsk/image_thumb%25255B26%25255D.png?imgmax=800" height="484" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="513" /></a><br />
<br />
All classes from the jUnit demo available at the javafx-chart-pie-drilldown module.<br />
<a href="http://lh6.ggpht.com/-lP1udVyDMVA/UiYJOSIqFfI/AAAAAAABTao/rEssoxks5Gs/s1600-h/image%25255B58%25255D.png"><img alt="image" border="0" src="http://lh3.ggpht.com/-LiWMRqCVT5A/UiYJPDrwyVI/AAAAAAABTaw/huD7OwGJooI/image_thumb%25255B28%25255D.png?imgmax=800" height="362" style="background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="644" /></a>
