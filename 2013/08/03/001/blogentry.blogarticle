The both technologies JavaFX and CDI are greate for itself.. but how to combine them? How I can get managed JavaFX - controller instances? <br />
Starting from the JavaFX – side, we have to implement the Class extending <strong>javafx.application.Application.</strong> The importand method will be <br />
<blockquote>
<em><code>public</code> <code>void</code> <code>start(Stage primaryStage) </code><code>throws</code> <code>Exception</code></em></blockquote>
<code><a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/main/java/org/rapidpm/demo/cdi/commons/fx/CDIJavaFXBaseApplication.java?at=develop" target="_blank">CDIJavaFXBaseApplication</a></code> <br />
<a href="http://lh3.ggpht.com/-spRH4z861ZQ/Uf12wRaYx5I/AAAAAAABTJI/dma-IzG6hho/s1600-h/image%25255B3%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-IKNxCJX9Ma8/Uf12wwRsReI/AAAAAAABTJQ/MQTcwt1GbIU/image_thumb%25255B1%25255D.png?imgmax=800" height="274" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /></a>  <br />
&nbsp; <br />
With <strong>CDIContainerSingleton.getInstance()</strong> you will get an instance of the Weld-Container. After the normal JavaFX – init&nbsp; there will be an event fired with the primaryStage as attribute. Now the primaryStage is available in an managed environment. <br />
JAvaFX –&gt; CDI <br />
<blockquote>
<em><code>cdi.event()</code><code>.select(Stage.</code><code>class</code><code>, </code><code>new</code> <code>AnnotationLiteral&lt;CDIStartupScene&gt;() {})</code></em><br />
<code><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fire(primaryStage);</em></code></blockquote>
The observer will catch this event. Hownthis will be donw, I show with the excample jUnit-test.<br />
(<a href="https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/test/java/org/rapidpm/demo/cdi/commons/fx/JavaFXBaseTest.java?at=develop" target="_blank">JavaFXBaseTest</a>)<br />
<a href="http://lh6.ggpht.com/-pe3l8kSIZrI/Uf12xUqXCaI/AAAAAAABTJY/4qNT0JYh-5o/s1600-h/image%25255B7%25255D.png"><img alt="image" border="0" src="http://lh6.ggpht.com/-mYyW73L1y7A/Uf12xkbSleI/AAAAAAABTJg/GrkqVjLTMhM/image_thumb%25255B3%25255D.png?imgmax=800" height="345" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /></a> <br />
The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&gt; testImpl(final Stage stage). The jUnit-Test will be a manged instance itself.<br />
<a href="http://lh3.ggpht.com/-rIZgDI2CmZc/Uf12yFhNcaI/AAAAAAABTJo/xmDBb7Nilas/s1600-h/image%25255B11%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-ANX-6HvYjEk/Uf12y-vIj3I/AAAAAAABTJw/sbkL-wTuD-A/image_thumb%25255B5%25255D.png?imgmax=800" height="484" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="636" /></a> <br />
But how to get the manged controller class instance?<br />
This is done by the <code><strong>FXMLLoaderSingleton used from the jUnit-test.</strong></code><br />
<blockquote>
<pre class="brush:java">
final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
</pre>
</blockquote>

<br />
During the process of loading the fxml-file the used FxmlLoader will get an instance of an ControllerFactory-Callback.<br />
<a href="http://lh6.ggpht.com/-81g1FPtpMV0/Uf12zchLfMI/AAAAAAABTJ4/UZ6beCx-JkE/s1600-h/image%25255B15%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-snchFSsAGE8/Uf12zxccG1I/AAAAAAABTKA/WmMrwTqTh50/image_thumb%25255B7%25255D.png?imgmax=800" height="379" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /></a> <br />
The importand lines are the following <br />
<a href="http://lh6.ggpht.com/-TW3PcealhwQ/Uf120NC8jFI/AAAAAAABTKI/8Tz8jER8lbU/s1600-h/image%25255B19%25255D.png"><img alt="image" border="0" src="http://lh5.ggpht.com/-2vpQxC1vfnI/Uf1207BA-xI/AAAAAAABTKQ/f8jnqwb7CC0/image_thumb%25255B9%25255D.png?imgmax=800" height="93" style="border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;" title="image" width="644" /></a> <br />
The ControllerFactory-&gt;Callback.call() will give back a manged instance of the controller class.<br />
Now you can use CDI inside the pojo-fx-controller class.<br />


<pre class="prettyprint">
public class LoginController implements CDIJavaFxBaseController {
    // Standard FXML injected fields
 @FXML TextField loginField;
 @FXML PasswordField passwordField;
 @FXML Text feedback;
 
 // CDI Injected field
 @Inject LoginService loginService;
 
    // Default application parameters
 @Inject @CDIJavaFXBaseApp
    Parameters applicationParameters;
 
 @FXML protected void handleSubmitButtonAction(ActionEvent event) {
  feedback.setText(loginService.login(loginField.getText(), passwordField.getText()));
 }

 @Override
 public void initialize(URL location, ResourceBundle resources) {
  loginField.setText(applicationParameters.getNamed().get("user"));
 }
}
</pre>



<br />
So we are done..&nbsp; Happy coding ;-)<br />
<br />
UML-Diagramm<br />
<img alt="" src="http://wiki.rapidpm.org/download/attachments/8093789/uml_fx_20130802_001.png?version=1&amp;modificationDate=1375433878726&amp;api=v2" height="479" width="640" /><br />
<br />
