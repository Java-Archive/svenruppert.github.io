<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>RapidPM</title>
    <category label="0.6.0"/>
    <category label="Maven"/>
    <category label="AngularJS"/>
    <category label="CDI"/>
    <category label="infrared"/>
    <category label="Security"/>
    <category label="remote"/>
    <category label="iot"/>
    <category label="java"/>
    <category label="Concurrency"/>
    <category label="TestFX"/>
    <category label="javafx"/>
    <category label="IntelliJ"/>
    <category label="JDK8"/>
    <category label="Baum"/>
    <category label="Reflection"/>
    <category label="javaee"/>
    <category label="Transactions"/>
    <category label="Mindstorms"/>
    <category label="M1ndsuite"/>
    <category label="JAXRS"/>
    <category label="ContextResolver"/>
    <category label="DefaultFieldFactory"/>
    <category label="EJB"/>
    <category label="JavaFX"/>
    <category label="components"/>
    <category label="Set"/>
    <category label="0.5.0"/>
    <category label="Core Java"/>
    <category label="vaadin"/>
    <category label="Quiz"/>
    <category label="Bug"/>
    <category label="java8"/>
    <category label="Jetbrains"/>
    <category label="theme"/>
    <category label="Java"/>
    <category label="Lego"/>
    <category label="CI"/>
    <category label="Tools"/>
    <category label="M2M"/>
    <category label="Kotlin"/>
    <category label="D3"/>
    <category label="Deadlock"/>
    <category label="TinkerForge"/>
    <category label="Java8"/>
    <category label="RapidPM"/>
    <category label="blub"/>
    <category label="HTML"/>
    <category label="JAAS"/>
    <category label="Arquillian"/>
    <category label="lejos"/>
    <category label="Test"/>
    <category label="Vaadin"/>
    <category label="JAXenter.de"/>
    <category label="Client"/>
    <category label="TableView"/>
    <category label="Validation"/>
    <category label="Hibernate"/>
    <category label="EV3"/>
    <category label="Raspberry PI"/>
    <category label="Color"/>
    <category label="Baumstruktur"/>
    <category label="Adam Bien afterburner.fx"/>
    <category label="JavaEE"/>
    <category label="forge"/>
    <category label="CDICommons"/>
    <category label="JPA"/>
    <category label="sensor"/>
    <category label="Wildfly"/>
    <category label="MVP"/>
    <category label="Mindsuite"/>
    <category label="motors"/>
    <category label="Weld"/>
    <category label="IoT"/>
    <category label="Photos"/>
    <category label="PropertyBinding"/>
    <category label="Proxy"/>
    <category label="IDEA"/>
    <category label="JUnit"/>
    <category label="TeamCity"/>
    <category label="JavaScript"/>
    <category label="dependency injection"/>
    <category label="tinkerforge"/>
    <category label="Streams"/>
    <category label="SPMT"/>
    <category label="JBoss"/>
    <category label="remote control"/>
    <category label="FilteredTableView"/>
    <category label="control"/>
    <category label="TableFieldFactory"/>
    <category label="JNDI"/>
    <category label="windows"/>
    <category label="jUnit"/>
    <category label="Integer"/>
    <category label="Tabelle"/>
    <category label="Callback"/>
    <category label="mapdb"/>
    <category label="WADL"/>
    <category label="relection"/>
    <updated>2015-01-10T01:39:11.480+01:00</updated>
    <id>http://rapidpm.github.io</id>
    <author>
        <name>Alexander Bischof</name>
    </author>
    <author>
        <name>Marco Ebbinghaus</name>
    </author>
    <author>
        <name>Sven Ruppert</name>
    </author>
    <author>
        <name>Oliver Milke</name>
    </author>
    <entry>
        <title>Upgrade Debian 6.0 Squeeze to 7.0 Wheeze</title>
        <published>2013-05-15T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/15/upgrade-debian-6.0-squeeze-to-7.0-whee.html&quot; rel=&quot;tag&quot;&gt;Upgrade Debian 6.0 Squeeze to 7.0 Wheeze&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-15&quot;&gt;2013-05-15&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;a href=&quot;http://www.garron.me/en/linux/upgrade-debian-squeeze-wheeze-6.0-7.0.html&quot;&gt;Upgrade Debian 6.0 Squeeze to 7.0 Wheeze&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://chrome.google.com/webstore/detail/pengoopmcjnbflcjbmoeodbmoflcgjlk&quot; style=&quot;font-size: 13px;&quot;&gt;'via Blog this'&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IntelliJ - kleine Dinge aus dem Entwickleralltag..</title>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Tools"/>
        <published>2013-05-22T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/22/intellij-kleine-dinge-aus-dem-entwickl.html&quot; rel=&quot;tag&quot;&gt;IntelliJ - kleine Dinge aus dem Entwickleralltag..&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-22&quot;&gt;2013-05-22&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;Bei der Verwendung von IntelliJ heute ist mir ein kleines Symbol am Rand aufgefallen. Bei näherer Betrachtung ist mir aufgefallen…&amp;nbsp; es zeigt mir an dass es hier eine Rekursion gibt.. Nettes Icon..&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh4.ggpht.com/-kpNzrYtCKgg/UZ0oJAXuNII/AAAAAAABQ1c/dHaHcsyRM40/s1600-h/image%25255B5%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; float: none; margin-left: auto; display: block; border-top-width: 0px; margin-right: auto&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh3.ggpht.com/-_nMBkpHGIhk/UZ0oKEKBFoI/AAAAAAABQ1k/D_ocl9SAPGw/image_thumb%25255B3%25255D.png?imgmax=800&quot; width=&quot;496&quot; height=&quot;281&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-22&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>SPMT - Small Photo Management Tool</title>
        <category label="Java"/>
        <category label="Photos"/>
        <category label="SPMT"/>
        <published>2013-05-23T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/23/spmt-small-photo-management-tool.html&quot; rel=&quot;tag&quot;&gt;SPMT - Small Photo Management Tool&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-23&quot;&gt;2013-05-23&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Ich muss gestehen, dass ich gerne fotographiere. An sich ist das nichts schlimmes, nur die Ordnung zu behalten ist da doch ein wenig zeitaudfwendiger. &lt;br /&gt;
Aber für routine – Arbeiten gibt es ja zum Glück einen PC. Ich für meinen Teil habe das Problem zu lösen, das die Ordnerstruktur derzeitig sehr flach ist. Es gibt ein Verzeichnis in dem Pro Tag ein Verzeichnis existiert. Die Namenskonvention lautet hier yyyy-mm-dd_Thema_des_Tages.&lt;br /&gt;
Als Beispiel z.B. 2010.10.10_Geburtstag_XYZ&lt;br /&gt;
Das hat sich eigentlich bewährt, wenn man keine weiteren Ansprüche stellt. Nur was soll man machen wenn Bekannte auf einen zukommen die eine große Festplatte unter dem Armt tragen und um Hilfe bitten hier mal mit Werkzeugen die Bilder aufzuräumen.&lt;br /&gt;
Lange Rede kurzer Sinn, es schreit nach einen kleinen Werkzeug in der Programmiersprache meiner Wahl. Java&lt;br /&gt;
In einer kleinen Serie werde ich die Entwicklung der einzelnen Komponenten beschreiben.&lt;br /&gt;
Die Sourcen sind übrigens unter &lt;a href=&quot;https://bitbucket.org/svenruppert/spmt-smallphotomanagementtool&quot; target=&quot;_blank&quot;&gt;https://bitbucket.org/svenruppert/spmt-smallphotomanagementtool&lt;/a&gt; zu finden.&lt;br /&gt;
Hier nochmals der Hinweis: Es handelt sich um experimentelle Software die keinen Anspruch auf Fehlerfreiheit hat. Es kann gerne ausprobiert werden, aber bitte nur auf Kopien arbeiten. Die Software ist nicht “fertig” sondern befindet sich aus aktuellem Anlass mitten in der Entwicklung. (Stand 20130523)&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-23&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>SPMT - Der Collector - Aufbau</title>
        <published>2013-05-24T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/24/spmt-der-collector-aufbau.html&quot; rel=&quot;tag&quot;&gt;SPMT - Der Collector - Aufbau&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-24&quot;&gt;2013-05-24&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;In diesem Abschnitt möchte ich den Teil beschreiben, der die Informationen aus den jeweiligen Verzeichnissen holen wird.&lt;/p&gt; &lt;p&gt;Im Prinziep handelt es sich um einen minmalen Crawler. Beginnend mit einer Liste von Verzeichnissen, wird rekursiv abgestiegen und die Information aus den jeweiligen Dateien extrahiert. Da es sich um Photos handelt, sind natürlich die EXIF Informationen von Interesse.&lt;/p&gt; &lt;p&gt;Hier verwende ich die LIB:&amp;nbsp; &lt;a href=&quot;http://drewnoakes.com/code/exif/&quot; target=&quot;_blank&quot;&gt;com.drewnoakes metadata-extractor 2.6.2&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;/version&gt;Der Crawler besteht aus den Hauptkomponenten&lt;/p&gt; &lt;p&gt;- Node: Hier werden die Informationen gespeichert, jeweils ein Node pro Verzeichnisknoten. File/Dir&lt;/p&gt; &lt;p&gt;- Crawler: In diesem Beispiel ein Filesystemcrawler, könnte erweitert werden um andere Quellen-Crawler&lt;/p&gt; &lt;p&gt;- FileExtractor: Zum extrahieren der jeweiligen Information jeweils ein spezieller Extractor.&lt;/p&gt; &lt;p&gt;Dieses wird noch erweitert um Actions, die dann nach einem Extratordurchlauf pro Node gestartet werden kann.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Funktion:&lt;/p&gt; &lt;p&gt;Der Crawler bekommt einen Startpunkt und beginnt dort mit dem rekursiven Abstieg. Auf jeden Knoten werden die eine Liste Extraktoren angewendet. Die Informationen in die Attributliste des Node gespeichert. Ein NoteAttribute ist eine einfache Key/Value Kombination.&lt;/p&gt; &lt;p&gt;UML-Bild: (im Repository unter data/uml zu finden)&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh3.ggpht.com/-gLUI8ilM8XE/UZ_Di5F8TPI/AAAAAAABQ10/ZdzmwDPq4iE/s1600-h/image%25255B5%25255D.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh5.ggpht.com/-hTqkoMiYGUY/UZ_Dj0K-gYI/AAAAAAABQ18/g_dfNwhbN8s/image_thumb%25255B3%25255D.png?imgmax=800&quot; width=&quot;658&quot; height=&quot;460&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;brush: Xml&quot;&gt;         &lt;/dependency&gt;&lt;br /&gt;&lt;/pre&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-24&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>SPMT - Collector - erste Tests</title>
        <published>2013-05-26T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/26/spmt-collector-erste-tests.html&quot; rel=&quot;tag&quot;&gt;SPMT - Collector - erste Tests&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-26&quot;&gt;2013-05-26&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;Ich habe nun ein paar Tests mir einem realen Datenbestand gemacht. Es handelt sich hierbei um sage und schreibe 2 TB unsortierter privater Photos.&lt;/p&gt; &lt;p&gt;Um in diesem Datenbestand noch Ordnung hineinzubekommen bedarf es normalerweise wochenlanger Arbeit. Ich zumindest habe diese Zeit nicht ;-)&lt;/p&gt; &lt;p&gt;Es ergeben sich verschiedene Grundgedanken: &lt;/p&gt; &lt;p&gt;- Wie werden Duplikate gefunden und wie geht man damit automatisch um?&lt;/p&gt; &lt;p&gt;- Ab wann werden manuelle Eingriffe notwendig?&lt;/p&gt; &lt;p&gt;- Besonderheit 3D: Es werden teilweise 3D Aufnahmen gemacht die aus zwei einzelnen Bildern bestehen. Diese werden mit zwei verschiedenen Geräten aufgenommen. Das Problem hier ist, dass weder die Bildnummer noch die Zeit der beiden Geräte synchronisiert gewesen sind. Andere Bilder sind schon im mpo – Format abgelegt. Hier sind beide Bilder in einer Datei zusammen gespeichert.&lt;/p&gt; &lt;p&gt;Annahme: Die Exif-Informationen in den Bildern sind meistens verlässlich. Im Zweifellsfall wird sich immer für die Orginaldatei entschieden, nachbearbeitete Bilder dürfen verloren gehen. (Dieses beruht auf der Tatsache, das der Photograf mir versicherte, dass die wenigsten Bilder nachbearbeitet worden sind.)&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Hier nun zum Vorgehen bei den ersten Tests:&lt;/p&gt; &lt;p&gt;Es wurden die Dateien aus allen Ordnern in eine Zielstruktur verschoben. Level I Jahresordner, Level II Monatsordner, Level III Tagesordner.&lt;/p&gt; &lt;p&gt;Wenn eine Datei mit dem selben Namen schon vorhanden war, wurde geprüft ob der MD5-Wert gleich ist. Wenn ja, wurde die Datei in eine gleich aufgebaute Ordnerstruktur verschoben die im Hauptverzeichnis duplicate aufgebaut worden ist. War der MD5 – Wert nicht gleich, wird die Datei um eine vortlaufende Nummer im Namen erweitert und im selben Verzeichnis gespeichert. Alleine mit diesem Vorgehen wurden schon sehr viele Duplikate entfernt. Als Referenz diehnt das Aufnahmedatum in den Exif-Informationen. &lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-26&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JavaEE - Arquillian - first version to play</title>
        <category label="Arquillian"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JBoss"/>
        <category label="jUnit"/>
        <published>2013-05-29T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/05/29/javaee-arquillian-first-version-to-pla.html&quot; rel=&quot;tag&quot;&gt;JavaEE - Arquillian - first version to play&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-05-29&quot;&gt;2013-05-29&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Heute geht es um Arquillian und wie man ein Basisgerüst für die eigene Entwicklung aufbauen kann. Das Hier vorgestellte Projekt kann als Vorlage für eigene verwendet werden und ist die Vorbereitung für den eigenen Einsatz in einem neuen Projekt. Also kann ich es hier auch gleich ein wenig dokumentieren &amp;nbsp;;-)&lt;br /&gt;
Hier in dem Projekt wird JDK 8 verwendet, die Konfiguration selbst ist aber bis auf die Compiler-Anweisung neutral.&lt;br /&gt;
kurz: Was ist Arquillian?&lt;br /&gt;
Arquillian ist ein Framework um Tests in den JEE-Containern selbst laufen zu lassen. Soll bedeuten: Es hilft dabei die jUnit-Tests in embedded oder lokal oder remote ApplikationsServern auszuführen.&lt;br /&gt;
&lt;a href=&quot;http://arquillian.org/&quot; target=&quot;_blank&quot;&gt;Arquillian Homepage&lt;/a&gt; –&amp;gt; Unter &lt;a href=&quot;https://bitbucket.org/svenruppert/javaee-arquillian&quot; target=&quot;_blank&quot;&gt;Bitbucket - JavaEE – Arquillian&lt;/a&gt; sind alle Sourcen in einem Git-Repository.&lt;br /&gt;
&lt;br /&gt;
Zu Beginn werden die Grundlagen in der pom.xml definiert. Wichtig hierbei ist, dass nur die generischen Teile global definiert werden, die containerabhängigen Dinge in den Profilen. Damit wird erreicht, das durch die Auswahl des Profils der Laufzeitcontainer gewechselt/definiert wird. In der Pom habe ich die Konfiguration für GlassFish, Jboss und einen einfachen Weld-Container hinterlegt.&lt;br /&gt;
Interessant ist der Abschnitt im Profil &lt;strong&gt;arquillian-jbossas-managed&lt;/strong&gt;. Unter &lt;strong&gt;build-&amp;gt;testRessourcen&lt;/strong&gt; ist ein Beispiel zu sehen wie man für den jeweiligen Container eigene Ressourcen definiert.&lt;br /&gt;
&lt;br /&gt;
Die nächste Konfigurationsstelle ist die Datei&amp;nbsp; test/ressourcen/arquillian.xml. Hier können die Container selbst mit Konfigurationen belegt werden. In diesem Beispiel habe ich für den jbossas-managed gezeigt, wie man auf eine eigene Version eines JBoss zugreifen kann. Das ist notwendig, wenn man in den Embedded-Tests z.B. Oracle Treiber für DataSourcen benötigt. Es werden also alle Konfigurationen verwendet, die man evtl schon vorgenommen hat.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-88ntwCjrxVs/UaYkpOkzu3I/AAAAAAABQ2U/MRKWHjikjAA/s1600-h/image%25255B5%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-x0-zBfvvHvc/UaYkpyqTrQI/AAAAAAABQ2c/KyaLL5jY_Y0/image_thumb%25255B3%25255D.png?imgmax=800&quot; height=&quot;388&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;865&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Remote Test auf einem JBoss.&lt;br /&gt;
Um einen Test in einem Remote JBoss auszuführen, muss der Jboss zuerst gestartet werden. Wenn dieser hochgefahren ist, kann der Test via maven ausgeführt werden. In diesem Beispiel gehe ich davon aus, das der jboss auf localhost läuft.&lt;br /&gt;
In der Datei arquillian.xml unter &lt;strong&gt;jbossas-remot&lt;/strong&gt; ist der Port für den Debugger zu setzen. in meinem Fall 52197 was der Defaulteinstellung unter IntelliJ entspricht.&lt;br /&gt;
&lt;br /&gt;
Mit den Einstellungen kann schon begonnen werden. clean, compile, test. ;-)&lt;br /&gt;
Demnächst dann mehr mit praktischen Dingen…&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-05-29&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI SE - registry for managed services</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Weld"/>
        <published>2013-06-05T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/06/05/cdi-se-registry-for-managed-services.html&quot; rel=&quot;tag&quot;&gt;CDI SE - registry for managed services&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-06-05&quot;&gt;2013-06-05&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Auf der Serverseite erfreut man sich der Möglichkeit per CDI die Komponenten zu entkoppeln.&lt;br /&gt;
Das ist ja bekanntlich auch auf der SE Seite möglich. Typische Konstrukte sehen dann meist wie folgt aus.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-UqsRXFExNrA/Ua9UBS_9lRI/AAAAAAABRQw/iyEgUMP_E6k/s1600-h/image%25255B3%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-LlzDJNotMos/Ua9UC22bBJI/AAAAAAABRQ4/WFgL1372y8Y/image_thumb%25255B1%25255D.png?imgmax=800&quot; height=&quot;318&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
1) Initialisiere den Weldcontainer&lt;br /&gt;
2) Hole eine erste managed instance&lt;br /&gt;
3) Arbeite auf den Referenzen.&lt;br /&gt;
&lt;br /&gt;
Was hier nicht schön ist, ist die Referenz auf den initialen Weldcontainer. Die muss an den verschiedenen Stellen in der Applikation zur Verfügung gestellt werden. &lt;br /&gt;
Anbei eine Demo wie dieses für eine Registry von Services aussehen kann.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-xajclkO7v2M/Ua9UD7TptnI/AAAAAAABRRA/M02W-fJc25w/s1600-h/image%25255B8%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-QKW5C-zIIDA/Ua9UEvL6SGI/AAAAAAABRRI/HN8gBwO0tpI/image_thumb%25255B4%25255D.png?imgmax=800&quot; height=&quot;680&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;1028&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Es gibt eine ServieRegistry von der aus man die vom Weldcontainer verwalteten Servicees bekommen kann. Der Einfachheit halber als Liste von Services.&lt;br /&gt;
Die Services selber sind abgeleitet von dem Interface Service. Soweit alles wie bekannt. Jeder Service erhält die Annotation RegisteredService.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-6YBaHFh9S5o/Ua9UFj7OpII/AAAAAAABRRQ/csbDPonZH7Y/s1600-h/image%25255B13%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-0ts4zSSrgMs/Ua9UGxCe7bI/AAAAAAABRRY/lcBKb-asDlA/image_thumb%25255B7%25255D.png?imgmax=800&quot; height=&quot;90&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Über diese Annotation kann die ServiceRegistry die Services selbständig identifizieren. Dass ist hier durch ein Classloading realisiert.&lt;br /&gt;
Dieser Prozess wird initial durch die Annotation &lt;strong&gt;@PostContruct&lt;/strong&gt; getriggert.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/--fJHJNvo2r4/Ua9UHlWWW-I/AAAAAAABRRg/5ufbCc1Gt-Q/s1600-h/image%25255B17%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-Gt4Z4Btvq_A/Ua9UIbC7cWI/AAAAAAABRRo/-y2IwUYM7mQ/image_thumb%25255B9%25255D.png?imgmax=800&quot; height=&quot;250&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Das Laden der Klassen ist per Reflection gelöst, kann natürlich auch beliebig anders erfolgen.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-ZYvlsi18R8A/Ua9UJqSwpdI/AAAAAAABRRw/5QKd5F-qaP0/s1600-h/image%25255B21%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-3KewEAMoE1Y/Ua9UKfkCM8I/AAAAAAABRR4/GduWywSO3U4/image_thumb%25255B11%25255D.png?imgmax=800&quot; height=&quot;353&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Die Klassen werden in einer internen ArrayList gespeichert und erst instanziiert , wenn die Services benötigt werden.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/--phoyYXS6ao/Ua9ULtQ4ngI/AAAAAAABRSA/Zs4jo_1qrXk/s1600-h/image%25255B26%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-TlKkpEaI6_Y/Ua9UMsWHUtI/AAAAAAABRSI/l2V828SCjkw/image_thumb%25255B14%25255D.png?imgmax=800&quot; height=&quot;260&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Wie man unschwer erkennen kann, ist die Serviceregistry selbst schon eine vom WeldContainer verwaltete Instanz. (Siehe Annotationen)&lt;br /&gt;
Der WeldContainer selbst wird in der ServiceRegistryFactory initialisiert und gehalten.&lt;br /&gt;
&amp;nbsp;&lt;a href=&quot;http://lh3.ggpht.com/-AK50itpGCqs/Ua9UNi-ROnI/AAAAAAABRSQ/WRqHiiSNW4c/s1600-h/image%25255B31%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-49alkMroUso/Ua9UOoH8EHI/AAAAAAABRSY/uyd0NQm00QE/image_thumb%25255B17%25255D.png?imgmax=800&quot; height=&quot;170&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Damit hat man über diesen Umweg, die Möglichkeit eine vom WeldContainer verwaltete Serviceregistry zu erhalten.&lt;br /&gt;
Die Services selbst werden bei Bedarf erzeugt. Das passiert in der Methode getManagedService&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-iofiNRmE5X8/Ua9UPI_au8I/AAAAAAABRSg/QEnYpB05Mf0/s1600-h/image%25255B35%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-xJTM6imn2TI/Ua9UQX4e5ZI/AAAAAAABRSo/O8u4tW6REw8/image_thumb%25255B19%25255D.png?imgmax=800&quot; height=&quot;173&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Zu beachten ist, das man die Services über einen Producer erzeugen muss, damit die Services selber wieder vom WeldContainer verwaltet werden.&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-sl5LN3RI0Ng/Ua9URqyTuBI/AAAAAAABRSs/1M39gu3TElA/s1600-h/image%25255B39%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-BFkLWMl9k-w/Ua9US-gj32I/AAAAAAABRS4/qJy6vA4XFro/image_thumb%25255B21%25255D.png?imgmax=800&quot; height=&quot;387&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Die Verwendung selbst ist dann sehr einfach…&amp;nbsp; &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-yFN28PwWUUE/Ua9UT1WkwfI/AAAAAAABRTA/FxH910t3clA/s1600-h/image%25255B43%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-0ZaVy4gzTJw/Ua9UVCBciVI/AAAAAAABRTI/cim0K9lhJNo/image_thumb%25255B23%25255D.png?imgmax=800&quot; height=&quot;270&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Die Sourcen zu diesem Beispiel befinden sich im Repository: &lt;a href=&quot;https://bitbucket.org/rapidpm/java-cdi-se-demo&quot; target=&quot;_blank&quot;&gt;https://bitbucket.org/rapidpm/java-cdi-se-demo&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-06-05&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Loeschen von JPA-Entitaeten (Blaettern) in Baumstrukturen (und kleine, fiese Hibernate-Bugs...)</title>
        <category label="Baum"/>
        <category label="Baumstruktur"/>
        <category label="Bug"/>
        <category label="Hibernate"/>
        <category label="JPA"/>
        <category label="Set"/>
        <published>2013-06-07T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/06/07/loeschen-von-jpa-entitaeten-(blaettern.html&quot; rel=&quot;tag&quot;&gt;Loeschen von JPA-Entitaeten (Blaettern) in Baumstrukturen (und kleine, fiese Hibernate-Bugs...)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-06-07&quot;&gt;2013-06-07&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;br /&gt;
&lt;br /&gt;
Ich weiß nicht ob es nur mir so geht, aber im Umgang mit JPA/Hibernate tat ich mich anfangs recht schwer. Das fing schon bei trivialen Sachen (sollte man meinen) wie dem Löschen von Entitäten an.. Wenn dann noch Baumstrukturen hinzukommen, tappt man schnell in die ein oder andere Falle. Hier mal ein Beispiel einer Umsetzung einer Entitäts-Baumstruktur (inkl. dem Löschen von Blättern im Baum).&lt;br /&gt;
&lt;br /&gt;
Ich habe heute eine Entität &quot;SearchPattern&quot; erweitert. Zuvor stand diese für sich alleine, hatte also keine Verbindungen zu anderen Tabellen / Entitäten.&lt;br /&gt;
Hier stellte das Löschen natürlich noch kein Problem dar:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;entityManager.remove(toDeleteSearchPattern);&lt;br /&gt;
entityManager.flush();&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
bumms..fertig.&lt;br /&gt;
&lt;br /&gt;
Nun habe ich die Entität dahingehend erweitert, dass sie eine Baumstruktur darstellt.&lt;br /&gt;
Sprich: Ein SearchPattern kann ein Parent-SearchPattern und eine Liste von Kind-SearchPattern haben. Dies realisierte ich grob skizziert folgendermaßen:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;@Entity&lt;br /&gt;
public class SearchPattern{&lt;br /&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
@OneToOne&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private SearchPattern parent;&lt;br /&gt;
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
@OneToMany&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private List&amp;lt;SearchPattern&amp;gt; children;&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Lassen wir den Fall, dass ein Parent-SearchPattern (also eine Entität die Kinder hat) gelöscht werden soll , mal außen vor und betrachten den Fall, dass eine &quot;Blatt&quot;-Entität gelöscht werden soll. Also ein SearchPattern, dass keine Kinder aber einen Vater hat. In diesem Fall muss der Löschvorgang innerhalb einer Transaktion nun grob so aussehen:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;parentSearchPattern.getChildren().remove(toDeleteSearchPattern);&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;entityManager.remove(toDeleteSearchPattern);&lt;br /&gt;
entityManager.flush();&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Es wird also zunächst das zu löschende SearchPattern aus der Kindliste des Vaters entfernt. Anschließend kann dann das eigentliche SearchPattern entfernt werden, da dieses nun nicht mehr in anderen Entitäten referenziert wird. Anschließend können die Änderungen geflusht werden. &lt;br /&gt;
&lt;br /&gt;
Übrigens: Wer in Hibernate-Entitäten mit Collections arbeitet, sollte zumindest meiner Einschätzung nach wenn möglich auf Listen (statt Sets) setzen. Zunächst hatte ich für die Kinder ein Set benutzt. Ich habe es jedoch nicht hinbekommen, das zu löschende SearchPattern aus der Kindliste des Vaters zu entfernen. Ich dachte zunächst ich hätte einfach Tomaten auf den Augen, aber nein..alles schien okay zu sein. Es wollte mir einfach nicht in den Kopf warum ich das gewünschte SearchPattern nicht aus dem Set removen konnte. Die equals- und hashcode-Methoden der Entität waren korrekt und die SearchPattern-Instanz die ich der .remove-Methode übergeben habe war definitiv in dem Set enthalten. Woran lags? Nun, offensichtlich hat Hibernate einen Bug (und das scheinar schon recht lange! &lt;a href=&quot;http://yigitdarcin.com/2010/01/08/hibernate-persistentset-remove-not-working/&quot;&gt;http://yigitdarcin.com/2010/01/08/hibernate-persistentset-remove-not-working/&lt;/a&gt; leider funktioniert der dort verlinkte Link zum entsprechenden Bugtracking-System bei mir zur Zeit nicht) , der es manchmal unmöglich macht etwas aus dem Set einer Entität zu löschen. Nachdem ich das Set in eine List umwandelte, funktionierte das Entfernen einwandfrei. &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-06-07&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Param per Annotation</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Weld"/>
        <published>2013-06-11T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/06/11/cdi-commons-param-per-annotation.html&quot; rel=&quot;tag&quot;&gt;CDI Commons - Param per Annotation&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-06-11&quot;&gt;2013-06-11&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Heute geht es um die Möglichkeit in einer CDI Umgebung per Annotationen Parameter zu übergeben.&lt;br /&gt;
Als Beispiel nehme ich den SimpleDateFormatter. Typischerweise wird ein SimpleDateFormatter in der folgenden Form initialisiert. &lt;br /&gt;
&lt;strong&gt;final SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy:MM:dd hh:mm:ss&quot;);&lt;/strong&gt;&lt;br /&gt;
Die erste &lt;em&gt;Verbesserung&lt;/em&gt; hier ist die Verwendung einer zentralen Registry für die Definition der Pattern. (&quot;&lt;strong&gt;yyyy:MM:dd hh:mm:ss&lt;/strong&gt;&quot;); Der Ausdruck selbst ist aber nicht kürzer und auch immer noch hart an die Registry gekoppelt. Der erste Ansatz per CDI ist dann ähnlich wie die Definition der Logger.&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-r2zeedyN1k0/UbebNjwRjSI/AAAAAAABRYw/0yy6OCwmLdM/s1600-h/image%25255B13%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-191qcxRsfRE/UbebObONx8I/AAAAAAABRY4/fI3ld349a2I/image_thumb%25255B7%25255D.png?imgmax=800&quot; height=&quot;61&quot; style=&quot;border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;244&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Die Annotation &lt;strong&gt;@CDICommons&lt;/strong&gt; ist hier zur Abgrenzung zu den evtl. im ClassPath vorhandenen Implementierungen und Konstruktoren. Es empfhielt sich eine solche Annotation pro Modul zu verwenden. So können Mehrdeutigkeiten einfach gelöst werden. Die Annotation selbst ist schlicht aufgebaut.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-_4c_3vdowzc/UbebPtUSsLI/AAAAAAABRZA/K3IcusbLjxM/s1600-h/image%25255B11%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-vT6jJzVdhVU/UbebQRmOKbI/AAAAAAABRZI/GgX-sHW6XYY/image_thumb%25255B5%25255D.png?imgmax=800&quot; height=&quot;85&quot; style=&quot;border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Da die die Implementation SimpleDateFormat keinen Default-Konstruktor hat, ist es notwendig eine Erzeuger-Methode zu implementieren. Die Annotation &lt;strong&gt;@Produces&lt;/strong&gt; ist hier das einzig auffällige.&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-tQJT9DRzTDw/UbebRSFEvJI/AAAAAAABRZQ/nhRNMXSn_wQ/s1600-h/image%25255B17%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-TAPFVctYRAI/UbebSXXU9sI/AAAAAAABRZU/jyz_h2N_nJo/image_thumb%25255B11%25255D.png?imgmax=800&quot; height=&quot;88&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;394&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Zu erkennen ist auch hier die Verwendung der konstanten Definition &lt;strong&gt;PATTERN&lt;/strong&gt;. Zumindest im Quelltext ist nur noch an einer Stelle ein Verweis auf das Pattern selbst. Was aber, wenn man diese nun dynamisch zu Laufzeit ermitteln und verwenden möchte? Den Zugriff auf die jeweiligen Registries sollen nicht im gesamten Quelltext zu sehen sein.&lt;br /&gt;
Hier kann man den Weg über eine weitere Annotation gehen. Nennen wir sie &lt;strong&gt;@CDIRegEx&lt;/strong&gt;.&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-3PGIbElqIQw/UbebTc0EitI/AAAAAAABRZg/G1nELAuGKN4/s1600-h/image%25255B24%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-RRzfUCYApfY/UbebUOCzTYI/AAAAAAABRZo/QS0gQbdwqJc/image_thumb%25255B16%25255D.png?imgmax=800&quot; height=&quot;120&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Die Implementierung ist um die Definition eines Values angereichert worden. Das wichtige allerdings ist die darin verwendete Annotation &lt;strong&gt;@Nonbinding&lt;/strong&gt;. Damit erst wird es möglich dieses Attribut zu verwenden, ohne das der CDI-Container versucht dieses Attribut für die Auflösung selbst zu verwenden. Wird diese Annotation nicht eingesetzt, kann der CDI-Container nicht mehr die vermeintliche Erzeuger-Methode finden. &lt;br /&gt;
&amp;nbsp;&lt;a href=&quot;http://lh6.ggpht.com/-qjNvmocLpxA/UbebVIoWCTI/AAAAAAABRZw/zDOXEq9NzmM/s1600-h/image%25255B28%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-QHtUqUnRmm8/UbebVyAf9_I/AAAAAAABRZ4/Thcsxm2Awk4/image_thumb%25255B18%25255D.png?imgmax=800&quot; height=&quot;177&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Die Erzeuger-Methode wird um die Annotation &lt;strong&gt;@CDIRegex&lt;/strong&gt; in der Signatur erweitert. Innerhalb der Methode wird die Annotation selbst als Auslöser für die Initialisierung verwendet. In diesem Fall nur , indem das Pattern aus dem Attribut verwendet wird. An dieer Stelle kann dann allerdings der Zugriff auf die Registry erfolgen, damit zur Laufzeit dynamisch entschieden werden, welches Pattern zu Einsatz kommen soll.&lt;br /&gt;
Im Quelltext sind nun folgende Definitionen gültig, wobei die erste für eine Defaultinitialisierung verwendet wird.&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-lbPoQul_Plw/UbebXKG5TCI/AAAAAAABRZ8/mQ-5KXpD0Ag/s1600-h/image%25255B33%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-eHEcKPI7bDI/UbebX8px8kI/AAAAAAABRaI/ecUL8zwrYzI/image_thumb%25255B21%25255D.png?imgmax=800&quot; height=&quot;119&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;244&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
&lt;br /&gt;
Die Annotation CDIRegex kann auch in die Annotation CDICommons eingebettet werden. Das allerdings ist dann eher Geschmackssache, da der Code nicht reduziert wird.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-0nGX8_E14Yc/UbebY5yxroI/AAAAAAABRaQ/yDAeep8rMuc/s1600-h/image%25255B37%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-Hvg0or1Z6u4/UbebZ0-yhXI/AAAAAAABRaY/YzuhvORMx-E/image_thumb%25255B23%25255D.png?imgmax=800&quot; height=&quot;88&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-NnyDMiUODSk/UbebbQhelTI/AAAAAAABRac/EPqB22vbuGE/s1600-h/image%25255B42%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-yx7CKFDVpfg/UbebcEGYy8I/AAAAAAABRao/r9pNUYullzg/image_thumb%25255B26%25255D.png?imgmax=800&quot; height=&quot;60&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;394&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Interessant ist allerdings, das nun alle drei vorgestellten Variablen-Definitionen gültig sind.&lt;br /&gt;
Das Beispiel ist wie üblich im Repository zu finden: &lt;a href=&quot;https://bitbucket.org/svenruppert/cdi-commons&quot; target=&quot;_blank&quot;&gt;Bitbucket - CDI-Commons&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-06-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JetBrains TeamCity Blog TeamCity 8 - Welcome to The Light Side of Continuous Integration</title>
        <published>2013-06-20T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/06/20/jetbrains-teamcity-blog-teamcity-8-wel.html&quot; rel=&quot;tag&quot;&gt;JetBrains TeamCity Blog TeamCity 8 - Welcome to The Light Side of Continuous Integration&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-06-20&quot;&gt;2013-06-20&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;a href=&quot;http://blogs.jetbrains.com/teamcity/2013/06/20/teamcity-8-%e2%80%94-welcome-to-the-light-side-of-continuous-integration/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+teamcity+%28JetBrains+TeamCity+Blog%29&quot;&gt;JetBrains TeamCity Blog » » TeamCity 8 — Welcome to The Light Side of Continuous Integration&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-06-20&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-06-26T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/06/26/cdi-commons-dynamic-service-resolver.html&quot; rel=&quot;tag&quot;&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-06-26&quot;&gt;2013-06-26&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;In meinem Blog über CDi und i18n (&lt;a href=&quot;http://www.rapidpm.org/2013/06/cdi-commons-i18n.html&quot; target=&quot;_blank&quot;&gt;Artikel&lt;/a&gt;) hatte ich einen PropertyRegistryService vorgestellt.&lt;/p&gt; &lt;p&gt;Als Beispiel wurde der Producer für die Instanz eines SimpleDateFormat gezeigt. &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh3.ggpht.com/-uHPakGHkaOQ/UcrzhykV6lI/AAAAAAABSKM/U5BFjin6KH4/s1600-h/image%25255B3%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh4.ggpht.com/-nl3-2Ew87K8/UcrzihB3ncI/AAAAAAABSKU/f0Z4x6v8JGU/image_thumb%25255B1%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;284&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Nicht schön war die harte Kopplung der Implementierung des PropertyRegistryService. Per Annotation wurde&lt;/p&gt; &lt;p&gt;die Implementierung deklariert. &lt;strong&gt;@CDIPropertyRegistryFileBased&lt;/strong&gt; (im Blog noch @CDIFileBased)&lt;/p&gt; &lt;p&gt;Immer wieder muss aber zur Laufzeit entschieden werden welche Implementierung verwendet werden soll/muss.&lt;/p&gt; &lt;p&gt;Das kann verschiedene Gründe haben wie z.B. das derzeitige Lastverhalten, der angemeldete User und und und.&lt;/p&gt; &lt;p&gt;Wie also die Endscheidung vornehmen? &lt;/p&gt; &lt;p&gt;Zwei Dinge sind notwendig:&lt;/p&gt; &lt;p&gt;1) Das Interface der implementierenden Klasse, in unserem Fall PropertyRegistryService&lt;/p&gt; &lt;p&gt;2) und der Qualifier um den richtigen Producer zu selektieren.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh6.ggpht.com/-h00St984Puw/UcrzjsYJWqI/AAAAAAABSKY/_tdGiHgBOtM/s1600-h/image%25255B10%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh3.ggpht.com/-qqqZ7bBXoYU/UcrzkSEbvAI/AAAAAAABSKk/uysM0o1UCdo/image_thumb%25255B6%25255D.png?imgmax=800&quot; width=&quot;1028&quot; height=&quot;436&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Das Interface ist relativ leicht zu ermitteln. Mann kann es fest angeben, da man weiß das man genau dieses Interface benötigt.&lt;/p&gt; &lt;p&gt;Wenn auch das dynamisch ermittelt werden muss, kann man hier ähnlich wie bei den MessageRessourcen vorgehen. Es wird ein Key übergeben, der an anderer Stelle auf ein Interface gemappt wird. Hier einfach simuliert durch die Methode &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Class mapp2Class(final String key)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Spannender wird es bei der Auswahl der richtigen Qualifiers. Das ist der Kern der Implementierung.&amp;nbsp; Simuliert wird es hier &lt;/p&gt; &lt;p&gt;durch die Methode &lt;strong&gt;resolveContextImpl().&lt;/strong&gt; Wie genau die Implementierung aussehen kann, hängt von der Umgebung ab und welche Parameter ausgewertet werden müssen.&lt;/p&gt; &lt;p&gt;Die Implementierung hier erzeugt ein &lt;strong&gt;AnnotationLiteral&amp;lt;CDIPropertyRegistryFileBased&amp;gt;.&lt;/strong&gt; Das ist wieder eine harte Kopplung, kann jedoch wieder durch einen Mappingmechanismus zur Laufzeit aufgelöst werden.&amp;nbsp; Am einfachsten,&amp;nbsp; in dem man eine Klasse dynamisch instanziiert, die von AnnotationLitaral erbt.&lt;/p&gt; &lt;p&gt;z.B.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh6.ggpht.com/-G1N0nxPr5Jw/UcrzlHIDuvI/AAAAAAABSKs/Los4mxtfuRs/s1600-h/image%25255B14%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh4.ggpht.com/-y0L-RO_BVbQ/Ucrzl2JaOdI/AAAAAAABSK0/H3f7eFzzq1Y/image_thumb%25255B8%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;118&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-06-26&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Vaadin: Markierte Zeile einer Tabelle editierbar machen</title>
        <category label="DefaultFieldFactory"/>
        <category label="Tabelle"/>
        <category label="TableFieldFactory"/>
        <category label="Vaadin"/>
        <published>2013-07-07T00:00:00+02:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/07/vaadin--markierte-zeile-einer-tabelle-.html&quot; rel=&quot;tag&quot;&gt;Vaadin: Markierte Zeile einer Tabelle editierbar machen&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-07&quot;&gt;2013-07-07&lt;/time&gt; &lt;a href=&quot;/team/marco-ebbinghaus&quot; rel=&quot;author&quot;&gt;from Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Hier ein kleines Tutorial über den Umgang mit Vaadin-Tabellen und deren Editierbarkeit. Der Anwendungsfall (aus der Praxis) ist simpel:&lt;br /&gt;
&lt;br /&gt;
Eine Tabelle enthält Entitäten des Typs &lt;i&gt;Parameter&lt;/i&gt;. Ein &lt;i&gt;Parameter &lt;/i&gt;besteht aus dem Parameter-Namen, einer Beschreibung, einem Standard-Wert und einem benutzerdefinierten Wert (welcher den Standard-Wert ersetzt). Die Vaadin-Tabelle enthält einen Container mit &lt;i&gt;Parameter&lt;/i&gt;-Beans und besteht somit aus den vier Spalten &lt;i&gt;Name, Beschreibung, Standard-Wert, benutzerdefinierter Wert&lt;/i&gt;. &lt;i&gt;Name, Beschreibung&lt;/i&gt; und &lt;i&gt;Standard-Wert&lt;/i&gt; sind fix, während der&lt;i&gt; benutzerdefinierte Wert&lt;/i&gt; editierbar sein soll.&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-qWl7LhM7gzE/UdmFviRAh_I/AAAAAAAAAAg/zaS9wO2q9EA/s1600/vaadintable1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;159&quot; src=&quot;http://3.bp.blogspot.com/-qWl7LhM7gzE/UdmFviRAh_I/AAAAAAAAAAg/zaS9wO2q9EA/s320/vaadintable1.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Ziel&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
Um Vaadin-Tabellen editierbar zu machen existiert die Methode &lt;i&gt;setEditable(boolean b)&lt;/i&gt;. Wird dieser ein &lt;i&gt;true &lt;/i&gt;übergeben wird die gesamte Tabelle editierbar. Sprich: Alle Zellen werden zu Textfeldern. Oftmals ist dies natürlich nicht gewünscht da beispielsweise bestimmte Spalten nicht editierbar sein sollen (wie in unserem Fall). Um das Verhalten der Tabelle den eigenen Wünschen anzupassen muss man die von der Tabelle verwendete &lt;i&gt;TableFieldFactory &lt;/i&gt;überschreiben (standardmäßig wird hier eine Instanz der &lt;i&gt;DefaultFieldFactory &lt;/i&gt;verwendet, welche sämtliche Zellen der Tabelle editierbar macht). An dieser Stelle möchte ich etwas vorgreifen und schonmal die Codestelle zeigen, in welcher der Tabelle die neu implementierte FieldFactory zugewiesen wird. Die entsprechende Implementierung unserer eigenen TableFieldFactory folgt dann im Anschluss.&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
parametersTable.addItemClickListener(new ItemClickEvent.ItemClickListener() {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @Override&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void itemClick(ItemClickEvent itemClickEvent) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; final CrawlerParameter crawlerParameter = (CrawlerParameter) itemClickEvent.getItemId();&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(crawlerParameter == null){&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buttonLeiste.setVisible(false);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; parametersTable.setEditable(false);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; buttonLeiste.setVisible(true);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; parametersTable.setTableFieldFactory(new EditSelectedParamFieldFactory(crawlerParameter));&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; parametersTable.setEditable(true);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;br /&gt;
&lt;/code&gt;
Der Tabelle (parametersTable) wird ein ItemClickListener hinzugefügt welcher die itemClick()-Methode ausführt wenn eine Zeile der Tabelle durch den Benutzer markiert wurde. Innerhalb dieser Methode wird zuerst der vom Benutzer ausgewählte Parameter in einer entsprechenden Variable gespeichert. Achtung: &lt;span style=&quot;color: red;&quot;&gt;Den aktuellen Parameter bekommt man nicht via parametersTable.getValue()! Dies liefert nicht den aktuell angeklickten Parameter, sondern den zuvor ausgewählten (Bei Benutzung dieser Methode ist man also immer genau einen Schritt hinterher). Der aktuell ausgewählte Parameter ist&amp;nbsp;per getValue()&amp;nbsp;erst NACH Durchführung der itemClick()-Methode abrufbar&lt;/span&gt;. Anschließend wird überprüft ob überhaupt ein Parameter ausgewählt ist. Ist dies nicht der Fall soll die Tabelle auch nicht editierbar sein, andernfalls bekommt die Tabelle eine neue FieldFactory - nämlich unsere eigene Implementation. Diese bekommt als Parameter den angeklickten Parameter übergeben (die Implementation folgt gleich). Anschließend wird die Tabelle editierbar gemacht (per setEditable(true)). Nun ist die Spalte BenutzerdefWert der ausgewählten Zeile editierbar.&lt;br /&gt;
&lt;br /&gt;
Lösen wir das Rätsel und schauen uns die EditSelectedParamFieldFactory-Implementation an:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
public class EditSelectedParamFieldFactory extends AbstractFieldFactory {&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp; &amp;nbsp; private CrawlerParameter selectedCrawlerParameter;&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp; &amp;nbsp; public EditSelectedParamFieldFactory(final CrawlerParameter selectedCrawlerParameter){&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; this.selectedCrawlerParameter = selectedCrawlerParameter;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; @Override&lt;br /&gt;
&amp;nbsp; &amp;nbsp; public Field&amp;lt;?&amp;gt; createField(Container container, Object aParameter, Object spaltenname, Component uiContext) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CrawlerParameter parameter = (CrawlerParameter)&amp;nbsp;aParameter;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; switch(spaltenname.toString()){&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case NAME:&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case DESCR:&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case DEFAULT_VALUE:&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case USER_VALUE:&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(selectedCrawlerParameter != null){&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(selectedCrawlerParameter.equals(parameter)){&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(parameter.getDefaultValue().getClass() == Boolean.class) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return new CheckBox();&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(parameter.getDefaultValue().getClass() == Integer.class) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; final TextField integerTextField = new TextField();&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; configureField(integerTextField, Integer.class);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return integerTextField;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(parameter.getDefaultValue().getClass() == Double.class) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; final TextField doubleTextField = new TextField();&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; configureField(doubleTextField, Double.class);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return doubleTextField;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if(parameter.getDefaultValue().getClass() == String.class) {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; final TextField textField = new TextField();&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; configureField(textField, String.class);&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return textField;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default:&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return null;&lt;br /&gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;
&amp;nbsp; &amp;nbsp; }&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;
&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;&lt;/code&gt;
Wie bereits erwähnt, muss ein selbst implementierte FieldFactory das Interface TableFieldFactory implementieren. Warum erweitert unsere Klasse also AbstractFieldFactory anstatt TableFieldFactory zu implementieren? Ganz einfach: Die Klasse AbstractFieldFactory ist abstrakt und implementiert das TableFieldFactory-Interface (zusätzlich wird in ihr die (für uns nun nicht relevante) Methode configureField() implementiert, welche die zu erstellenden Felder je nach enthaltenem Datentyp mit entsprechenden Validatoren etc. versieht). Wir implementieren also die Methode &amp;nbsp;public Field&amp;lt;?&amp;gt; createField(Container container, Object itemId, Object propertyId, Component uiContext) des TableFieldFactory-Interfaces. Außerdem besitzt die Klasse ein Attribut, welches den aktuell ausgewählten Parameter speichert. Für jede Zelle der Tabelle wird dann die Methode durchlaufen. Innerhalb der Methode wird bei jedem Durchlauf zunächst geprüft in welcher Zeile (CrawlerParameter parameter) und in welcher Spalte (switch(spaltenname.toString()) wir uns befinden. Befinden wir uns in einer Zelle der Spalten &lt;i&gt;Name&lt;/i&gt;, &lt;i&gt;Beschreibung&lt;/i&gt; oder &lt;i&gt;StandardWert &lt;/i&gt;ist eine Prüfung der Zeile unnötig, da Zellen dieser Spalten eh nicht editierbar sein sollen, egal ob es sich um die ausgewählte Zeile handelt oder nicht. Daher wird in diesen Fällen ein null-Wert zurückgegeben --&amp;gt; Die Zelle ist nicht editierbar. Falls wir uns in der &lt;i&gt;BenutzerdefWert&lt;/i&gt;-Spalte befinden wird überprüft ob es sich um die vom Benutzer ausgewählte Zeile handelt. Falls nicht, wird ebenfalls ein null zurückgegeben. Falls doch wird überprüft welchen Datentyp der Parameter besitzt (ist es ein boolescher Parameter, ein Integer-Parameter, ...?). Anschließend wird ein entsprechendes TextFeld (oder eine CheckBox bei einem booleschen Parameter) erstellt und mit entsprechenden Convertern/Validatoren etc. versehen. Anschließend wird das TextFeld bzw. die CheckBox zurückgegeben. Diese Zelle ist also nun editierbar. Damit haben wir das Ziel erreicht: Nur der benutzerdefinierte Wert des aktuell ausgewählten Parameters ist editierbar.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Zusammenfassung&lt;/b&gt;&lt;br /&gt;
Soll nur die aktuell ausgewählte Zeile (bzw. Teile davon) der Tabelle editierbar sein so muss folgendes getan werden:&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Tabelle einen ItemClickListener hinzufügen&lt;/li&gt;
&lt;li&gt;Im ItemClickListener wird der Tabelle eine Instanz einer selbst erstellten, das Interface &lt;i&gt;TableFieldFactory &lt;/i&gt;implementierenden, Klasse zugewiesen (setTableFieldFactory(new MyFieldFactory(currentSelectedEntity)) und die Tabelle auf editable gesetzt (setEditable(true)).&lt;/li&gt;
&lt;li&gt;In der eigenen Implementierung der TableFieldFactory (welche per Konstruktor-Parameter die selektierte Entität übergeben bekommt) wird überprüft ob es sich um eine Zelle handelt welche sich in der selektierten Zeile (und in einer editierbaren Spalte) befindet. Ist dies der Fall wird eine entsprechende Eingabe-Komponente (z.B. ein Textfeld oder eine CheckBox) erstellt und zurückgegeben (andernfalls wird &lt;i&gt;null &lt;/i&gt;zurückgegeben und die Zelle ist nicht editierbar).&lt;/li&gt;
&lt;/ul&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-5097075qitI/UdmF8mtS0FI/AAAAAAAAAAo/e1DZtGQ776I/s1600/vaadintable2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;158&quot; src=&quot;http://2.bp.blogspot.com/-5097075qitI/UdmF8mtS0FI/AAAAAAAAAAo/e1DZtGQ776I/s320/vaadintable2.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Hier werden alle Zellen der Spalte BenutzerdefWert editierbar gemacht, unabhängig von der Selektion&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/marco-ebbinghaus&quot; rel=&quot;author&quot;&gt;Marco Ebbinghaus&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-07&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI - Commons</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Weld"/>
        <published>2013-07-11T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/11/cdi-commons.html&quot; rel=&quot;tag&quot;&gt;CDI - Commons&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-11&quot;&gt;2013-07-11&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Die &lt;b&gt;CDI - Commons&lt;/b&gt;&amp;nbsp;Repositories sind nun im Jenkins (&lt;a href=&quot;http://jenkins.rapidpm.org/&quot;&gt;http://jenkins.rapidpm.org/&lt;/a&gt;) als Job hinterlegt.&lt;br /&gt;
Änderungen im develop - Branch werden gebaut und in das Repository (&lt;a href=&quot;http://nexus.rapidpm.org/nexus/&quot;&gt;http://nexus.rapidpm.org/nexus/&lt;/a&gt;) gelegt.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Hot Swap in Java with DCEVM</title>
        <category label="IDEA"/>
        <category label="Java"/>
        <category label="jUnit"/>
        <category label="Tools"/>
        <published>2013-07-12T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/12/hot-swap-in-java-with-dcevm.html&quot; rel=&quot;tag&quot;&gt;Hot Swap in Java with DCEVM&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-12&quot;&gt;2013-07-12&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Immer auf der Suche nach neuen Werkzeugen…&amp;nbsp; Hier DCEVM (&lt;a href=&quot;http://ssw.jku.at/dcevm/&quot; target=&quot;_blank&quot;&gt;http://ssw.jku.at/dcevm/&lt;/a&gt;)&lt;br /&gt;
Und das beste: Es gibt es schon als intelliJ Plugin..&lt;br /&gt;
&lt;a href=&quot;http://blogs.jetbrains.com/idea/2013/07/get-true-hot-swap-in-java-with-dcevm-and-intellij-idea/&quot; target=&quot;_blank&quot;&gt;http://blogs.jetbrains.com/idea/2013/07/get-true-hot-swap-in-java-with-dcevm-and-intellij-idea/&lt;/a&gt;&lt;br /&gt;
das normale HotSwaping hat enge Grenzen sobald man an der Struktur der Klassen Veränderungen vornimmt. Hier gab es bisher immer noch das kommerzielle Werkzeug jRebel.&lt;br /&gt;
(Danke übrigens an das jRebel Team f die OSS Lizenz)&lt;br /&gt;
Nun gibt es eine OSS Lösung die genau an dieser Stelle weiterhilft. &lt;br /&gt;
Ich werde von meinen Tests berichten… &lt;img alt=&quot;Zwinkerndes Smiley&quot; class=&quot;wlEmoticon wlEmoticon-winkingsmile&quot; src=&quot;http://lh6.ggpht.com/-G022Pyxe_B0/Ud-RlflpOrI/AAAAAAABSkE/ULRusdSNp3Q/wlEmoticon-winkingsmile%25255B2%25255D.png?imgmax=800&quot; style=&quot;border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;&quot; /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-12&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Transactions tested with Arquillian</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="IntelliJ"/>
        <category label="jUnit"/>
        <category label="Transactions"/>
        <category label="Weld"/>
        <published>2013-07-15T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/15/cdi-transactions-tested-with-arquillia.html&quot; rel=&quot;tag&quot;&gt;CDI Transactions tested with Arquillian&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-15&quot;&gt;2013-07-15&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;How to implement a scope like an transaction? The main goal was the reusability for an SE environment.&lt;/p&gt; &lt;p&gt;After a little bit google- searching I found the ConversationScope. A google start, but not usable in an SE environment.&lt;/p&gt; &lt;p&gt;So I started to write my own Scope. (&lt;a href=&quot;https://bitbucket.org/svenruppert/cdi-commons&quot; target=&quot;_blank&quot;&gt;Source –&amp;gt; Bitbucket&lt;/a&gt;) First step will be an annotation CDITransactionScope with the default Annotations.&lt;/p&gt; &lt;p&gt;The only new one is the annotation @NormalScope. With this annotation the container will use this as an Scope-Qualifier.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh4.ggpht.com/-8_n9oH0Dbm4/UeP4SKa0QwI/AAAAAAABSuU/2x_jChe15Qs/s1600-h/image%25255B8%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh4.ggpht.com/-y8G10V5KAP4/UeP4SmByerI/AAAAAAABSuc/8PSmYE4yWaU/image_thumb%25255B4%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt; &lt;p&gt;The next step is the implementation of an extension. This is done by the class CDITransactionExtension extends Extension.&lt;/p&gt; &lt;p&gt;The interface Extension itself is empty and only a marker.&amp;nbsp; The task to full fill is the registration of an context. &lt;/p&gt; &lt;p&gt;The AfterBeanDiscovery event is used to add the instance of the context implementation. Important to know is, that at this point the init-phase of the weld-container is not ready.&lt;/p&gt; &lt;p&gt;No &lt;strong&gt;@Inject&lt;/strong&gt; is possible and the only instance that can be injected is the BeanManager.&amp;nbsp; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/-w7ajr6R2Wpo/UeP4TMXBvSI/AAAAAAABSug/Fd7arvk8qqk/s1600-h/image%25255B12%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh3.ggpht.com/-UPQ2B0YHxyk/UeP4TWPOnnI/AAAAAAABSus/oiAHxpFRDzY/image_thumb%25255B6%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;124&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally we have to implement the heard of the transaction, the CDITransactionContext implements Context.&lt;/p&gt; &lt;p&gt;This is a class, not managed by the Container and again no &lt;strong&gt;@Inject&lt;/strong&gt; is possible, but the BeanManager&lt;/p&gt; &lt;p&gt;is usable. (see &lt;strong&gt;CDITransactionExtension&lt;/strong&gt; ) &lt;/p&gt; &lt;p&gt;Four methods are found to implement from the interface Context.&lt;/p&gt; &lt;p&gt;1) public Class&amp;lt;? extends Annotation&amp;gt; getScope()&lt;/p&gt; &lt;p&gt;2) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual, CreationalContext&amp;lt;T&amp;gt; creationalContext);&lt;/p&gt; &lt;p&gt;3) public &amp;lt;T&amp;gt; T get(Contextual&amp;lt;T&amp;gt; contextual);&lt;/p&gt; &lt;p&gt;4) public boolean isActive();&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Nr 2 and 3 are the important methods to implement. This methods are handling the instance-management.&lt;/p&gt; &lt;p&gt;The easiest implementation could be a map like HashMap&amp;lt;Class, Object&amp;gt;.&lt;/p&gt; &lt;p&gt;This implementation will cache all classes implementing the Interface Cacheable. (&lt;a href=&quot;https://bitbucket.org/rapidpm/genericcache&quot; target=&quot;_blank&quot;&gt;GenericCache&lt;/a&gt;) &lt;/p&gt; &lt;p&gt;If an Class is implementing this Interface it will be cached, otherwise you will always get a new instance.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/-6bfsAetJgo0/UeP4UAQJKrI/AAAAAAABSu0/to6jHAfYi5Q/s1600-h/image%25255B21%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh3.ggpht.com/-Ox2h6Dou6EY/UeP4UkYhxPI/AAAAAAABSu8/mPyXJd_ZWrc/image_thumb%25255B11%25255D.png?imgmax=800&quot; width=&quot;908&quot; height=&quot;772&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To activate this Extension, the class CDITransactionExtension must be registered in the file META-INF/javax.enterprise.inject.spi.Extension &lt;/p&gt; &lt;p&gt;with the full class name. &lt;/p&gt; &lt;p&gt;Now we can start writing transactions. &lt;/p&gt; &lt;p&gt;The Transaction (&lt;strong&gt;AbstractCDITransaction&lt;/strong&gt;) is an Executor-Pattern.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh6.ggpht.com/-qdFoduyDt0E/UeP4VeY1VOI/AAAAAAABSvA/q2Hsj9Z0Rkw/s1600-h/image%25255B26%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh4.ggpht.com/-wyJOQFyWvX4/UeP4V5E1H2I/AAAAAAABSvM/eQO5yuJdMEw/image_thumb%25255B14%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;377&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;To Implement a transaction you have to implement an transaction – class with the method doIt().&lt;/p&gt; &lt;p&gt;Here is an excample with references inside and ad the same time outside of the active transaction.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh6.ggpht.com/-l69QbJiKoXU/UeP4WVnFc5I/AAAAAAABSvU/ueWyg9BvvOU/s1600-h/image%25255B30%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh5.ggpht.com/-tqIEH8iq9XI/UeP4Ww--MsI/AAAAAAABSvc/QK5bf-jKmJM/image_thumb%25255B16%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;358&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Inside the transaction are all instances with the Qualifier @&lt;strong&gt;CDITransactionScop&lt;/strong&gt; .&lt;/p&gt; &lt;p&gt;For this jUnitTest I implemented two Producers, one for the Instances inside the transaction and one for the outside one.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/-zUQhJDisv4Y/UeP4XQ1EfuI/AAAAAAABSvg/XzXjLsCJ1l4/s1600-h/image%25255B34%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh6.ggpht.com/-Zldm9h4o5E4/UeP4X_orOmI/AAAAAAABSvs/CsMKhkxeZqw/image_thumb%25255B18%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;351&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Finally the UML for this small demo.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/-pMH_HP0lwT0/UeP4YZGo_CI/AAAAAAABSv0/2GoNh3uvdNU/s1600-h/image%25255B38%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh5.ggpht.com/-RKdm-qREa4Y/UeP4Y7e2MCI/AAAAAAABSv8/r9TFk6fpDuA/image_thumb%25255B20%25255D.png?imgmax=800&quot; width=&quot;883&quot; height=&quot;772&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Commons - Dynamic Service Resolver</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="jUnit"/>
        <category label="Weld"/>
        <published>2013-07-17T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/17/cdi-commons-dynamic-service-resolver.html&quot; rel=&quot;tag&quot;&gt;CDI Commons - Dynamic Service Resolver&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-17&quot;&gt;2013-07-17&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;In meinem Blog vom &lt;a href=&quot;http://www.rapidpm.org/2013/06/cdi-commons-dynamic-service-resolver.html&quot; target=&quot;_blank&quot;&gt;26.6.2013&lt;/a&gt; habe ich über die Möglichkeit geschrieben, wie man zur Laufzeit die &lt;br /&gt;
Implementierung auswählen kann die in die entsprechende Stelle injected wird.&lt;br /&gt;
Es war immer noch notwendig die Producer anzupassen wie in dem Beispiel des SimpleDateFormatterProducer&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-3nOsUPRQFBY/UeZRhRWi8FI/AAAAAAABSyE/ydt6LTVhrd4/s1600-h/image%25255B4%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-Z1PL3KBjqb8/UeZRhzjaSxI/AAAAAAABSyM/HgBpBsB-kQ0/image_thumb%25255B2%25255D.png?imgmax=800&quot; height=&quot;291&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;1028&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Gleich mehrere Dinge die nicht angenehm sind. &lt;br /&gt;
1) der ContextResolver ist hier hart per Qualifier angegeben.&lt;br /&gt;
2) Die Implementierung eines Constructors selbst&lt;br /&gt;
3) Lazy-Init des AttributespropertyregistryService &lt;br /&gt;
4) fehlende Default Implementierung&lt;br /&gt;
&lt;br /&gt;
Aus Sicht der Entwickler wäre folgendes wünschenswert.&lt;br /&gt;
Ein Inject des PropertyregistryService mit folgender Anweisung: &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-45yPDOnUJxw/UeZRiZrDRSI/AAAAAAABSyQ/Y1ZESUxf9YM/s1600-h/image%25255B23%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-I-yScB0k1CI/UeZRi_UnpXI/AAAAAAABSyc/3u4HtZS8jz0/image_thumb%25255B13%25255D.png?imgmax=800&quot; height=&quot;37&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Um das zu erreichen wird die Klasse &lt;strong&gt;PropertyRegistryServiceProducer&lt;/strong&gt; implementiert.&lt;br /&gt;
Hier wird ein allgemeiner Producer für den PropertyregistryServcie geschrieben.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-sylKRPpui48/UeZRjfS06YI/AAAAAAABSyk/GXdNjNHsl28/s1600-h/image%25255B13%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-tfvsFsLLHiM/UeZRjzBZnlI/AAAAAAABSyo/ESmx0QU5_0o/image_thumb%25255B7%25255D.png?imgmax=800&quot; height=&quot;544&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;1028&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
zwei Dinge sind hier von Bedeutung:&lt;br /&gt;
1) Der Inject einer Default-Implementierung , in diesem Fall der Inject einer FileBasedRegistry&lt;br /&gt;
2) Der Inject einers ContextResolvers mit @Any und @Default&lt;br /&gt;
Nun kann zur Laufzeit der ContextResolver ausgewertet werden um die Endscheidung zu treffen welche Implementierung verwendet werden soll.&lt;br /&gt;
Der ContextResolver selbst wird wohl immer eine spezialisierte Implementierung in einem Projekt darstellen und muss deshalb selbst Implementiert werden.&lt;br /&gt;
Eine Default-Implementierung ist dem Projekt als Beispiel in den test – Foldern beigelegt. (&lt;strong&gt;DefaultPropertyContextResolver&lt;/strong&gt;)&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-TCFHS7F4WGA/UeZRkTfzDOI/AAAAAAABSyw/m0xYmEL6KP4/s1600-h/image%25255B18%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-JkhZXOORYrM/UeZRkqRcRnI/AAAAAAABSy8/vuUpFYsOYKw/image_thumb%25255B10%25255D.png?imgmax=800&quot; height=&quot;162&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Stash 2.6 Git Repository Management  Atlassian</title>
        <published>2013-07-23T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/07/23/stash-2.6-git-repository-management-at.html&quot; rel=&quot;tag&quot;&gt;Stash 2.6 Git Repository Management  Atlassian&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-07-23&quot;&gt;2013-07-23&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;a href=&quot;https://www.atlassian.com/en/software/stash/whats-new/stash-26?&amp;amp;utm_source=stash-2-6-email&amp;amp;utm_medium=email&amp;amp;utm_campaign=stash-2-6&quot;&gt;Stash 2.6 Git Repository Management | Atlassian&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-07-23&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.logger - ProgrammingHandbook - RapidPM</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="Weld"/>
        <published>2013-08-01T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/01/cdi.commons.logger-programminghandbook.html&quot; rel=&quot;tag&quot;&gt;cdi.commons.logger - ProgrammingHandbook - RapidPM&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-01&quot;&gt;2013-08-01&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div style=&quot;background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;&quot;&gt;
Die Definition eines Loggers gehört zu fast jeder Klasse. Immer wieder ist der Logger zu definieren und in diesem Zuge dann auch die Entscheidung zu treffen, welcher Logger zu verwenden ist.&lt;/div&gt;
&lt;div style=&quot;background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;&quot;&gt;
Nachträglich dieses zu ändern bedeutet immer, alle Klassen zu modifizieren. Es geht auch anders..&lt;/div&gt;
&lt;div style=&quot;background-color: white; color: #333333; font-family: Arial, sans-serif; font-size: 14.666666984558105px; line-height: 26.66666603088379px; margin-top: 10px;&quot;&gt;
... siehe&amp;nbsp;&lt;/div&gt;
&lt;a href=&quot;http://wiki.rapidpm.org/display/PHB/cdi.commons.logger&quot;&gt;cdi.commons.logger - ProgrammingHandbook - RapidPM&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://chrome.google.com/webstore/detail/pengoopmcjnbflcjbmoeodbmoflcgjlk&quot; style=&quot;font-size: 13px;&quot;&gt;'via Blog this'&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-01&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Grundgedanke: Warum CDI</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="Weld"/>
        <published>2013-08-02T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/02/grundgedanke--warum-cdi.html&quot; rel=&quot;tag&quot;&gt;Grundgedanke: Warum CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-02&quot;&gt;2013-08-02&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Grundgedanke: Warum CDI? (&lt;a href=&quot;http://wiki.rapidpm.org/display/PHB/02+-+CDI+for+JavaEE+and+JavaSE&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;) &lt;br /&gt;
CDI als eine Technik die auf der SE als auch auf der EE Seite zur Verfügung steht ist ein mächtiges Werkzeug um Quelltext in einer Anwendung zu entkoppeln.  &lt;br /&gt;
Der modulare Aufbau kann auf einfache Art und Weise unterstützt und bei Alt-Anwendungen eingeführt werden.  &lt;br /&gt;
&lt;b&gt;kürzere Notation?&lt;/b&gt;&lt;br /&gt;Manchmal ist die Notation per Inject kürzer. Sobald allerdings die einzelnen Qualifier dazukommen, ist meist der Aufwand zum Aufruf eines Konstruktors kaum unterschiedlich.  &lt;br /&gt;
&lt;b&gt;lösen von statischen Abhängigkeiten?&lt;/b&gt;&lt;br /&gt;Dieser Punkt ist einer der Wesentlichen. Wie kann man zur Entwicklungszeit die Abhängigkeiten zu den anderen Projektmodulen möglichst gering halten?&lt;br /&gt;Gehen wir von der Definition einer Liste aus. Als Rückgabewert einer Methode wird die List verwendet.  &lt;br /&gt;
&lt;b&gt;Definition Rückgabewert&lt;/b&gt;  &lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-d-b41AM1HyQ/UftGL4WdLuI/AAAAAAABS8s/oGfAp2F9_EA/s1600-h/image%25255B28%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-j1uXwlxRVDo/UftGMdAbWjI/AAAAAAABS80/tnx7-9PIgr8/image_thumb%25255B20%25255D.png?imgmax=800&quot; height=&quot;69&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt;  &lt;br /&gt;
Damit sind nachfolgende Aufrufer nicht mehr an die Implementierung der List gebunden. In der Methode jedoch besteht meist die Abhängigkeit zu der entsprechenden Implementierung obwohl auch das meist nicht notwendig ist.  &lt;br /&gt;
&lt;b&gt;Erzeugen der Liste&lt;/b&gt;  &lt;br /&gt;
&lt;code&gt;&lt;a href=&quot;http://lh4.ggpht.com/-7I3g1Dg0N14/UftGMotqprI/AAAAAAABS88/_I8F01DVLhM/s1600-h/image%25255B27%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-Q9Pu7l58d_Q/UftGNH6eGCI/AAAAAAABS9E/7YyW5wH005M/image_thumb%25255B19%25255D.png?imgmax=800&quot; height=&quot;206&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt;&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;&lt;/code&gt; &lt;br /&gt;
Gehen wir davon aus, dass keine spezifischen Methoden der ArrayList verwendet werden. Selten werden Methoden wie z.B. trimToSize() verwendet. Somit ist die statische Abhängigkeit zu der ArrayList nicht notwendig. Sollte sich zur Laufzeit herausstellen, das die Wahl dieser Implementierung nicht optimal gewesen ist, muss der Quelltext angepasst und neu verteilt werden. Mit std SE Mitteln kann man das durch entsprechende Factories lösen. Beispielhaft soll hier folgende Implementierung verwendet werden.  &lt;br /&gt;
&lt;b&gt;Definition ListFactory&lt;/b&gt;  &lt;br /&gt;
&lt;code&gt;&lt;a href=&quot;http://lh6.ggpht.com/-MpWEc3Vj5Ss/UftGNUj5LWI/AAAAAAABS9M/Bv4kRfLVI1w/s1600-h/image%25255B15%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-n3H4xK_UpBQ/UftGN8uScSI/AAAAAAABS9U/_tYw3ap0ImU/image_thumb%25255B9%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt;&lt;/code&gt;  &lt;br /&gt;
Der Entwickler selbst schreibt nun seinen Quelltext unter Verwendung der Factory. Die Factory sollte unter Umständen immer neu erzeugt werden, um Nebenläufigkeitsprobleme sofort auszuschliessen. Selbstverständlich kann auch die Factory threadsave programmiert werden, im schlimmsten Fall mit den Schlüsselwort synchronized.  &lt;br /&gt;
&lt;b&gt;Verwendung ListFactory&lt;/b&gt;  &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-oFzYiG5IAQ4/UftGOSJ28dI/AAAAAAABS9c/fXECqVj2NQY/s1600-h/image%25255B30%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-CVfHTeJNC_E/UftGOxUS5bI/AAAAAAABS9k/ldG5rybeNBs/image_thumb%25255B22%25255D.png?imgmax=800&quot; height=&quot;157&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt;  &lt;br /&gt;
Bisher wurde nun die statische Abhängigkeit zur ArrayList verhindert, die Entscheidung eine ArrayList zu nehmen ist jedoch immer noch expliziet gefallen.  &lt;br /&gt;
Umgehen kann man das durch die Verwendung der ListFactory.&amp;nbsp; &lt;br /&gt;
Die Implementierung der ListFactory selber hat auch wieder die statischen Abhängigkeiten zu allen vorgesehenen Implementierungen.&amp;nbsp; &lt;br /&gt;
Der nächste Schritt kann ein ContextRsolver sein, der in die Factory eingebunden wird und zur Laufzeit die Wahl der Implementierung trifft.  &lt;br /&gt;
Der ContextResolver wird entweder beim Methodenaufruf übergeben, oder bei der Initialisierung der Factory erzeugt/übergeben/geholt.  &lt;br /&gt;
Möchte man nun die Factory so erstellen, das diese wiederum nicht statische Abhängigkeiten zu den jeweiligen Contexten bzw Implementierungen der Liste hat, muss eine Registry gebaut werden.  &lt;br /&gt;
Dort kann man zur Laufzeit die jeweiligen Implementierungen registrieren und für eine Auflösung zur Verfügung stellen.  &lt;br /&gt;
Spätestens ab diesem Zeitpunkt wird die Implementierung aufwendig, da man entweder diesen Mechanismus für alle Implementierungen vorhalten muss, oder eine generische Implementierung notwendig ist.  &lt;br /&gt;
Hier Hilft CDI durch seine Konzepte, ohne das man sich mit der Basisimplementierung der Infrastruktur beschäftigen muss.&amp;nbsp; &lt;br /&gt;
&lt;b&gt;&lt;/b&gt;&amp;nbsp; &lt;br /&gt;
&lt;b&gt;Wie ist nun die Lösung mittels CDI?&lt;/b&gt; &lt;br /&gt;
Für den Entwickler sieht die Verwendung exemplarisch (&lt;b&gt;CDILegacyTest&lt;/b&gt;) wie folgt aus. &lt;br /&gt;
&lt;b&gt;Def List per CDI&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-bLcZPIibAx4/UftGPNKMxiI/AAAAAAABS9s/d4Dcxqv8XTk/s1600-h/image%25255B34%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-YjcOGqGEVvM/UftGPoSfgvI/AAAAAAABS90/uMCmYSSMRXU/image_thumb%25255B24%25255D.png?imgmax=800&quot; height=&quot;71&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Die Verwendung erfolgt wie gewohnt. Das AnnotationsLiteral &lt;b&gt;CDILegacyTest&lt;/b&gt; gibt an, welcher Producer zu wählen ist. &lt;br /&gt;
&lt;b&gt;Def ListProducer&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-Mqa6FjW3nVY/UftGP4pVxLI/AAAAAAABS98/lnd4vw1eVW0/s1600-h/image%25255B38%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-K3k-sZg_3AY/UftGQXAGksI/AAAAAAABS-E/BD2wV4v8EVk/image_thumb%25255B26%25255D.png?imgmax=800&quot; height=&quot;60&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
Fertig sind wir. &lt;br /&gt;
&lt;b&gt;dynamische Rekonfiguration?&lt;/b&gt; &lt;br /&gt;
CDI stellt eine sehr angenehme Basis zur Erzeugung dynamisch rekonfigurierbarer Systeme dar. Das Konzept der Instance&amp;lt;T&amp;gt; ist hier der Einstiegspunkt. &lt;br /&gt;
In der Definition der Attribute wird der Proxy Instance&amp;lt;T&amp;gt; verwendet. &lt;br /&gt;
&lt;b&gt;Def List-Instance&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-Jx7pcJ8Lljc/UftGQu_1iaI/AAAAAAABS-I/YN22O1upDnA/s1600-h/image%25255B42%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-x0LxTetnq6Y/UftGRDDqJ5I/AAAAAAABS-U/-_opHCRoGzw/image_thumb%25255B28%25255D.png?imgmax=800&quot; height=&quot;60&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
&lt;code&gt;&lt;/code&gt; &lt;br /&gt;
Zu dem Zeitpunkt wenn auf die Variable zugegriffen werden muss, wird per get() die konkrete Implementierung geholt. &lt;br /&gt;
&lt;b&gt;Verwendung der Liste&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-pxLHjI0MXfo/UftGRdDxBxI/AAAAAAABS-Y/OjA7SmGkyis/s1600-h/image%25255B46%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-4qL8gg2H9OA/UftGR5ul8nI/AAAAAAABS-k/_SCq8OqH7-0/image_thumb%25255B30%25255D.png?imgmax=800&quot; height=&quot;65&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;437&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
&lt;code&gt;&lt;/code&gt; &lt;br /&gt;
Damit kann die Entscheidung von der Erzeugung der verwendenden Instanz auf den Zeitpunkt der Verwendung verschoben werden. &lt;br /&gt;
In diesem Moment sollten im System hinreichend Informationen zur Verfügung stehen um die richtige Implementierung wählen zu können. Das Konzept basiert auf einem ContextResolver. &lt;br /&gt;
In diesem werden die Zustandsinformationen der Laufzeitumgebung, des Benutzers und was immer notwendig ist aggregiert und führen zu einer deklarativen Entscheidung. &lt;br /&gt;
Das Ergebnis ist ein umgebungsspezifisches AnnotationsLiteral mit dessen Hilfe die zur Verfügung stehenden Producer ausgewählt werden. Fertig ist das dynamisch rekonfigurierbare System. &lt;br /&gt;
Die Implementierung des ContextResolvers kann wiederum lean selektiert werden &lt;img alt=&quot;(Zwinkern)&quot; src=&quot;http://wiki.rapidpm.org/s/de_DE-1988229788/4249/84a11b3502ae79dd6028856f37ff89838963c1cc.5/_/images/icons/emoticons/wink.png&quot; /&gt;  &lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-02&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>cdi.commons.fx -JavaFX/CDI Bootstrap</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="IDEA"/>
        <category label="IntelliJ"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="Weld"/>
        <published>2013-08-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/03/cdi.commons.fx-javafx-cdi-bootstrap.html&quot; rel=&quot;tag&quot;&gt;cdi.commons.fx -JavaFX/CDI Bootstrap&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-03&quot;&gt;2013-08-03&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;The both technologies JavaFX and CDI are greate for itself.. but how to combine them? How I can get managed JavaFX - controller instances? &lt;br /&gt;
Starting from the JavaFX – side, we have to implement the Class extending &lt;strong&gt;javafx.application.Application.&lt;/strong&gt; The importand method will be &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;public&lt;/code&gt; &lt;code&gt;void&lt;/code&gt; &lt;code&gt;start(Stage primaryStage) &lt;/code&gt;&lt;code&gt;throws&lt;/code&gt; &lt;code&gt;Exception&lt;/code&gt;&lt;/em&gt;&lt;/blockquote&gt;
&lt;code&gt;&lt;a href=&quot;https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/main/java/org/rapidpm/demo/cdi/commons/fx/CDIJavaFXBaseApplication.java?at=develop&quot; target=&quot;_blank&quot;&gt;CDIJavaFXBaseApplication&lt;/a&gt;&lt;/code&gt; &lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-spRH4z861ZQ/Uf12wRaYx5I/AAAAAAABTJI/dma-IzG6hho/s1600-h/image%25255B3%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-IKNxCJX9Ma8/Uf12wwRsReI/AAAAAAABTJQ/MQTcwt1GbIU/image_thumb%25255B1%25255D.png?imgmax=800&quot; height=&quot;274&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;  &lt;br /&gt;
&amp;nbsp; &lt;br /&gt;
With &lt;strong&gt;CDIContainerSingleton.getInstance()&lt;/strong&gt; you will get an instance of the Weld-Container. After the normal JavaFX – init&amp;nbsp; there will be an event fired with the primaryStage as attribute. Now the primaryStage is available in an managed environment. &lt;br /&gt;
JAvaFX –&amp;gt; CDI &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;&lt;code&gt;cdi.event()&lt;/code&gt;&lt;code&gt;.select(Stage.&lt;/code&gt;&lt;code&gt;class&lt;/code&gt;&lt;code&gt;, &lt;/code&gt;&lt;code&gt;new&lt;/code&gt; &lt;code&gt;AnnotationLiteral&amp;lt;CDIStartupScene&amp;gt;() {})&lt;/code&gt;&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;&lt;em&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .fire(primaryStage);&lt;/em&gt;&lt;/code&gt;&lt;/blockquote&gt;
The observer will catch this event. Hownthis will be donw, I show with the excample jUnit-test.&lt;br /&gt;
(&lt;a href=&quot;https://bitbucket.org/svenruppert/cdi-commons-fx/src/204e32a360b4090661e7871330921609b628205b/src/test/java/org/rapidpm/demo/cdi/commons/fx/JavaFXBaseTest.java?at=develop&quot; target=&quot;_blank&quot;&gt;JavaFXBaseTest&lt;/a&gt;)&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-pe3l8kSIZrI/Uf12xUqXCaI/AAAAAAABTJY/4qNT0JYh-5o/s1600-h/image%25255B7%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-mYyW73L1y7A/Uf12xkbSleI/AAAAAAABTJg/GrkqVjLTMhM/image_thumb%25255B3%25255D.png?imgmax=800&quot; height=&quot;345&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&amp;gt; testImpl(final Stage stage). The jUnit-Test will be a manged instance itself.&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-rIZgDI2CmZc/Uf12yFhNcaI/AAAAAAABTJo/xmDBb7Nilas/s1600-h/image%25255B11%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-ANX-6HvYjEk/Uf12y-vIj3I/AAAAAAABTJw/sbkL-wTuD-A/image_thumb%25255B5%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;636&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
But how to get the manged controller class instance?&lt;br /&gt;
This is done by the &lt;code&gt;&lt;strong&gt;FXMLLoaderSingleton used from the jUnit-test.&lt;/strong&gt;&lt;/code&gt;&lt;br /&gt;
&lt;blockquote&gt;
&lt;pre class=&quot;brush:java&quot;&gt;
final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;br /&gt;
During the process of loading the fxml-file the used FxmlLoader will get an instance of an ControllerFactory-Callback.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-81g1FPtpMV0/Uf12zchLfMI/AAAAAAABTJ4/UZ6beCx-JkE/s1600-h/image%25255B15%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-snchFSsAGE8/Uf12zxccG1I/AAAAAAABTKA/WmMrwTqTh50/image_thumb%25255B7%25255D.png?imgmax=800&quot; height=&quot;379&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
The importand lines are the following &lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-TW3PcealhwQ/Uf120NC8jFI/AAAAAAABTKI/8Tz8jER8lbU/s1600-h/image%25255B19%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-2vpQxC1vfnI/Uf1207BA-xI/AAAAAAABTKQ/f8jnqwb7CC0/image_thumb%25255B9%25255D.png?imgmax=800&quot; height=&quot;93&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt; &lt;br /&gt;
The ControllerFactory-&amp;gt;Callback.call() will give back a manged instance of the controller class.&lt;br /&gt;
Now you can use CDI inside the pojo-fx-controller class.&lt;br /&gt;


&lt;pre class=&quot;prettyprint&quot;&gt;
public class LoginController implements CDIJavaFxBaseController {
    // Standard FXML injected fields
 @FXML TextField loginField;
 @FXML PasswordField passwordField;
 @FXML Text feedback;
 
 // CDI Injected field
 @Inject LoginService loginService;
 
    // Default application parameters
 @Inject @CDIJavaFXBaseApp
    Parameters applicationParameters;
 
 @FXML protected void handleSubmitButtonAction(ActionEvent event) {
  feedback.setText(loginService.login(loginField.getText(), passwordField.getText()));
 }

 @Override
 public void initialize(URL location, ResourceBundle resources) {
  loginField.setText(applicationParameters.getNamed().get(&quot;user&quot;));
 }
}
&lt;/pre&gt;



&lt;br /&gt;
So we are done..&amp;nbsp; Happy coding ;-)&lt;br /&gt;
&lt;br /&gt;
UML-Diagramm&lt;br /&gt;
&lt;img alt=&quot;&quot; src=&quot;http://wiki.rapidpm.org/download/attachments/8093789/uml_fx_20130802_001.png?version=1&amp;amp;modificationDate=1375433878726&amp;amp;api=v2&quot; height=&quot;479&quot; width=&quot;640&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JavaFX/CDI Bootstrap - Add On</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="jUnit"/>
        <published>2013-08-14T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/14/javafx-cdi-bootstrap-add-on.html&quot; rel=&quot;tag&quot;&gt;JavaFX/CDI Bootstrap - Add On&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-14&quot;&gt;2013-08-14&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;A few days ago I was writing about the JavaFX/CDI Bootstrap. &lt;br /&gt;
There are a few small changings until now. &lt;br /&gt;
&lt;blockquote&gt;
&lt;em&gt;The final jUnit-Class (extends JavaFXBaseTest ) will implement the method –&amp;gt; testImpl(final Stage stage). &lt;/em&gt;&lt;br /&gt;
&lt;em&gt;The jUnit-Test will be a manged instance itself.&lt;/em&gt;&lt;/blockquote&gt;
This is right.. but I forgot to Inject the a few things.&lt;br /&gt;
First the JavaFX component that is managed:&lt;br /&gt;
The jUnit example (&lt;b&gt;CDIJavaFXBaseApplication001Test&lt;/b&gt;, you will find this at cdi-commons-fx) is using the LoginPane.&lt;br /&gt;
This is changed from an empty class to the following implementation&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: js&quot;&gt;&lt;![CDATA[
public class LoginPane extends GridPane {

    private @Inject FXMLLoaderSingleton fxmlLoaderSingleton;
    private @Inject LoginController controller;

    public LoginPane() {
    }

    @PostConstruct
    public void init(){
        final FXMLLoader fxmlLoader = fxmlLoaderSingleton.getFXMLLoader(LoginPane.class);
        fxmlLoader.setRoot(this);
        try {
            fxmlLoader.setController(controller);
            fxmlLoader.load();
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }
    }

    public LoginController getController() {
        return controller;
    }
}
]]&gt;&lt;/script&gt;
&lt;br /&gt;
Now you have to modify the fxml based on this first version.&lt;br /&gt;
&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: js&quot;&gt;&lt;![CDATA[
&lt;fx:root type=&quot;javafx.scene.layout.GridPane&quot; fx:controller=&quot;demo.LoginController&quot;
         alignment=&quot;CENTER&quot; hgap=&quot;10.0&quot; stylesheets=&quot;/demo/login.css&quot; vgap=&quot;10.0&quot;
          xmlns:fx=&quot;http://javafx.com/fxml&quot;
          &gt;

   &lt;!-- .... --&gt;

&lt;/fx:root&gt;
]]&gt;&lt;/script&gt;
&lt;br /&gt;
At this version you had to declare the controller itself. This can be done later by the init-phase. And the root – element was an pure GridPane.
&lt;br /&gt;
The new version looks like this:&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: js&quot;&gt;&lt;![CDATA[
&lt;fx:root type=&quot;demo.LoginPane&quot;
         alignment=&quot;CENTER&quot; hgap=&quot;10.0&quot; stylesheets=&quot;/demo/login.css&quot; vgap=&quot;10.0&quot;
          xmlns:fx=&quot;http://javafx.com/fxml&quot;&gt;

&lt;!-- .... --&gt;

&lt;/fx:root&gt;
]]&gt;&lt;/script&gt;

The root – element is now the self defined class LoginPane and the the controller definition is removed. So you can inject a controller at runtime depending on the ContextResolver.&lt;br /&gt;
&lt;br /&gt;
The jUnit-Test itself changed a little bit. At the first version we used the fxml-Loader to get the LoginPane.. This can now be done by an Inject. (@Inject LoginPane root; )&lt;br /&gt;
&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: js&quot;&gt;&lt;![CDATA[
        @Inject
        @CDISimpleDateFormatter(value = &quot;date.yyyyMMdd&quot;)
        SimpleDateFormat sdf;
        @Inject
        @CDILogger
        Logger logger;

        @Inject LoginPane root;

        @Override
        public void testImpl(Stage stage) {
            if (logger.isDebugEnabled()) {
                logger.debug(&quot;testrunn at -&gt; &quot; + sdf.format(new Date()));
            }
            stage.setTitle(&quot;Login&quot;);  //i18n
            stage.setScene(new Scene(root, 300, 275));
            //stage.show();
            final Scene scene = stage.getScene();

            //TestCode
            final TextField login = (TextField) scene.lookup(&quot;#loginField&quot;);
            login.setText(&quot;LOGIN&quot;);
            final PasswordField passwd = (PasswordField) scene.lookup(&quot;#passwordField&quot;);
            passwd.setText(&quot;LOGIN&quot;);

            final LoginController controller = root.getController();
            controller.handleSubmitButtonAction(new ActionEvent());

            final Text feedback = (Text) scene.lookup(&quot;#feedback&quot;);
            Assert.assertEquals(&quot;LOGIN logged in successfully&quot;, feedback.getText());
        }

]]&gt;&lt;/script&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-14&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IntelliJ IDEA 13 Early Preview is Out | JetBrains IntelliJ IDEA Blog</title>
        <published>2013-08-18T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/18/intellij-idea-13-early-preview-is-out-.html&quot; rel=&quot;tag&quot;&gt;IntelliJ IDEA 13 Early Preview is Out | JetBrains IntelliJ IDEA Blog&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-18&quot;&gt;2013-08-18&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;a href=&quot;http://blogs.jetbrains.com/idea/2013/05/intellij-idea-13-early-preview-is-out/&quot;&gt;IntelliJ IDEA 13 Early Preview is Out | JetBrains IntelliJ IDEA Blog&lt;/a&gt;: &lt;br /&gt;
&lt;img src=&quot;http://blogs.jetbrains.com/idea/wp-content/uploads/2013/05/screen-shot-2013-05-16-at-110708-am.png&quot; style=&quot;border: none;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://chrome.google.com/webstore/detail/pengoopmcjnbflcjbmoeodbmoflcgjlk&quot; style=&quot;font-size: 13px;&quot;&gt;'via Blog this'&lt;/a&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-18&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Finally at maven-central available</title>
        <published>2013-08-24T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/24/finally-at-maven-central-available.html&quot; rel=&quot;tag&quot;&gt;Finally at maven-central available&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-24&quot;&gt;2013-08-24&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;Finally we are available at the official maven repo.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/-QUMaXMh7Ve0/Uhh9hSALAvI/AAAAAAABTMU/FKxY4_ZjIzA/s1600-h/image%25255B6%25255D.png&quot;&gt;&lt;img title=&quot;image&quot; style=&quot;border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://lh5.ggpht.com/-x0FXump4Yys/Uhh9iK7IVNI/AAAAAAABTMY/Tra-Q5hubSY/image_thumb%25255B4%25255D.png?imgmax=800&quot; width=&quot;644&quot; height=&quot;384&quot;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Additionally we changed some pieces of our infrastructure.&lt;/p&gt; &lt;p&gt;The different bitbucket git repos are now merged to one called RapidPM-Modules.&lt;/p&gt; &lt;p&gt;You can find this at (&lt;a href=&quot;https://bitbucket.org/rapidpm/modules&quot; target=&quot;_blank&quot;&gt;BItbucket-RapidPM-Modules&lt;/a&gt;). The old repos are deleted and with an info message that ist redirecting to the new one&lt;/p&gt; &lt;p&gt;The issuetracking is back at &lt;a href=&quot;http://jira.rapidpm.org&quot; target=&quot;_blank&quot;&gt;http://jira.rapidpm.org&lt;/a&gt;.&lt;/p&gt;  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-24&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>RapidPM Modules is added to our CI</title>
        <category label="CI"/>
        <category label="Jetbrains"/>
        <category label="RapidPM"/>
        <category label="TeamCity"/>
        <published>2013-08-27T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/27/rapidpm-modules-is-added-to-our-ci.html&quot; rel=&quot;tag&quot;&gt;RapidPM Modules is added to our CI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-27&quot;&gt;2013-08-27&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Now we are happy to say, that RapidPM Modules is available at our TeamCity-Server. (&lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot;&gt;Thx JetBrains&lt;/a&gt;) &lt;br /&gt;
&lt;a href=&quot;http://teamcity.rapidpm.org/viewType.html?buildTypeId=MOD_ModulesDevelop&quot;&gt;http://teamcity.rapidpm.org/viewType.html?buildT&lt;/a&gt;&lt;a href=&quot;http://teamcity.rapidpm.org/viewType.html?buildTypeId=MOD_ModulesDevelop&quot;&gt;ypeId=MOD_ModulesDevelop&lt;/a&gt; (please login as guest) &lt;br /&gt;
&lt;br /&gt;
 &lt;a href=&quot;http://lh3.ggpht.com/-GN8ZP-7QF98/Uh0eVU5sk9I/AAAAAAABTTI/9oZSs0JyOms/s1600-h/image%25255B5%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-GJDRqQYM7t4/Uh0eWLh9OxI/AAAAAAABTTQ/4Wm5AT43aGg/image_thumb%25255B3%25255D.png?imgmax=800&quot; height=&quot;413&quot; style=&quot;border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline;&quot; title=&quot;image&quot; width=&quot;1028&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-27&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>How to setup a JavaFX / CDI Component</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="Weld"/>
        <published>2013-08-30T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/08/30/how-to-setup-a-javafx-cdi-component.html&quot; rel=&quot;tag&quot;&gt;How to setup a JavaFX / CDI Component&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-08-30&quot;&gt;2013-08-30&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;With cdi-commons it is very easy to start with an JavaFX / CDI Component/Application.&lt;br /&gt;
As an example we will start with an small Table-App with i18n and CDI.&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-5_UEi4MPRqU/UiBXeUvOy8I/AAAAAAABTTg/YGS8XJvlXHE/s1600-h/image%25255B4%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-9eP1fWM5Mq4/UiBXfE6n4nI/AAAAAAABTTo/hYmHY3_DOg8/image_thumb%25255B2%25255D.png?imgmax=800&quot; height=&quot;118&quot; style=&quot;background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;244&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
You need the following steps:&lt;br /&gt;
01) create the empty Controller;&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-h_lnfIW1bP0/UiBcdWdzE3I/AAAAAAABTT4/Xjqng3D10bQ/s1600-h/image%25255B4%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-Qi1cIozCosk/UiBcd3dxqZI/AAAAAAABTUA/k1vZxh__QFo/image_thumb%25255B1%25255D.png?imgmax=800&quot; height=&quot;120&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
02) create the Root JavaFX Component&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-pyWO2opZ9SA/UiBceQb_ILI/AAAAAAABTUE/k50-cXu8ltU/s1600-h/image%25255B8%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-oXnNYmOYEwc/UiBcenXuo5I/AAAAAAABTUQ/HJuxITXt-zA/image_thumb%25255B3%25255D.png?imgmax=800&quot; height=&quot;111&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
03) create the fxml-file&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-GXCDEVy2Ve0/UiBcfIO5TlI/AAAAAAABTUY/SshqU6AVNXg/s1600-h/image%25255B15%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-3h_Uv3Dzxj0/UiBcf8T4FjI/AAAAAAABTUc/u3tYtlsIWJk/image_thumb%25255B6%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;612&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
04) create the i18n-properties&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-mRhBaxlqpC0/UiBcgJ1aI-I/AAAAAAABTUk/otKEBYNGIDM/s1600-h/image%25255B19%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-guqrvakcjms/UiBcg2nyZfI/AAAAAAABTUw/FhecBnTk40A/image_thumb%25255B8%25255D.png?imgmax=800&quot; height=&quot;75&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
05) create the KeyMapper-Class&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-atTY5fiaq_0/UiBchsr1r5I/AAAAAAABTU0/6aBTpP3jx70/s1600-h/image%25255B23%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-UN-1I-kG89A/UiBch5mI93I/AAAAAAABTU8/q4xcsQ50xeI/image_thumb%25255B10%25255D.png?imgmax=800&quot; height=&quot;80&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
06) create the transient Row-Class&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-RsZmGPbhFHk/UiBcifod8fI/AAAAAAABTVE/QerSAvdrYMc/s1600-h/image%25255B27%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-Hd0sCxIFHwI/UiBcjCxqRTI/AAAAAAABTVM/OoEW7vOupG0/image_thumb%25255B12%25255D.png?imgmax=800&quot; height=&quot;240&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
07) create the TableFilters&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-WZTIZm0jXL4/UiBcj_3fP7I/AAAAAAABTVQ/Pm8fDRz5zi8/s1600-h/image%25255B31%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-X-lxpy-bQ9k/UiBckeMSjqI/AAAAAAABTVY/zIFqN7MIrXI/image_thumb%25255B14%25255D.png?imgmax=800&quot; height=&quot;303&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-4j7YmxgvjW4/UiBckqbYfFI/AAAAAAABTVk/ZULr7ynlrQI/s1600-h/image%25255B35%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-jTw5ELuINIo/UiBclVVyEKI/AAAAAAABTVo/xBZ9ZlaS9r4/image_thumb%25255B16%25255D.png?imgmax=800&quot; height=&quot;463&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
08) create the RowComparator&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-KlUGUuDtrok/UiBcliRMB1I/AAAAAAABTVw/ltV7dDzcftc/s1600-h/image%25255B39%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-Ss-lT9MR8kc/UiBcmBCBd_I/AAAAAAABTV8/7WPFpEiFlO8/image_thumb%25255B18%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;597&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
09) create the DemoDataBuilder&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-i_PHNnfPiM8/UiBcmlZx4wI/AAAAAAABTWA/Webh62iZyG0/s1600-h/image%25255B43%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh6.ggpht.com/-EsCNI3UlX0g/UiBcnDjFDhI/AAAAAAABTWM/_0v-REDYjm8/image_thumb%25255B20%25255D.png?imgmax=800&quot; height=&quot;258&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
10) implement the Controller methods&lt;br /&gt;
&lt;a href=&quot;http://lh4.ggpht.com/-HV0HNafku7A/UiBcnpsx3gI/AAAAAAABTWU/1kaLaDNhyvc/s1600-h/image%25255B47%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-7FId4UwLKss/UiBcoVG5XYI/AAAAAAABTWc/KBhjh1BLT00/image_thumb%25255B22%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;552&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
11) create the jUnit Test-Class&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-oOHz685ypLU/UiBco0QD5GI/AAAAAAABTWg/nZLFC0X8Dts/s1600-h/image%25255B51%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-RBGhQ0MJ9XM/UiBcpaR7sHI/AAAAAAABTWs/nu0UjOo2NuI/image_thumb%25255B24%25255D.png?imgmax=800&quot; height=&quot;280&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
12) start implementing the Workflows….&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-08-30&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Introducing Vaadin: Validation</title>
        <category label="Client"/>
        <category label="Integer"/>
        <category label="Vaadin"/>
        <category label="Validation"/>
        <published>2013-09-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/03/introducing-vaadin--validation.html&quot; rel=&quot;tag&quot;&gt;Introducing Vaadin: Validation&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-03&quot;&gt;2013-09-03&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Let's talk about validation in Vaadin.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    Context&lt;/h3&gt;
We want to have a textfield which is marked as a &quot;required&quot; field and which expects integer values from 0 - 99. The user should get feedback&lt;b&gt; right after&lt;/b&gt; he entered something into the field.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    Implementation&lt;/h3&gt;
Here's the &lt;b&gt;complete&lt;/b&gt; code of the module:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@SuppressWarnings(&quot;serial&quot;)
public class MyVaadinUI extends UI
{
    @Override
    protected void init(VaadinRequest request) {
        final TextField textField = new TextField(&quot;Enter an Integer value (0-99)&quot;);
        final FormLayout mainLayout = new FormLayout(textField);
        textField.setConverter(Integer.class);
        textField.addValidator(new IntegerRangeValidator(&quot;only integer, 0-99&quot;, 0, 99));
        textField.setRequired(true);
        textField.setImmediate(true);
        setContent(mainLayout);
    }
}&lt;/pre&gt;
&lt;pre&gt;-----&lt;/pre&gt;
&lt;b&gt;1&lt;/b&gt; Class&lt;br /&gt;
&lt;b&gt;7&lt;/b&gt; Lines of active code&lt;br /&gt;
&lt;b&gt;4&lt;/b&gt; &lt;b&gt;lines of code configuring the TextField (!)&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;


&lt;br /&gt;
&lt;h3&gt;
    Result&lt;/h3&gt;
A red asterisk marks the field as required. After the user entered something into the field and the focus on the field is lost there is immediate feedback for the user.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-kaGZ1yDPL1w/UiWPpgSq8cI/AAAAAAAAAA4/JDAld5eiR3s/s1600/integererror.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;49&quot; src=&quot;http://3.bp.blogspot.com/-kaGZ1yDPL1w/UiWPpgSq8cI/AAAAAAAAAA4/JDAld5eiR3s/s320/integererror.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-NRcIVBy4mok/UiWPrWwaSpI/AAAAAAAAABA/293Fvk1KC58/s1600/stringerror.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;43&quot; src=&quot;http://3.bp.blogspot.com/-NRcIVBy4mok/UiWPrWwaSpI/AAAAAAAAABA/293Fvk1KC58/s320/stringerror.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-ErrK4ESPlyY/UiWPswcs6LI/AAAAAAAAABI/GVKcV_524Eo/s1600/noerror.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;45&quot; src=&quot;http://1.bp.blogspot.com/-ErrK4ESPlyY/UiWPswcs6LI/AAAAAAAAABI/GVKcV_524Eo/s320/noerror.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Does it look pretty? meh..&lt;br /&gt;
Does it work at a minimum of spent work and time? 4 lines of code?! Yea!&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>MultiLevel DrillDownPieChart in less then 30min as component for TableViews</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <category label="TableView"/>
        <category label="Weld"/>
        <published>2013-09-03T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/03/multilevel-drilldownpiechart-in-less-t.html&quot; rel=&quot;tag&quot;&gt;MultiLevel DrillDownPieChart in less then 30min as component for TableViews&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-03&quot;&gt;2013-09-03&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;The full code and demo jUnit you will find under :&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/src/265b5f577e8f9b5a875408a9659d58a02f72b1af/javafx-chart-pie-drilldown?at=develop&quot; target=&quot;_blank&quot;&gt;BitBucket Repo - RapidPM - Modules - javafx-chart-pie-drilldown&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;Please use the develop branch and a commit after&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/commits/265b5f577e8f9b5a875408a9659d58a02f72b1af?at=develop&quot;&gt;265b5f5&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;br /&gt;
Sometimes you want to have a drill down pi chart for a tableview. This code often looks like the following &lt;br /&gt;
(example from the oracle side)&lt;br /&gt;
&lt;a href=&quot;http://lh5.ggpht.com/-5KuGN_tnaic/UiYI9GTqX6I/AAAAAAABTXI/CKp7qJaPg8M/s1600-h/image%25255B3%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-ydmWK3GgtJk/UiYI9gFkecI/AAAAAAABTXM/tsHeNgJAvL0/image_thumb%25255B1%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;530&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
What you can see, is the direct way of putting the data together for each drilldown-level.&lt;br /&gt;
But if you want to drill down more than one level.. the code will be long.&lt;br /&gt;
For this example I am using the following demo data table.&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-Dln9HPL38mw/UiYI-gzJA7I/AAAAAAABTXY/l7uE_hEpjOc/s1600-h/image%25255B8%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-SnrHBEPMMHM/UiYI_MHshTI/AAAAAAABTXc/jFwz7iu2k_w/image_thumb%25255B4%25255D.png?imgmax=800&quot; height=&quot;244&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;231&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
What I want to reach is a short way for a developer to aggregate from one row to an other (in both directions)&lt;br /&gt;
Here the pie–chart for this demo data and clicking the following steps:&lt;br /&gt;
Rows: Vorname-&amp;gt;Nachname-&amp;gt;Datum-&amp;gt;Betrag &lt;br /&gt;
Data: Holger-&amp;gt;Hoppel-&amp;gt;2013.10.01-&amp;gt;122.0 &lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-M8cJy_3fHmw/UiYI_txlqdI/AAAAAAABTXo/RRn5gXIi2LU/s1600-h/image%25255B11%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-CQyGxK2HMYI/UiYJAPlSEII/AAAAAAABTXs/ZZZHHNwgSFE/image_thumb%25255B5%25255D.png?imgmax=800&quot; height=&quot;244&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;206&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://lh4.ggpht.com/-2_gTKMNX8mE/UiYJApNHhRI/AAAAAAABTX4/WFwxYSfYKUY/s1600-h/image%25255B14%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-FKGgdz6m5Co/UiYJBcGFtsI/AAAAAAABTYA/3Kyxlx2ij9Q/image_thumb%25255B6%25255D.png?imgmax=800&quot; height=&quot;244&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;191&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://lh4.ggpht.com/-IUAsBkI3mcs/UiYJCFnpZSI/AAAAAAABTYI/ILGKNlZsSsU/s1600-h/image%25255B17%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-K3YgnWkqaZM/UiYJCmmseGI/AAAAAAABTYQ/hDD7FDcvN90/image_thumb%25255B7%25255D.png?imgmax=800&quot; height=&quot;244&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;221&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://lh5.ggpht.com/-uIxOkfx3ZxU/UiYJDFf2Z7I/AAAAAAABTYY/hNh3S0nL0yo/s1600-h/image%25255B21%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh5.ggpht.com/-YUPfZV8MP3U/UiYJD_HH73I/AAAAAAABTYg/ZtSsq2GJljo/image_thumb%25255B9%25255D.png?imgmax=800&quot; height=&quot;244&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;244&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
You can see, that for each level you will get the aggregated data from the table..&amp;nbsp; But how to do it?&lt;br /&gt;
The basic is the Aggregator-Class&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public abstract class MapAggregator&lt;T, K&gt; {

    private @Inject @CDILogger Logger logger;

    public abstract K getKeyElement(T t);

    public Map&lt;K, List&lt;T&gt;&gt; aggregate(final Collection&lt;T&gt; dataCollection) {
        final Map&lt;K, List&lt;T&gt;&gt; result = new HashMap&lt;&gt;();
        for (final T dataObject : dataCollection) {
            final K key = getKeyElement(dataObject);
            if (result.containsKey(key)) {
                if (logger.isDebugEnabled()) {
                    logger.debug(&quot;key schon vorhanden -&gt; &quot; + key);
                }
            } else {
                result.put(key, new ArrayList&lt;T&gt;());
            }
            result.get(key).add(dataObject);
        }
        return result;
    }
}
]]&gt;&lt;/script&gt;
&lt;br /&gt;
&lt;span class=&quot;nt&quot; style=&quot;background-color: ghostwhite; color: navy; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 14px; line-height: 19px; white-space: pre;&quot;&gt;&lt;/span&gt;

With this you can aggregate a collection to a map. The key is the aggregated value from the collection elements.&lt;br /&gt;
For this example: A Collection of the TransientDemoDataRow (Collection&lt;transientdemodatarow&gt;) aggregated over the attribute vorname.&lt;/transientdemodatarow&gt;&lt;br /&gt;

&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public class TransientDemoDataRow {


    private String vorname;
    private String nachname;
    private String datum;
    private Double betrag;

    @PostConstruct
    public void init() {

    }

    public String getVorname() {
        return vorname;
    }

    public void setVorname(String vorname) {
        this.vorname = vorname;
    }

    public String getNachname() {
        return nachname;
    }

    public void setNachname(String nachname) {
        this.nachname = nachname;
    }

    public String getDatum() {
        return datum;
    }

    public void setDatum(String datum) {
        this.datum = datum;
    }

    public Double getBetrag() {
        return betrag;
    }

    public void setBetrag(Double betrag) {
        this.betrag = betrag;
    }
}
]]&gt;&lt;/script&gt;
With our demo data table you will get a map with two collections. &lt;br /&gt;
a) Holger –&amp;gt; List of 6 elements&lt;br /&gt;
b) Willi –&amp;gt; List of 4 elements&lt;br /&gt;
This is the data for the first level of the DrillDownPieChart. (first pic of the pie charts see above)&lt;br /&gt;
For our DrillDownPieChart we are using the following aggregator extending the MapAggregator&lt;t&gt;.&lt;/t&gt;&lt;br /&gt;
&lt;t&gt;&lt;/t&gt;&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public abstract class DrillDownPieChartMapAggregator&lt;T&gt; extends MapAggregator&lt;T, String&gt; {


    /**
     * Calculate the Value for the PiChart.Data based on the aggregated values
     *
     * @param aggregatedValues
     * @return
     */
    public abstract double aggregateValue(List&lt;T&gt; aggregatedValues);

    public abstract String getLevelName();

    private DrillDownPieChartMapAggregator&lt;T&gt; nextLevelAggregator;
    private DrillDownPieChartMapAggregator&lt;T&gt; parentLevelAggregator;

    public DrillDownPieChartMapAggregator&lt;T&gt; getNextLevelAggregator() {
        return nextLevelAggregator;
    }

    public DrillDownPieChartMapAggregator&lt;T&gt; getParentLevelAggregator() {
        return parentLevelAggregator;
    }

    public void setNextLevelAggregator(DrillDownPieChartMapAggregator&lt;T&gt; nextLevelAggregator) {
        this.nextLevelAggregator = nextLevelAggregator;
        this.nextLevelAggregator.parentLevelAggregator = this;
    }

    public boolean isLastOne() {
        if (nextLevelAggregator == null) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isFirstOne() {
        if (parentLevelAggregator == null) {
            return true;
        } else {
            return false;
        }
    }

}
]]&gt;&lt;/script&gt;
&lt;br /&gt;
We are holding the reference to the next level aggregator and the reference to the parent aggregator.&lt;br /&gt;
To implement the aggregator for each col. we want to use for our DrillDownPieChart we have to write code like the following&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public static class BetragAggregator extends DrillDownPieChartMapAggregator&lt;TransientDemoDataRow&gt; {
        @Override public double aggregateValue(List&lt;TransientDemoDataRow&gt; aggregatedValues) {
            double betrag = 0;
            for (final TransientDemoDataRow aggregatedValue : aggregatedValues) {
                betrag = betrag + aggregatedValue.getBetrag();
            }
            return betrag;
        }

        @Override public String getLevelName() {
            return &quot;Betrag&quot;;
        }

        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getBetrag() + &quot; € Beträge&quot;;
        }
    }

    public static class DatumAggregator extends DrillDownPieChartMapAggregator&lt;TransientDemoDataRow&gt; {
        @Override public double aggregateValue(List&lt;TransientDemoDataRow&gt; aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return &quot;Datum&quot;;
        }
        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getDatum();
        }
    }

    public static class VornameAggregator extends DrillDownPieChartMapAggregator&lt;TransientDemoDataRow&gt; {
        @Override public double aggregateValue(List&lt;TransientDemoDataRow&gt; aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return &quot;Vorname&quot;;
        }

        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getVorname();
        }
    }


    public static class NachnameAggregator extends DrillDownPieChartMapAggregator&lt;TransientDemoDataRow&gt; {
        @Override public double aggregateValue(List&lt;TransientDemoDataRow&gt; aggregatedValues) {
            return aggregatedValues.size();
        }

        @Override public String getLevelName() {
            return &quot;Nachname&quot;;
        }
        @Override public String getKeyElement(TransientDemoDataRow transientDemoDataRow) {
            return transientDemoDataRow.getNachname();
        }
    }

]]&gt;&lt;/script&gt;
&lt;br /&gt;
The method getLevelName is to label the PieChart for the user.&lt;br /&gt;
The method getKeyElement is the value used for the aggregation.&lt;br /&gt;
The method aggregateValue is to calculate the double, used by the pie chart as value.&lt;br /&gt;
After this you have to put all together… the logic-part is done now..&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public class DrillDownPieChartPaneController implements CDIJavaFxBaseController {

    @FXML DemoDrillDownPieChart piechart;


    @Inject Instance&lt;VornameAggregator&gt; vornameAggregatorInstance;
    @Inject Instance&lt;NachnameAggregator&gt; nachnameAggregatorInstance;
    @Inject Instance&lt;DatumAggregator&gt; datumAggregatorInstance;
    @Inject Instance&lt;BetragAggregator&gt; betragAggregatorInstance;


    @Override public void initialize(URL url, ResourceBundle resourceBundle) {

        //setze Aggregatoren
        final VornameAggregator vornameAggregator = vornameAggregatorInstance.get();

        final NachnameAggregator nachnameAggregator = nachnameAggregatorInstance.get();
        vornameAggregator.setNextLevelAggregator(nachnameAggregator);

        final DatumAggregator datumAggregator = datumAggregatorInstance.get();
        nachnameAggregator.setNextLevelAggregator(datumAggregator);

        final BetragAggregator betragAggregator = betragAggregatorInstance.get();
        datumAggregator.setNextLevelAggregator(betragAggregator);

        piechart.setRootAggregator(vornameAggregator);

    }


    public void init() {
        piechart.init();
    }

]]&gt;&lt;/script&gt;
The gui part looks like this: Extending the DrillDownPieChart with the type you need as data holder, here the TransientDemoDataRow.&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
public class TransientDemoDataRow {


    private String vorname;
    private String nachname;
    private String datum;
    private Double betrag;

    @PostConstruct
    public void init() {

    }

    public String getVorname() {
        return vorname;
    }

    public void setVorname(String vorname) {
        this.vorname = vorname;
    }

    public String getNachname() {
        return nachname;
    }

    public void setNachname(String nachname) {
        this.nachname = nachname;
    }

    public String getDatum() {
        return datum;
    }

    public void setDatum(String datum) {
        this.datum = datum;
    }

    public Double getBetrag() {
        return betrag;
    }

    public void setBetrag(Double betrag) {
        this.betrag = betrag;
    }
}
]]&gt;&lt;/script&gt;
and putting it to a fxml file.&lt;br /&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: javafx&quot;&gt;&lt;![CDATA[
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;?import gui.org.rapidpm.modul.javafx.chart.pie.drilldown.DemoDrillDownPieChart?&gt;
&lt;?import javafx.scene.control.Label?&gt;
&lt;?import javafx.scene.layout.AnchorPane?&gt;
&lt;?import javafx.scene.layout.VBox?&gt;
&lt;fx:root type=&quot;gui.org.rapidpm.modul.javafx.chart.pie.drilldown.DrillDownPieChartPane&quot;
         fx:id=&quot;DrillDownPieChartPane&quot; xmlns:fx=&quot;http://javafx.com/fxml&quot; style=&quot;-fx-background-color:#EEEEEE&quot;&gt;

    &lt;children&gt;
        &lt;AnchorPane minHeight=&quot;0.0&quot; minWidth=&quot;0.0&quot; VBox.vgrow=&quot;ALWAYS&quot;
                    AnchorPane.bottomAnchor=&quot;0.0&quot; AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot; AnchorPane.topAnchor=&quot;0.0&quot;&gt;
            &lt;children&gt;
                &lt;Label text=&quot;hallo Hier bin ich&quot;/&gt;
                &lt;DemoDrillDownPieChart fx:id=&quot;piechart&quot;&gt;

                &lt;/DemoDrillDownPieChart&gt;
            &lt;/children&gt;
        &lt;/AnchorPane&gt;
    &lt;/children&gt;
&lt;/fx:root&gt;
]]&gt;&lt;/script&gt;
ready…&amp;nbsp; &lt;br /&gt;
&lt;br /&gt;
The steps for a developer are:&lt;br /&gt;
1) writing the transient data holder for an row –&amp;gt; TransientDemoDataRow&lt;br /&gt;
2) extending the DrillDownPieChart –&amp;gt; DemoDrillDownPieChart extends&lt;transientdemodatarow&gt;&lt;/transientdemodatarow&gt;&lt;br /&gt;
3) extending the DrillDownPieChartMapAggregator –&amp;gt; NachnameAggregator extends DrillDownPieChartMapAggregator&lt;transientdemodatarow&gt;&lt;/transientdemodatarow&gt;&lt;br /&gt;
4) putting all aggregator implementations together –&amp;gt; Controller – Class&lt;br /&gt;
5) add the element to the fxml file, &lt;br /&gt;
6) init() and ready&lt;br /&gt;
For a normal TableView with a handfull of rows you will need less than 30 min.&lt;br /&gt;
&lt;br /&gt;
The basic classes to use for an developer:&lt;br /&gt;
&lt;a href=&quot;http://lh3.ggpht.com/-SJ-pDNpLOMc/UiYJNA9ohpI/AAAAAAABTaY/ofUQV5uIuEk/s1600-h/image%25255B54%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh4.ggpht.com/-WMXinq5fTd8/UiYJNoBLSEI/AAAAAAABTag/WlbvOUwDZsk/image_thumb%25255B26%25255D.png?imgmax=800&quot; height=&quot;484&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;513&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
All classes from the jUnit demo available at the javafx-chart-pie-drilldown module.&lt;br /&gt;
&lt;a href=&quot;http://lh6.ggpht.com/-lP1udVyDMVA/UiYJOSIqFfI/AAAAAAABTao/rEssoxks5Gs/s1600-h/image%25255B58%25255D.png&quot;&gt;&lt;img alt=&quot;image&quot; border=&quot;0&quot; src=&quot;http://lh3.ggpht.com/-LiWMRqCVT5A/UiYJPDrwyVI/AAAAAAABTaw/huD7OwGJooI/image_thumb%25255B28%25255D.png?imgmax=800&quot; height=&quot;362&quot; style=&quot;background-image: none; border-bottom: 0px; border-left: 0px; border-right: 0px; border-top: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot; title=&quot;image&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI - ComboBoxCell - How to reduce 80% of code</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="FilteredTableView"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <category label="TableView"/>
        <category label="Weld"/>
        <published>2013-09-06T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/06/cdi-comboboxcell-how-to-reduce-80%-of-.html&quot; rel=&quot;tag&quot;&gt;CDI - ComboBoxCell - How to reduce 80% of code&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-06&quot;&gt;2013-09-06&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;The full code and demo jUnit you will find under :&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/src/aec4f95e0ae3130f62bc79170c0233cf49e43299/javafx-filtered-tableview?at=develop&quot; target=&quot;_blank&quot;&gt;BitBucket Repo - RapidPM - Modules - javafx-filtered-tableview&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;Please use the develop branch and a commit after&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/commits/265b5f577e8f9b5a875408a9659d58a02f72b1af?at=develop&quot;&gt;aec4f95&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Today I had a TableView with the following function.&lt;br /&gt;
- In one column there was a ComboBoxCell.&lt;br /&gt;
- The values of this ComboBox was calculated / loaded at the moment the combobox was used.&lt;br /&gt;
- Each ComboBox will have different values based on the context of this row.&lt;br /&gt;
&lt;br /&gt;
The first version was something like this:&lt;br /&gt;
A ComboBoxCell:&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class LegacyBetragComboBoxCell extends ComboBoxTableCell&lt;TransientDemoDataRow, Double&gt; {

    private @Inject @CDILogger Logger logger;
    private boolean readOnlyView = false;

    @Inject Instance&lt;contextlogic&gt; contextLogicInstance; //some injected business logic;

    @Override
    public void updateItem(Double o, boolean b) {
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;ComboBoxTableCell-&gt;updateItem &quot; + o);
        }
        super.updateItem(o, b);
        if (o == null) {
            //
        } else {
            final TableRow tableRow = getTableRow();
            final TransientDemoDataRow row = (TransientDemoDataRow) tableRow.getItem();
            getItems().clear();
            if (row.getBetrag() == null || row.getBetrag().isInfinite() || row.getBetrag().isNaN()) {
                this.setDisable(true);
            } else if (readOnlyView) {
                this.setDisable(true);
            } else {
                final ContextLogic contextLogic = contextLogicInstance.get();
                final List&lt;double&gt; doubleList = contextLogic.workOnContext(row.getBetrag());

                getItems().addAll(doubleList);

                this.setDisable(false);
            }
            //application logic on row itself
            //application logic external
        }
    }


    public boolean isReadOnlyView() {
        return readOnlyView;
    }

    public void setReadOnlyView(boolean readOnlyView) {
        this.readOnlyView = readOnlyView;
    }
}
]]&gt;&lt;/script&gt;


and the code called from the controller:&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
    @Inject Instance&lt;legacybetragcomboboxcell&gt; legacyBetragComboBoxCellInstance;

    private void initTable() {
        final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
        for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
            if(column.getText().equals(&quot;betrag&quot;)){
                final TableColumn&lt;TransientDemoDataRow, Double&gt; colTyped =(TableColumn&lt;TransientDemoDataRow, Double&gt;) column;
                colTyped.setCellFactory(new Callback&lt;TableColumn&lt;TransientDemoDataRow, Double&gt;, TableCell&lt;TransientDemoDataRow, Double&gt;&gt;() {
                    @Override public TableCell&lt;TransientDemoDataRow, Double&gt; call(TableColumn&lt;TransientDemoDataRow, Double&gt; transientDemoDataRowTableColumn) {
                        final LegacyBetragComboBoxCell cell = legacyBetragComboBoxCellInstance.get();
                        cell.setComboBoxEditable(false);  //true if you want bidirectional dataflow
                        return  cell;
                    }
                });

            } else{
                //other col
            }
        }
    }
]]&gt;&lt;/script&gt;

&lt;br /&gt;
This is to much boilerplate code. So I started to reduce it.&lt;br /&gt;
&lt;br /&gt;
First step was reducing the generics..&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
    @Inject Instance&lt;betragcomboboxcell&gt; betragComboBoxCellInstance;

    private void initTable() {
        final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
        for (final TableColumn column : columns) {
            if (column.getText().equals(&quot;betrag&quot;)) {
                column.setCellFactory(new Callback&lt;TableColumn, TableCell&gt;() {
                    @Override public TableCell call(TableColumn tableColumn) {
                        final BetragComboBoxCell cell = betragComboBoxCellInstance.get();
                        cell.setComboBoxEditable(false);  //true if you want bidirectional dataflow
                        return cell;
                    }
                });

            } else {
                //other col
            }
        }
    }
]]&gt;&lt;/script&gt;
This is shorter, but not better...&amp;nbsp;
&lt;br /&gt;
&lt;br /&gt;
The solution is the abstract GenericComboBoxCell. (part of the &lt;a href=&quot;https://bitbucket.org/rapidpm/modules/src/cd6e925b21196fc3e3a5f7b26abe879ed6add129/javafx-filtered-tableview?at=develop&quot; target=&quot;_blank&quot;&gt;javafx-filtered-tableview module&lt;/a&gt;)&lt;br /&gt;
&lt;br /&gt;
Iterating over the columns are now part of the GenericComboBoxCell, and here will be the typesave code.&lt;br /&gt;
&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public abstract class GenericComboBoxCell&lt;RT, VT&gt; extends ComboBoxTableCell&lt;RT, VT&gt; {

    private @Inject @CDILogger Logger logger;
    private boolean readOnlyView = false;

    @Override
    public void updateItem(VT o, boolean b) {
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;ComboBoxTableCell-&gt;updateItem &quot; + o);
        }
        super.updateItem(o, b);
        if (o == null) {
            //
        } else {
            final TableRow tableRow = getTableRow();
            final RT row = (RT) tableRow.getItem();
            getItems().clear();
            if (disableComboBox(row)) {
                this.setDisable(true);
            } else if (readOnlyView) {
                this.setDisable(true);
            } else {

                final List&lt;vt&gt; comboBoxValues = createComboBoxValues(row);
                getItems().addAll(comboBoxValues);

                this.setDisable(false);
            }
            workOnRowItself(row);
        }
    }

    public void associateWithCol(final TableView&lt;rt&gt; tableView, final String colName) {
        final ObservableList&lt;TableColumn&lt;RT, ?&gt;&gt; columns = tableView.getColumns();
        for (final TableColumn&lt;RT, ?&gt; column : columns) {
            final String columnText = column.getText();
            if (columnText.equals(colName)) {
                if (logger.isDebugEnabled()) {
                    logger.debug(&quot;associating to col &quot; + columnText);
                }
                associate((TableColumn&lt;RT, VT&gt;) column);
            } else {
                if (logger.isDebugEnabled()) {
                    logger.debug(&quot;not binding to this col : &quot; + columnText);
                }
            }
        }
    }

    private void associate(TableColumn&lt;RT, VT&gt; column) {
        column.setCellFactory(new Callback&lt;TableColumn&lt;RT, VT&gt;, TableCell&lt;RT, VT&gt;&gt;() {
            @Override
            public TableCell&lt;RT, VT&gt; call(TableColumn&lt;RT, VT&gt; rtTableColumn) {
                final GenericComboBoxCell&lt;RT, VT&gt; mySelf = getComboBoxCellRef();
                mySelf.setComboBoxEditable(false);
                mySelf.setReadOnlyView(readOnlyView);
                return mySelf;
            }
        });
    }

    protected abstract GenericComboBoxCell&lt;RT, VT&gt; getComboBoxCellRef();

    /**
     * logic to disable the combobox, for example if the value ist null or ...
     *
     * @return
     */
    public abstract boolean disableComboBox(final RT row);

    public abstract List&lt;vt&gt; createComboBoxValues(final RT row);

    public abstract void workOnRowItself(final RT row);


    public boolean isReadOnlyView() {
        return readOnlyView;
    }

    public void setReadOnlyView(boolean readOnlyView) {
        this.readOnlyView = readOnlyView;
    }
}
]]&gt;&lt;/script&gt;

The developer must extend this class and has to implement the following methods only:&lt;br /&gt;
- protected abstract GenericComboBoxCell&lt;rt vt=&quot;&quot;&gt; getComboBoxCellRef();&amp;nbsp;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;- public abstract boolean disableComboBox(final RT row); (optional)&amp;nbsp;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;- public abstract List&lt;vt&gt; createComboBoxValues(final RT row);&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;- public abstract void workOnRowItself(final RT row); (optional)&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;A demo implementation is shown here:&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class BetragComboBoxCell extends GenericComboBoxCell&lt;TransientDemoDataRow, Double&gt; {

    @Inject Instance&lt;contextlogic&gt; contextLogicInstance; //business logic
    @Inject Instance&lt;betragcomboboxcell&gt; betragComboBoxCellInstance; //the cell instance itself

    @Override
    protected GenericComboBoxCell&lt;TransientDemoDataRow, Double&gt; getComboBoxCellRef() {
        return betragComboBoxCellInstance.get();
    }

    @Override public boolean disableComboBox(TransientDemoDataRow row) {
        return row.getBetrag() == null || row.getBetrag().isInfinite() || row.getBetrag().isNaN();
    }

    @Override public List&lt;double&gt; createComboBoxValues(TransientDemoDataRow row) {
        final ContextLogic contextLogic = contextLogicInstance.get();
        final List&lt;double&gt; doubleList = contextLogic.workOnContext(row.getBetrag());
        return doubleList;
    }

    @Override public void workOnRowItself(TransientDemoDataRow row) {
        //nothing for this example
    }
}
]]&gt;&lt;/script&gt;


&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;The controlle will need a piece of code like this:&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
    @Inject Instance&lt;betragcomboboxcell&gt; betragComboBoxCellInstance;

    private void initTable() {
        final BetragComboBoxCell cell = betragComboBoxCellInstance.get();
        cell.associateWithCol(tableView, &quot;betrag&quot;);
    }
]]&gt;&lt;/script&gt;

&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;With this you can test the context logic indepentend from the javafx stuff.&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;All initializations inside a ComboBoxCell must be done in a PostConstruct - method.&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;With the&amp;nbsp;GenericComboBoxCell&amp;nbsp;you can activate/deactivate the combobox, modify the row cell values, and create the combobox values.&amp;nbsp;&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;This implementation is based on the JavaFX/CDI bootstrap from cdi-commons-fx. (blog entry &lt;a href=&quot;http://www.rapidpm.org/2013/08/cdicommonsfx-javafxcdi-bootstrap.html&quot; target=&quot;_blank&quot;&gt;JavaFX/CDI bootstrap&lt;/a&gt; )&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-AQ7GFqVQD4U/Uin3Zyv-FxI/AAAAAAABTbs/Kp70aYegR3U/s1600/tableview001.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-AQ7GFqVQD4U/Uin3Zyv-FxI/AAAAAAABTbs/Kp70aYegR3U/s1600/tableview001.jpg&quot; height=&quot;216&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-8qDppXPeXes/Uin3Z_Su-pI/AAAAAAABTb4/BLIB0FT2cLI/s1600/tableview002.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-8qDppXPeXes/Uin3Z_Su-pI/AAAAAAABTb4/BLIB0FT2cLI/s1600/tableview002.jpg&quot; height=&quot;218&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;UML of this demo:&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-ePJ6s1IzMKE/Uiny8-L--tI/AAAAAAABTbY/3hK_OgfHDPc/s1600/uml.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-ePJ6s1IzMKE/Uiny8-L--tI/AAAAAAABTbY/3hK_OgfHDPc/s1600/uml.png&quot; height=&quot;608&quot; title=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;Full CDI dependicies&lt;/vt&gt;&lt;/rt&gt;&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/-1CreRx6oh_I/UinzViniCcI/AAAAAAABTbg/E6C0MdnnRTQ/s1600/cdi-deps.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-1CreRx6oh_I/UinzViniCcI/AAAAAAABTbg/E6C0MdnnRTQ/s1600/cdi-deps.png&quot; height=&quot;254&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;
&lt;rt vt=&quot;&quot;&gt;&lt;vt&gt;&lt;br /&gt;&lt;/vt&gt;&lt;/rt&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-06&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Where to find the cdi-commons and javafx modules ?</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <published>2013-09-10T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/10/where-to-find-the-cdi-commons-and-java.html&quot; rel=&quot;tag&quot;&gt;Where to find the cdi-commons and javafx modules ?&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-10&quot;&gt;2013-09-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Since RapidPM-Modules is available at the central repo (&lt;a href=&quot;http://www.sonatype.org/central&quot;&gt;Thanks SonarType&lt;/a&gt;), we are using the following repositories.&lt;br /&gt;
&lt;br /&gt;
For development: (no stable builds/ development branch ci )&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://nexus.rapidpm.org/nexus/index.html#welcome&quot;&gt;http://nexus.rapidpm.org/nexus/index.html#welcome&lt;/a&gt;/ (snapshots)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://nexus.rapidpm.org/nexus/index.html#welcome&quot;&gt;http://nexus.rapidpm.org/nexus/content/groups/public&lt;/a&gt;&amp;nbsp;(mirror
        for needed artifacts)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
    For Releases and Snapshots from the release-branches/master-branch&lt;/div&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;Releases&amp;nbsp;&lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Crapidpm&quot;&gt;http://search.maven.org/&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;RC &lt;a href=&quot;https://oss.sonatype.org/index.html#view-repositories;snapshots~browsestorage&quot;&gt;https://oss.sonatype.org/&lt;/a&gt;&amp;nbsp;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FullText - SearchBox for TableView Part I</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <published>2013-09-10T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/10/fulltext-searchbox-for-tableview-part-.html&quot; rel=&quot;tag&quot;&gt;FullText - SearchBox for TableView Part I&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-10&quot;&gt;2013-09-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;How to combine a FullTextSearch with a TableView?&lt;br /&gt;
I would say, you will need 30 min max ;-) But How?&lt;br /&gt;
Short version :&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;implementing 2 small methods&lt;/li&gt;
    &lt;li&gt;put a SearchBox element to the fxml file&lt;/li&gt;
    &lt;li&gt;combine the TableView with the SearchBox&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
Long version:&lt;br /&gt;
Let´s start with the correspondings jUnit.&lt;br /&gt;
&lt;br /&gt;
As described (&lt;a href=&quot;http://www.rapidpm.org/2013/09/cdi-comboboxcell-how-to-reduce-80-of.html&quot;&gt;here&lt;/a&gt;)&amp;nbsp;we will start with a small demo - jUnit, containing a TableView.&lt;br /&gt;
To make the example smaller I will use a default TableView.&lt;br /&gt;
&lt;br /&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;The full code and demo jUnit you will find under : BitBucket Repo - RapidPM - Modules - javafx-searchbox&amp;nbsp;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;Please use &amp;nbsp;a commit after&amp;nbsp;&lt;/i&gt;&lt;/span&gt;&lt;a class=&quot;execute&quot; href=&quot;https://bitbucket.org/rapidpm/modules/commits/59237d342eec977e8aece0c83a96ab3d0dca5856?at=release/1.1.1&quot; style=&quot;background-color: whitesmoke; color: #3b73af; font-family: Monaco, monospace; font-size: 12px;&quot;&gt;59237d3&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
The application based on the &lt;b&gt;SearchBoxDemoPane&lt;/b&gt;&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class SearchBoxDemoPane extends CDIBaseAnchorPane&lt;SearchBoxDemoPane, SearchBoxDemoPaneController&gt; {
    @Override public Class&lt;searchboxdemopane&gt; getPaneClass() {
        return SearchBoxDemoPane.class;
    }
}
]]&gt;&lt;/script&gt;

with the &lt;b&gt;SearchBoxDemoPaneController&lt;/b&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class SearchBoxDemoPaneController implements CDIJavaFxBaseController {

    private @Inject @CDILogger Logger logger;

    @Inject @CDIPropertyRegistryService PropertyRegistryService propertyRegistryService;
    @Inject DemoKeyMapper keyMapper;
    @Inject Instance&lt;transientdemorowcomparator&gt; comparatorInstance;

    @FXML public TableView&lt;transientdemodatarow&gt; tableView;
    @FXML public SearchBox SearchBox;

    @Override public void initialize(URL url, ResourceBundle resourceBundle) {
        initTable();
        setI18n();

        //init SearchBox
        refreshIndex();

    }

    private void refreshIndex() {
        final ObservableList&lt;transientdemodatarow&gt; items = tableView.getItems();
        SearchBox.refreshIndex(items);
    }

    private void initTable() {

    }

    private void setI18n() {
        final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; col = tableView.getColumns();
        for (final TableColumn column : col) {
            final String text = column.getText();
            final String map = map(text);
            if (logger.isDebugEnabled()) {
                logger.debug(&quot;text -&gt; &quot; + text);
                logger.debug(&quot;map -&gt; &quot; + map);
            }
            column.setText(map);
        }
    }

    private String map(final String key) {
        return propertyRegistryService.getRessourceForKey(keyMapper.map(key));
    }

}
]]&gt;&lt;/script&gt;

and the transient data for the TableView&amp;nbsp;&lt;b&gt;TransientDemoDataRow&lt;/b&gt;&lt;br /&gt;
The importand part is the implementation of the Interface SearchBoxDataElement, this will make the connection between the index and the full-text search later.&lt;br /&gt;
&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class TransientDemoDataRow implements Serializable, SearchBoxDataElement {

    @Inject @CDIPropertyRegistryService PropertyRegistryService propertyRegistryService;
    @Inject DemoKeyMapper keyMapper;

    private StringProperty vorname;
    private StringProperty nachname;
    private StringProperty datum;
    private SimpleDoubleProperty betrag;

    private SimpleLongProperty ID; //normaly a normal Long, not shown at the table

    @PostConstruct
    public void init() {
        vorname = new SimpleStringProperty(this, map(&quot;vorname&quot;));
        nachname = new SimpleStringProperty(this, map(&quot;nachname&quot;));
        datum = new SimpleStringProperty(this, map(&quot;datum&quot;));
        betrag = new SimpleDoubleProperty(this, map(&quot;betrag&quot;));
        ID = new SimpleLongProperty(this, map(&quot;ID&quot;));
    }

    private String map(final String key) {
        return propertyRegistryService.getRessourceForKey(keyMapper.map(key));
    }

//.. snip getter / setter

    public Long getID() {
        return ID.get();
    }

    public SimpleLongProperty IDProperty() {
        return ID;
    }

    public void setID(long ID) {
        this.ID.set(ID);
    }

    @Override public List&lt;string&gt; getValues() {
        return Lists.newArrayList(getID() + &quot;&quot;, getVorname(), getNachname(), getDatum(), getBetrag() + &quot;&quot;);
    }

    @Override public String shortInfo() {
        return getID() + &quot; - &quot; + getVorname() + &quot; - &quot; + getNachname() + &quot; - &quot; + getDatum() + &quot; - &quot; + getBetrag() + &quot;&quot;;
    }
}
]]&gt;&lt;/script&gt;

&lt;br /&gt;
&lt;div&gt;
    Now we will put the SearchBox to the fxml.&lt;/div&gt;
&lt;div&gt;
    This is only one line&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
    &lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;&lt;b&gt;&amp;nbsp;&amp;lt;SearchBox fx:id=&quot;SearchBox&quot; visible=&quot;true&quot; minHeight=&quot;24.00&quot;&lt;/b&gt;&lt;/i&gt;&lt;/span&gt;&lt;i style=&quot;font-size: small;&quot;&gt;&lt;b&gt;&amp;nbsp;prefWidth=&quot;1024.0&quot; maxWidth=&quot;-Infinity&quot;/&amp;gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;script class=&quot;brush: javafx&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
&lt;?import java.net.URL?&gt;
&lt;?import javafx.scene.control.cell.PropertyValueFactory?&gt;
&lt;?import javafx.scene.control.ScrollPane?&gt;
&lt;?import javafx.scene.control.TableColumn?&gt;
&lt;?import javafx.scene.control.TableView?&gt;
&lt;?import javafx.scene.layout.AnchorPane?&gt;
&lt;?import javafx.scene.layout.HBox?&gt;
&lt;?import javafx.scene.layout.VBox?&gt;
&lt;?import org.rapidpm.demo.javafx.searchbox.searchbox.SearchBox?&gt;
&lt;fx:root type=&quot;gui.org.rapidpm.demo.javafx.searchbox.demo.SearchBoxDemoPane&quot;
         fx:id=&quot;SearchBoxDemoPane&quot; xmlns:fx=&quot;http://javafx.com/fxml&quot; style=&quot;-fx-background-color:#EEEEEE&quot;&gt;
    &lt;stylesheets&gt;
        &lt;url value=&quot;@/main.css&quot;/&gt;
    &lt;/stylesheets&gt;
    &lt;children&gt;
        &lt;vbox AnchorPane.bottomAnchor=&quot;0.0&quot; AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot; AnchorPane.topAnchor=&quot;0.0&quot;&gt;
            &lt;hbox maxHeight=&quot;24.00&quot; maxWidth=&quot;Infinity&quot; VBox.vgrow=&quot;NEVER&quot;&gt;
                &lt;searchbox fx:id=&quot;SearchBox&quot; visible=&quot;true&quot; minHeight=&quot;24.00&quot; prefWidth=&quot;5000.0&quot; maxWidth=&quot;-Infinity&quot;/&gt;
            &lt;/HBox&gt;
            &lt;anchorpane minHeight=&quot;0.0&quot; minWidth=&quot;0.0&quot; VBox.vgrow=&quot;ALWAYS&quot;
                        AnchorPane.bottomAnchor=&quot;0.0&quot; AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot; AnchorPane.topAnchor=&quot;0.0&quot;&gt;
                &lt;children&gt;
                    &lt;scrollpane fitToHeight=&quot;true&quot; fitToWidth=&quot;true&quot; AnchorPane.bottomAnchor=&quot;0.0&quot;
                                AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot; AnchorPane.topAnchor=&quot;0.0&quot;&gt;
                        &lt;tableview fx:id=&quot;tableView&quot; editable=&quot;true&quot; VBox.vgrow=&quot;ALWAYS&quot; style=&quot;-fx-font-size: 80%&quot;
                                   tableMenuButtonVisible=&quot;true&quot;&gt;
                            &lt;columns&gt;
                                &lt;tablecolumn prefWidth=&quot;120.0&quot; text=&quot;id&quot;&gt;
                                    &lt;cellvaluefactory&gt;
                                        &lt;propertyvaluefactory property=&quot;ID&quot;/&gt;
                                    &lt;/cellValueFactory&gt;
                                &lt;/TableColumn&gt;
                                &lt;tablecolumn prefWidth=&quot;120.0&quot; text=&quot;vorname&quot;&gt;
                                    &lt;cellvaluefactory&gt;
                                        &lt;propertyvaluefactory property=&quot;vorname&quot;/&gt;
                                    &lt;/cellValueFactory&gt;
                                &lt;/TableColumn&gt;
                                &lt;tablecolumn prefWidth=&quot;120.0&quot; text=&quot;nachname&quot;&gt;
                                    &lt;cellvaluefactory&gt;
                                        &lt;propertyvaluefactory property=&quot;nachname&quot;/&gt;
                                    &lt;/cellValueFactory&gt;
                                &lt;/TableColumn&gt;
                                &lt;tablecolumn prefWidth=&quot;120.0&quot; text=&quot;datum&quot;&gt;
                                    &lt;cellvaluefactory&gt;
                                        &lt;propertyvaluefactory property=&quot;datum&quot;/&gt;
                                    &lt;/cellValueFactory&gt;
                                &lt;/TableColumn&gt;
                                &lt;tablecolumn prefWidth=&quot;120.0&quot; text=&quot;betrag&quot;&gt;
                                    &lt;cellvaluefactory&gt;
                                        &lt;propertyvaluefactory property=&quot;betrag&quot;/&gt;
                                    &lt;/cellValueFactory&gt;
                                &lt;/TableColumn&gt;
                            &lt;/columns&gt;
                        &lt;/TableView&gt;
                    &lt;/ScrollPane&gt;
                &lt;/children&gt;
            &lt;/AnchorPane&gt;
        &lt;/VBox&gt;
    &lt;/children&gt;
&lt;/fx:root&gt;

]]&gt;&lt;/script&gt;

Finally we are implementing the jUnit Test (&lt;a href=&quot;http://www.rapidpm.org/2013/08/cdicommonsfx-javafxcdi-bootstrap.html&quot;&gt;more info about cdi javaFX bootstraping&lt;/a&gt;)&lt;br /&gt;
like this one.&lt;br /&gt;
&lt;br /&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class SearchBoxTest extends JavaFXBaseTest {
    @Override protected Class&lt;? extends JavaFXBaseTest&gt; getTestClass() {
        return SearchBoxTest.class;
    }

    public static class TestImpl extends JavaFXBaseTest.JavaFXBaseTestImpl {

        @Inject SearchBoxDemoPane root;
        @Inject DemoDataBuilder dataBuilder;

        @Override public boolean isExitAfterTest() {
            return false;
        }

        @Override protected Class&lt;? extends JavaFXBaseTest&gt; getParentTestClass() {
            return SearchBoxTest.class;
        }

        @Override public void testImpl(Stage stage) {
            stage.setTitle(&quot;SearchBoxTest&quot;);  //i18n
            stage.setScene(new Scene(root, 1024, 786));

            final SearchBoxDemoPaneController controller = root.getController();
            final ObservableList&lt;transientdemodatarow&gt; transientDemoDataRows = dataBuilder.create();
            controller.tableView.setItems(transientDemoDataRows);
            controller.SearchBox.refreshIndex(transientDemoDataRows);
        }
    }
}
]]&gt;&lt;/script&gt;

After this we have a full funktional combination between a full-text SearchBox and a TableView.&lt;br /&gt;
The SearchBox itself is working in this version with a transient Lucene-Index.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-O8e8Q0v6s90/Ui7Srr4pCkI/AAAAAAABTcQ/UJKEGo-evK4/s1600/search_step_01.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-O8e8Q0v6s90/Ui7Srr4pCkI/AAAAAAABTcQ/UJKEGo-evK4/s1600/search_step_01.jpg&quot; height=&quot;171&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-oOSZA0ASumQ/Ui7SrqsW-JI/AAAAAAABTcU/HqrSusRzrNw/s1600/search_step_02.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-oOSZA0ASumQ/Ui7SrqsW-JI/AAAAAAABTcU/HqrSusRzrNw/s1600/search_step_02.jpg&quot; height=&quot;171&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-yp873G-WUjM/Ui7Srm3nH3I/AAAAAAABTcs/YyNnboufSgE/s1600/search_step_03.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-yp873G-WUjM/Ui7Srm3nH3I/AAAAAAABTcs/YyNnboufSgE/s1600/search_step_03.jpg&quot; height=&quot;170&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-p4AJX4aNNWE/Ui7SsIn5yyI/AAAAAAABTcc/7qzRFXf1BE8/s1600/search_step_04.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-p4AJX4aNNWE/Ui7SsIn5yyI/AAAAAAABTcc/7qzRFXf1BE8/s1600/search_step_04.jpg&quot; height=&quot;170&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-IX3WYgvaJJc/Ui7SsbXUntI/AAAAAAABTck/0QwrIf_nm1o/s1600/search_step_05.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-IX3WYgvaJJc/Ui7SsbXUntI/AAAAAAABTck/0QwrIf_nm1o/s1600/search_step_05.jpg&quot; height=&quot;170&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>11 lines of code for optimal col size (TableView)</title>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <published>2013-09-11T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/11/11-lines-of-code-for-optimal-col-size-.html&quot; rel=&quot;tag&quot;&gt;11 lines of code for optimal col size (TableView)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-11&quot;&gt;2013-09-11&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;To combine the property &lt;b&gt;tableMenuButtonVisible&lt;/b&gt;=&quot;true&quot; from the TableView with the column.&lt;b&gt;prefWidthProperty&lt;/b&gt;() you need not more than 11 lines of code. The result will be a TableView with automatic resizing columns if you are hiding one ore more columns and reverse.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
        //set optimal size
        final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
        final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; visibleLeafColumns = tableView.getVisibleLeafColumns();
        final int size = visibleLeafColumns.size();
        final SimpleDoubleProperty newSizeProperty = new SimpleDoubleProperty(size);
        visibleLeafColumns.addListener(new ListChangeListener&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt;() {
            @Override public void onChanged(Change&lt;? extends TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; change) {
                final int newSize = change.getList().size();
                newSizeProperty.set(newSize);
            }
        });
        for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
            column.prefWidthProperty().bind(tableView.widthProperty().divide(newSizeProperty));
        }
]]&gt;&lt;/script&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-EQXJrt8k68w/UjA_-XKLRwI/AAAAAAABTdM/uoG3ewVQJrw/s1600/step01.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-EQXJrt8k68w/UjA_-XKLRwI/AAAAAAABTdM/uoG3ewVQJrw/s1600/step01.jpg&quot; height=&quot;266&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-C6xLs44_QCI/UjA_-ZVUSeI/AAAAAAABTdQ/pzoOckJdYkc/s1600/step02.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-C6xLs44_QCI/UjA_-ZVUSeI/AAAAAAABTdQ/pzoOckJdYkc/s1600/step02.jpg&quot; height=&quot;250&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-mxpi-V1ddkY/UjA_-R66JUI/AAAAAAABTdU/zmQMvA_o-4U/s1600/step03.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-mxpi-V1ddkY/UjA_-R66JUI/AAAAAAABTdU/zmQMvA_o-4U/s1600/step03.jpg&quot; height=&quot;250&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI Callback&lt;TableColumn, TableCell&gt; cellFactory - from FXML</title>
        <category label="Callback"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <category label="TableView"/>
        <published>2013-09-19T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/09/19/cdi-callback-tablecolumn-tablecell-cel.html&quot; rel=&quot;tag&quot;&gt;CDI Callback&lt;TableColumn, TableCell&gt; cellFactory - from FXML&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-09-19&quot;&gt;2013-09-19&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;How to get a full managed JavaFX-element declared in the fxml-file?&lt;br/&gt;

Let´s say we have something like the following:&lt;br/&gt;

&lt;script class=&quot;brush: javafx&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
&lt;TableView fx:id=&quot;tableView&quot; editable=&quot;true&quot; VBox.vgrow=&quot;ALWAYS&quot; style=&quot;-fx-font-size: 80%&quot;
                   tableMenuButtonVisible=&quot;true&quot;&gt;
    &lt;columns&gt;
        &lt;FilterableStringTableColumn prefWidth=&quot;120.0&quot; text=&quot;vorname&quot;&gt;
            &lt;cellFactory&gt;
                &lt;EditingAutoCompleteStringCellFactory/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;vorname&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
        &lt;FilterableStringTableColumn prefWidth=&quot;120.0&quot; text=&quot;nachname&quot;&gt;
            &lt;cellFactory&gt;
                &lt;EditingStringCellFactoryCallback/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;nachname&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
        &lt;FilterableDateTableColumn prefWidth=&quot;120.0&quot; text=&quot;datum&quot;&gt;
            &lt;cellFactory&gt;
                &lt;EditingDateCellFactoryCallback/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;datum&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDateTableColumn&gt;
        &lt;FilterableDoubleTableColumn prefWidth=&quot;120.0&quot; text=&quot;betrag&quot;&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;betrag&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDoubleTableColumn&gt;
    &lt;/columns&gt;
&lt;/TableView&gt;
]]&gt;&lt;/script&gt;

This looks like a normal definition of a TableView with some cell-factories.
The intressting part is the instantiating of the cellFactory elements. They are
created from the JavaFX part. How to get them as full managed bean?&lt;br/&gt;

Based on my blog entry about  (&lt;a href=&quot;http://www.rapidpm.org/2013/08/cdicommonsfx-javafxcdi-bootstrap.html&quot;&gt;CDI-JavaFX bootstrapping&lt;/a&gt;) I wanted to have full cdi managed JavaFX elements but defined in my fxml-file.&lt;br/&gt;

How to get this with a ComboBoxCell you can see here (&lt;a href=&quot;http://www.rapidpm.org/2013/09/cdi-comboboxcell-how-to-reduce-80-of.html&quot;&gt;cdi comboboxcell how to reduce 80 of code&lt;/a&gt;)&lt;br/&gt;

The aproach was to define an element that is able to associate itself as CellFactory.
Only two line of code are used during the init - phase:&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
@Inject Instance&lt;BetragComboboxCell&gt; betragComboBoxCellInstance;
 
private void initTable() {
    final BetragComboBoxCell cell = betragComboBoxCellInstance.get();
    cell.associateWithCol(tableView, &quot;betrag&quot;);
}
]]&gt;&lt;/script&gt;


BUT: the definition inside the fxml-file is &lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
        &lt;FilterableDoubleTableColumn prefWidth=&quot;120.0&quot; text=&quot;betrag&quot;&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;betrag&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableDoubleTableColumn&gt;
]]&gt;&lt;/script&gt;

You only could (implicit)define a normal CellFactory, because the creation of this element would be done by JavaFX.&lt;br/&gt;

Now I want to write a more precise fxml file.&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
&lt;FilterableStringTableColumn prefWidth=&quot;120.0&quot; text=&quot;vorname&quot;&gt;
            &lt;cellFactory&gt;
                &lt;EditingAutoCompleteStringCellFactory/&gt;
            &lt;/cellFactory&gt;
            &lt;cellValueFactory&gt;
                &lt;PropertyValueFactory property=&quot;vorname&quot;/&gt;
            &lt;/cellValueFactory&gt;
        &lt;/FilterableStringTableColumn&gt;
]]&gt;&lt;/script&gt;

Now you could see, the CellFactory is well defined. Here an EditingAutoCompleteStringCellFactory.
This is an element with injected autocomplete functions/data.&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class EditingAutoCompleteStringCellFactory 
                implements Callback&lt;TableColumn&lt;FilteredTableDataRow, ?&gt;,
                                      TableCell&lt;FilteredTableDataRow, ?&gt;&gt;
]]&gt;&lt;/script&gt;

Inside this class you can use all cdi features.&lt;br/&gt;

The missing part is: How to get this as managed instance?&lt;br/&gt;
The short answer is.. make it managed by yourself ;-)&lt;br/&gt;

Let´s say the controller is a managed instance, you can get the BeanManager with&lt;br/&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
@Inject BeanManager beanManager;
]]&gt;&lt;/script&gt;

Now I started to get during the init-phase the right column&lt;br/&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
 if(column.getText().equals(&quot;vorname&quot;)){ 
   //do something on column
 } else{
  //nothing to do
 }
}
]]&gt;&lt;/script&gt;

After you found the right column, start with the CDI-stuff
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final TableColumn&lt;TransientDemoDataRow, String&gt; columnString = (TableColumn&lt;TransientDemoDataRow, String&gt;) column;

final Callback&lt;? extends TableColumn&lt;TransientDemoDataRow, String&gt;, ? extends TableCell&lt;TransientDemoDataRow,String&gt;&gt; cellFactory = columnString.getCellFactory();

final AnnotatedType&lt;EditingAutoCompleteStringCellFactory&gt; annotationType = beanManager.createAnnotatedType(EditingAutoCompleteStringCellFactory.class);

final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);

final CreationalContext&lt;EditingAutoCompleteStringCellFactory&gt; creationalContext = beanManager.createCreationalContext(null);

                injectionTarget.inject(cellFactory, creationalContext);
                injectionTarget.postConstruct(cellFactory);

]]&gt;&lt;/script&gt;

Ready..   but this code is not nice...  and done for every column this is toooooo much code.&lt;br/&gt;

So I started to reduce it.&lt;br/&gt;
- reducing the generics..&lt;br/&gt;
- getting the class from the instance itself&lt;br/&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final Callback cellFactory = column.getCellFactory();
final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
final CreationalContext creationalContext = beanManager.createCreationalContext(null);
injectionTarget.inject(cellFactory, creationalContext);
injectionTarget.postConstruct(cellFactory);
]]&gt;&lt;/script&gt;

Done..  OK, this is short and easy..  and you can do it for every column..&lt;br/&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;TransientDemoDataRow, ?&gt; column : columns) {
 final Callback cellFactory = column.getCellFactory();
 final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
 final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
 final CreationalContext creationalContext = beanManager.createCreationalContext(null);
 injectionTarget.inject(cellFactory, creationalContext);
 injectionTarget.postConstruct(cellFactory);
}
]]&gt;&lt;/script&gt;

or more generic...&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final ObservableList&lt;TableColumn&lt;?, ?&gt;&gt; columns = tableView.getColumns();
for (final TableColumn&lt;?, ?&gt; column : columns) {
 final Callback cellFactory = column.getCellFactory();
 final AnnotatedType annotationType = beanManager.createAnnotatedType(cellFactory.getClass());
 final InjectionTarget injectionTarget = beanManager.createInjectionTarget(annotationType);
 final CreationalContext creationalContext = beanManager.createCreationalContext(null);
 injectionTarget.inject(cellFactory, creationalContext);
 injectionTarget.postConstruct(cellFactory);
}
]]&gt;&lt;/script&gt;

Now you can use CDI-managed elements as CellFactories and define them inside your fxml. &lt;br/&gt;

Nice, Managed and TypeSave&lt;br/&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-09-19&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI ButtonCell</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <category label="TableView"/>
        <category label="Weld"/>
        <published>2013-10-02T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/02/cdi-buttoncell.html&quot; rel=&quot;tag&quot;&gt;CDI ButtonCell&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-02&quot;&gt;2013-10-02&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;The full code and demo jUnit you will find under :&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/src/6e440e241875/javafx-filtered-tableview?at=release/1.1.1&quot; target=&quot;_blank&quot;&gt;BitBucket Repo - RapidPM - Modules - javafx-filtered-tableview&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;i&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;Please use the release/1.1.1 branch and a commit after&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/modules/commits/6e440e241875c2f574741bd1f0e0749054996326&quot;&gt;6e440e2&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;
&lt;br /&gt;

Today I needed a button inside my TableView.

Something needed to be activated, based on some other values in this row.

How to do this in a nice, lean and decoupled way? One goal was the possibillity that the definition could be done inside the fxml - file.

Let´s start with the basic cdi managed &lt;b&gt;ButtonCell&lt;/b&gt;:

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[ 
public abstract class ButtonCell&lt;T&gt; extends TableCell&lt;T, Boolean&gt; {

    public Button cellButton;
    public abstract String getButtonLabelText();
    private List&lt;ButtonCellAction&lt;T&gt;&gt; actionList = new ArrayList&lt;&gt;();

    private @Inject @CDILogger Logger logger;

    public ButtonCell() {

    }

    @PostConstruct
    public void init(){
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;ButtonCell-&gt;init&quot;);
        }
        cellButton = new Button(getButtonLabelText());
        cellButton.setOnAction(new EventHandler&lt;ActionEvent&gt;() {
            @Override
            public void handle(ActionEvent t) {
                for (final ButtonCellAction&lt;T&gt; buttonCellAction : actionList) {
                    if (logger.isDebugEnabled()) {
                        logger.debug(&quot;execute buttonCellAction-&gt; &quot; + buttonCellAction);
                    }
                    buttonCellAction.execute(ButtonCell.this, t);
                }
            }
        });
    }

    @Override
    protected void updateItem(Boolean t, boolean empty) {
        super.updateItem(t, empty);
        if (!empty) {
            setGraphic(cellButton);
        }
    }

    public static abstract class ButtonCellAction&lt;T&gt; {
        public abstract void execute(ButtonCell&lt;T&gt; buttonCell, ActionEvent t);
    }


    public List&lt;ButtonCellAction&lt;T&gt;&gt; getActionList() {
        return actionList;
    }
}
]]&gt;&lt;/script&gt;

The main part here is the method &lt;b&gt;setOnAction()&lt;/b&gt;: With this we are iterating over a list of ButtonCellActions.
&lt;br/&gt;
Now we have to implement a class for our used TableView. In this example an simple delete-button.
&lt;br/&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class DeleteButtonCell extends ButtonCell&lt;TransientDemoDataRow&gt; {

    private @Inject @CDILogger Logger logger;
    private @Inject @CDIPropertyRegistryService PropertyRegistryService propertyRegistryService;
    private @Inject DeleteButtonLogic logic;

    @Override public String getButtonLabelText() {
        return propertyRegistryService.getRessourceForKey(&quot;delete&quot;);
    }

    public DeleteButtonCell() {

    }

    @PostConstruct
    public void init(){
        super.init();
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;DeleteButtonCell-&gt;init&quot;);
        }
        getActionList().add(new ButtonCellAction&lt;TransientDemoDataRow&gt;() {
            @Override public void execute(ButtonCell&lt;TransientDemoDataRow&gt; buttonCell, ActionEvent t) {
                if (logger.isDebugEnabled()) {
                    final Object source = t.getSource();
                    logger.debug(&quot;ButtonCellAction -&gt; &quot; + source);
                }
                final TableRow tableRow = buttonCell.getTableRow();
            }
        });
    }
}
]]&gt;&lt;/script&gt;

At this point we are able to inject all the needed logic (here :&lt;b&gt;DeleteButtonLogic&lt;/b&gt;) to fullfill our task. The logic will be activated inside an implementtion of the class &lt;b&gt;ButtonCellAction&lt;/b&gt;. The order you are filling the Actions is the order the actions are processed. quite easy and mostly all you need.
&lt;br/&gt;
The implementation is easy, but we want to put this to an fxml file like the following?:

&lt;script class=&quot;brush: javafx&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
&lt;TableColumn text=&quot;tcdelete&quot; sortable=&quot;false&quot;&gt;
 &lt;cellFactory&gt;
  &lt;DeleteButtonCellFactory/&gt;
 &lt;/cellFactory&gt;
 &lt;cellValueFactory&gt;
  &lt;DeleteButtonCellValueFactory/&gt;
 &lt;/cellValueFactory&gt;
&lt;/TableColumn&gt;
]]&gt;&lt;/script&gt;

For this we need the CellFactory and the CellValueFactory.
Both implementations are small:

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class DeleteButtonCellFactory
        implements Callback&lt;TableColumn&lt;TransientDemoDataRow, ?&gt;, TableCell&lt;TransientDemoDataRow, ?&gt;&gt; {

    @Inject Instance&lt;DeleteButtonCell&gt;  deleteButtonCellInstance;

    public DeleteButtonCellFactory() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }

    @Override public TableCell&lt;TransientDemoDataRow, ?&gt; call(TableColumn&lt;TransientDemoDataRow, ?&gt; column) {
        return deleteButtonCellInstance.get();
    }
}
]]&gt;&lt;/script&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class DeleteButtonCellValueFactory
        implements Callback&lt;TableColumn.CellDataFeatures&lt;TransientDemoDataRow, Boolean&gt;,ObservableValue&lt;Boolean&gt;&gt; {


    @Override public ObservableValue&lt;Boolean&gt; call(TableColumn.CellDataFeatures&lt;TransientDemoDataRow, Boolean&gt; p) {
        final TransientDemoDataRow value = p.getValue();
        return new SimpleBooleanProperty(value != null);
    }
}
]]&gt;&lt;/script&gt;

This is all..  and the result is nice and clean..
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-2UVVaH6biHA/Ukw537ReTJI/AAAAAAABUVc/mULLql4jTi0/s1600/uml-buttoncell.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-2UVVaH6biHA/Ukw537ReTJI/AAAAAAABUVc/mULLql4jTi0/s400/uml-buttoncell.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

 &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-02&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>complex PropertyBindings</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="PropertyBinding"/>
        <category label="RapidPM"/>
        <published>2013-10-08T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/08/complex-propertybindings.html&quot; rel=&quot;tag&quot;&gt;complex PropertyBindings&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-08&quot;&gt;2013-10-08&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today I had to deal with different dependent input-fields.
&lt;br/&gt;
Let´s say you have (only) two TextFields, leftTextField and rightTextField.
If you writing something into the left TextField you have to calculate something (Logic A) and write it to the right TextField.
If you are writing to the right one you have to calculate something (Logic B) and write it to the left TextField.
&lt;br/&gt;
This example is quite simple, but if you have to deal with a lot of fields with different deps based on a transient context
you have to solve:
&lt;br/&gt;
- cycles between the different components.
&lt;br/&gt;
- in this case, the transient context that was changing the logic (here Logic A and Logic B).
&lt;br/&gt;
&lt;br/&gt;
First the component called PairedTextField.
&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[ 
public class PairedTextField extends Pane {

    private final TextField leftTextField = new TextField();
    private final TextField rightTextField = new TextField();

    private final HBox hb = new HBox();
    private int spacing = 10;

    public PairedTextField() {
        setAnchors(hb, 0.0);
        hb.getChildren().addAll(leftTextField, rightTextField);
        hb.setSpacing(spacing);
        getChildren().add(hb);
        setPadding(new Insets(0, 10, 0, 10));
    }

    private void setAnchors(Node node , Double anchor){
        AnchorPane.setBottomAnchor(node, anchor);
        AnchorPane.setLeftAnchor(node, anchor);
        AnchorPane.setRightAnchor(node, anchor);
        AnchorPane.setTopAnchor(node, anchor);
    }
}

]]&gt;&lt;/script&gt;

Now, how to bind both TextFields to get the result?
If you are binding bidirectional you will get a Stackoverflow. To solve this you can do something like the following:
&lt;br/&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
leftTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().bind(leftTextFieldBinding);
            }
        });
        leftTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().unbind();
            }
        });

        rightTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().bind(rigthTextFieldBinding);
            }
        });
        rightTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().unbind();
            }
        });
 ]]&gt;&lt;/script&gt;

This simple solution is working well. Binding if you need it, unbind after this. Thanks to JavaFX PropertyBinding ;-)
Finally we have to deal with the different implementations of the logic-part for every request.
&lt;br/&gt;
The class Bindings will give you the method createStringBinding(Callable, Property), with this you can create the Bindings (leftTextFieldBinding, rigthTextFieldBinding).
What you need now is the implementation of the Callable&lt;String&gt;. If you are doing it in the &quot;normal&quot; way you have to write it like the following
    &lt;br/&gt;
    &lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class LeftTextFieldBindingCallable extends Callable&lt;String&gt;{
    final DemoLogic demoLogic = new DemoLogic();

    @Override public String call() throws Exception {
        return &quot;leftTextField - &quot; + demoLogic.doIt();
    }
}
]]&gt;&lt;/script&gt;

    With this solution you are not able to switch the implementation of the attribute &quot;demoLogic&quot;. Nicer would be something like
    &lt;br/&gt;
    &lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class LeftTextFieldBindingCallable extends CDICallable&lt;String&gt;{
    @Inject Instance&lt;DemoLogic&gt; demoLogic;

    @Override public String call() throws Exception {
        return &quot;leftTextField - &quot; + demoLogic.get().doIt();
    }
}
]]&gt;&lt;/script&gt;

    With every request you will get the possibility to change the implementation of DemoLogic. The Producer will decide wich implementation will be used.
    &lt;br/&gt;
    &lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class DemoLogicProducer {

    @Produces
    public DemoLogic create(BeanManager beanManager, InjectionPoint injectionPoint){
        //decide which implementation to use...
        //here simple version..
        return  new DemoLogic();
    }
}
]]&gt;&lt;/script&gt;
    &lt;br/&gt;
    Now, putting all together:
    &lt;br/&gt;
    &lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class PairedTextField extends Pane {

    private final TextField leftTextField = new TextField();
    private final TextField rightTextField = new TextField();

    private final HBox hb = new HBox();
    private int spacing = 10;

    @Inject Instance&lt;LeftTextFieldBindingCallable&gt; leftTextFieldBindingCallableInstance;
    @Inject Instance&lt;RightTextFieldBindingCallable&gt; rightTextFieldBindingCallableInstance;


    public PairedTextField() {
        setAnchors(hb, 0.0);
        hb.getChildren().addAll(leftTextField, rightTextField);
        hb.setSpacing(spacing);
        getChildren().add(hb);
        setPadding(new Insets(0, 10, 0, 10));

        CDIContainerSingleton.getInstance().activateCDI(this);

    }

    @PostConstruct
    public void init(){
        final StringBinding leftTextFieldBinding = Bindings.createStringBinding(leftTextFieldBindingCallableInstance.get(), leftTextField.textProperty());

        final StringBinding rigthTextFieldBinding = Bindings.createStringBinding(rightTextFieldBindingCallableInstance.get(), rightTextField.textProperty());


        leftTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().bind(leftTextFieldBinding);
            }
        });
        leftTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().unbind();
            }
        });

        rightTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().bind(rigthTextFieldBinding);
            }
        });
        rightTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().unbind();
            }
        });
    }


    private void setAnchors(Node node , Double anchor){
        AnchorPane.setBottomAnchor(node, anchor);
        AnchorPane.setLeftAnchor(node, anchor);
        AnchorPane.setRightAnchor(node, anchor);
        AnchorPane.setTopAnchor(node, anchor);
    }
}
]]&gt;&lt;/script&gt;
    &lt;br/&gt;
    The importand parts are:
    &lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[

public abstract class  CDICallable&lt;T&gt; implements Callable&lt;T&gt; {
    protected CDICallable() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }
}

//...
CDIContainerSingleton.getInstance().activateCDI(this);
//..
 
        final StringBinding leftTextFieldBinding = Bindings.createStringBinding(leftTextFieldBindingCallableInstance.get(), leftTextField.textProperty());

        final StringBinding rigthTextFieldBinding = Bindings.createStringBinding(rightTextFieldBindingCallableInstance.get(), rightTextField.textProperty());


]]&gt;&lt;/script&gt;

    &lt;br/&gt;
    &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-VJn5X9vrTig/UlQZiDC4LfI/AAAAAAABUV4/GKtv6srW2SY/s1600/diagram.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-VJn5X9vrTig/UlQZiDC4LfI/AAAAAAABUV4/GKtv6srW2SY/s400/diagram.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-08&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>use Kotlin inside JavaFX with CDI</title>
        <category label="Callback"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="Kotlin"/>
        <published>2013-10-09T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/09/use-kotlin-inside-javafx-with-cdi.html&quot; rel=&quot;tag&quot;&gt;use Kotlin inside JavaFX with CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-09&quot;&gt;2013-10-09&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;I tried the combination of JavaFX with CDI and injection of &lt;a href=&quot;http://kotlin.jetbrains.org/&quot;&gt;Kotlin&lt;/a&gt; and it works very well.
&lt;br/&gt;
First the CDI - managed Callable
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[ 
public abstract class CDICallable&lt;T&gt; implements Callable&lt;T&gt; {
    protected CDICallable() {
        CDIContainerSingleton.getInstance().activateCDI(this);
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Second the TextFieldBindingCallable for the JavaFX-binding
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class LeftTextFieldBindingCallable extends CDICallable&lt;String&gt; {

    @Inject Instance&lt;DemoLogic&gt; demoLogic;

    @Override public String call() throws Exception {
        return &quot;leftTextField - &quot; + demoLogic.get().doIt();
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
Third the implementation of the DemoLogic

Java - Version
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class DemoLogic {

    public String doIt() {
        return System.nanoTime() + &quot;&quot;;
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;
changed to &lt;b&gt;Kotlin&lt;/b&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public open class DemoLogic() {
    public open fun doIt(): String? {
        return System.nanoTime().toString()  ;
    }
}
]]&gt;&lt;/script&gt;
&lt;br/&gt;

The code with the @Inject of DemoLogic isn´t changed inside the class &lt;b&gt;LeftTextFieldBindingCallable&lt;/b&gt;
and it is running well..
&lt;/br&gt;
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public class PairedTextField extends Pane {

    private final TextField leftTextField = new TextField();
    private final TextField rightTextField = new TextField();

    private final HBox hb = new HBox();
    private int spacing = 10;

    @Inject Instance&lt;LeftTextFieldBindingCallable&gt; leftTextFieldBindingCallableInstance;
    @Inject Instance&lt;RightTextFieldBindingCallable&gt; rightTextFieldBindingCallableInstance;


    public PairedTextField() {
        setAnchors(hb, 0.0);
        hb.getChildren().addAll(leftTextField, rightTextField);
        hb.setSpacing(spacing);
        getChildren().add(hb);
        setPadding(new Insets(0, 10, 0, 10));

        CDIContainerSingleton.getInstance().activateCDI(this);

    }

    @PostConstruct
    public void init() {
        final StringBinding leftTextFieldBinding = Bindings.createStringBinding(leftTextFieldBindingCallableInstance.get(), leftTextField.textProperty());

        final StringBinding rigthTextFieldBinding = Bindings.createStringBinding(rightTextFieldBindingCallableInstance.get(), rightTextField.textProperty());


        leftTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().bind(leftTextFieldBinding);
            }
        });
        leftTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                rightTextField.textProperty().unbind();
            }
        });

        rightTextField.setOnKeyTyped(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().bind(rigthTextFieldBinding);
            }
        });
        rightTextField.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {
            @Override public void handle(KeyEvent keyEvent) {
                leftTextField.textProperty().unbind();
            }
        });
    }


    private void setAnchors(Node node, Double anchor) {
        AnchorPane.setBottomAnchor(node, anchor);
        AnchorPane.setLeftAnchor(node, anchor);
        AnchorPane.setRightAnchor(node, anchor);
        AnchorPane.setTopAnchor(node, anchor);
    }
}
]]&gt;&lt;/script&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-09&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>The Central Repository Search Engine</title>
        <category label="Maven"/>
        <category label="RapidPM"/>
        <published>2013-10-11T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/11/the-central-repository-search-engine.html&quot; rel=&quot;tag&quot;&gt;The Central Repository Search Engine&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-11&quot;&gt;2013-10-11&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;The RapidPM-Modules Version 1.1.1 are at maven central now :&amp;nbsp;&lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rapidpm-parent%22&quot;&gt;The Central Repository Search Engine&lt;/a&gt;: &lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Using JavaScript libraries (D3) in Vaadin webapplications</title>
        <category label="D3"/>
        <category label="JavaScript"/>
        <category label="Vaadin"/>
        <published>2013-10-13T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/13/using-javascript-libraries-(d3)-in-vaa.html&quot; rel=&quot;tag&quot;&gt;Using JavaScript libraries (D3) in Vaadin webapplications&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-13&quot;&gt;2013-10-13&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;This is a short tutorial on how to use JavaScript libraries with Vaadin.&lt;br /&gt;
&lt;br /&gt;
The library that shall be used is &lt;a href=&quot;http://d3js.org/&quot;&gt;D3&lt;/a&gt;, which is a powerful library for creating data-driven diagrams using JavaScript.&lt;br /&gt;
&lt;br /&gt;
To keep it simple the final UI will look like this (see the screenshot at the end of the posting): We have a coordinate system in which we have a circle which can be moved inside that coordinate system. The coordinates can be entered in textfields and applied by clicking a button. Maybe there will be another post with some more meaningful use of D3 inside a Vaadin-Application in the future. But this tutorial aims on how to use JavaScript libraries inside Vaadin applications in general.. so let's start!&lt;br /&gt;
&lt;br /&gt;
We have to create two Java classes: &lt;b&gt;Diagram&lt;/b&gt;, &lt;b&gt;DiagramState&lt;/b&gt;&lt;br /&gt;
And we have to create one JavaScript file: &lt;b&gt;diagram_connector.js&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
First, let's have a look at the Java classes &quot;Diagram&quot; and &quot;DiagramState&quot;. The former extends &quot;AbstractJavaScriptComponent&quot;. It is the component that is added to the UI in the end (like a Button or a TextField). The latter extends JavaScriptComponentState and is just needed for the communication between Vaadin and JavaScript (or server and client). Here is the code:&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Diagram&lt;/b&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;@JavaScript({&quot;d3.v3.min.js&quot;,
        &quot;diagram_connector.js&quot;})
public class Diagram extends AbstractJavaScriptComponent {

    public void setCoords(final List&amp;lt;Integer&amp;gt; coords) {
        getState().setCoords(coords);
    }

    @Override
    public DiagramState getState() {
        return (DiagramState) super.getState();
    }
}&lt;/pre&gt;
The @JavaScript annotation lists all JavaScrip files that have to be used. The first one is the D3 Library and the second one is the file that we have to create later. In my case both files are in the same folder in which the Vaadin UI-extending class is (AND I had to copy the files into my war manually, but that's a configuration issue of IntelliJ..).&lt;br /&gt;
&lt;br /&gt;
The setCoords method is used to give the Diagram component a list with the x- and y-coordinates of the position the circle should be moved to. The list is delegated to a corresponding attribute of the DiagramState.&lt;br /&gt;
&lt;br /&gt;
The overriden method getState looks always the same (with exception of the name of the State class, of course). &lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;DiagramState&lt;/b&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class DiagramState extends JavaScriptComponentState {

    private List&amp;lt;Integer&amp;gt; coords;

    public List&amp;lt;Integer&amp;gt; getCoords() {
        return coords;
    }

    public void setCoords(final List&amp;lt;Integer&amp;gt; coords) {
        this.coords = coords;
    }
}&lt;/pre&gt;
The DiagramState class has an attribute which is a list of integers. It contains the x- and y-coordinates of the position the circle should be moved to (inside the coordinate system) as explained above. The rest is simple getters and setters for that attribute.&lt;br /&gt;
&lt;br /&gt;
Now let's have a look at the JavaScript file we have to create.&lt;br /&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;
&lt;b&gt;diagram_connector.js&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: javascript&quot;&gt;window.org_rapidpm_vaadinwithjs_Diagram = function() {
    var diagramElement = this.getElement();
    var diagramFrame = d3.select(diagramElement).append(&quot;svg:svg&quot;).attr(&quot;width&quot;, 500).attr(&quot;height&quot;, 500);
    diagramFrame.append(&quot;svg:circle&quot;).attr(&quot;cx&quot;, 250).attr(&quot;cy&quot;, 250).attr(&quot;r&quot;, 20).attr(&quot;fill&quot;, &quot;red&quot;);

    this.onStateChange = function() {
        var coords = this.getState().coords;
        d3.selectAll(&quot;circle&quot;).transition().attr(&quot;cx&quot;, parseInt(coords[0]));
        d3.selectAll(&quot;circle&quot;).transition().delay(500).attr(&quot;cy&quot;, parseInt(coords[1]));
    }
}
&lt;/pre&gt;
The first function assigment must always be done that way. Recognize that you assign a function to window.&amp;lt;fully qualified name of the class which extends AbstractJavaScriptComponent with underscores replacing the dots&amp;gt;.&lt;br /&gt;
&lt;br /&gt;
this.getElement() returns the corresponding DOM element for our diagram. (Think of document.getElementById(&amp;lt;the ID of the Diagram element&amp;gt;)).&lt;br /&gt;
&lt;br /&gt;
The following two lines are D3 related. We &quot;select&quot; our element and append a coordinate system to it with a width and height of 500. Then we insert a circle into that coordinate system at coordinates 250,250 (which is the center), a radius of 20 and a red fill color. For more information on how to use the D3 library in detail have a look at their website. There are some nice tutorials.&lt;br /&gt;
&lt;br /&gt;
The assignment of a function to this.onStateChange is always called when the state of the Diagram changes. This happens if we call the setCoords()-method of our Diagram class. If that is the case we get the coords from the Diagram's state. Recognize that coords (which is an Integer-List in the corresponding Java class) is a number array for JavaScript now. As next we select all circles (right, we only have one in our case). Then we move the circle to the new x- and y-coordinate (x = coords[0], y=coords[1]) via a transition (which simply looks cooler).&lt;br /&gt;
&lt;br /&gt;
That's all the magic. Now at last let's have a look at the main class with the init-method of our UI. We have to TextFields for x and y coordinate, a Button to apply the new coordinates and, of course, our Diagram which we can use as any other component as said above:&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;VaadinWithJavaScriptComponentsUI &lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class VaadinWithJavaScriptComponentsUI extends UI {
    final VerticalLayout layout = new VerticalLayout();   
    final TextField xCoordField = new TextField(&quot;X&quot;);
    final TextField yCoordField = new TextField(&quot;Y&quot;);
    final Button button = new Button(&quot;move circle&quot;);
    final Diagram diagram = new Diagram();
    final List&amp;lt;Integer&amp;gt; coords = new ArrayList&amp;lt;&amp;gt;();

    @Override
    protected void init(VaadinRequest request) {

        configureIntegerField(xCoordField);     //not interesting, just adding converter/validator to the textFields
        configureIntegerField(yCoordField);

        button.addClickListener(new Button.ClickListener() {   //ATTENTION! Here we get the coordinates from the textfields and apply them to our Diagram via calling diagram.setCoords()
            @Override
            public void buttonClick(Button.ClickEvent event) {
                if(xCoordField.isValid() &amp;amp;&amp;amp; yCoordField.isValid()){
                    coords.clear();
                    coords.add(Integer.parseInt(xCoordField.getValue()));
                    coords.add(Integer.parseInt(yCoordField.getValue()));
                    diagram.setCoords(coords);
                }
            }
        })
        //now we build the layout.
        layout.setSpacing(true);
        layout.addComponent(xCoordField);
        layout.addComponent(yCoordField);
        layout.addComponent(button);
        layout.addComponent(diagram);     //add the diagram like any other vaadin component, cool!
        setContent(layout);
    }

    private void configureIntegerField(final TextField integerField) {
        integerField.setConverter(Integer.class);
        integerField.addValidator(new IntegerRangeValidator(&quot;only integer, 0-500&quot;, 0, 500));
        integerField.setRequired(true);
        integerField.setImmediate(true);
    }
}&lt;/pre&gt;
&lt;br /&gt;
That's it.
Here is a screenshot of the result and some (kind of unspectacular) animated pictures.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-zuRvFBOm6jc/UlrtpHvmEfI/AAAAAAAAACU/hmEGqLwie7k/s1600/vaadinjs_First_Frame.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;179&quot; src=&quot;http://2.bp.blogspot.com/-zuRvFBOm6jc/UlrtpHvmEfI/AAAAAAAAACU/hmEGqLwie7k/s320/vaadinjs_First_Frame.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;center&gt;
&lt;/center&gt;
&lt;center&gt;
    &lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Tm5SFhBHtaY&quot; width=&quot;420&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;br /&gt;
sources: &lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://vaadin.com/blog/-/blogs/vaadin-7-loves-javascript-components&quot;&gt;https://vaadin.com/blog/-/blogs/vaadin-7-loves-javascript-components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>The power of the ContextResolver Part I</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="RapidPM"/>
        <published>2013-10-17T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/17/the-power-of-the-contextresolver-part-.html&quot; rel=&quot;tag&quot;&gt;The power of the ContextResolver Part I&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-17&quot;&gt;2013-10-17&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;How to use a ContextResolver? What can you do with this?
&lt;br/&gt;
Let´s say you have something like the following:

&lt;pre class=&quot;brush: java&quot;&gt;
@Inject @DemoLogicContext DemoLogic demologic;
&lt;/pre&gt;

But it depends on the transient context of the application to decide what is the right implementation of the interface DemoLogic.
&lt;br/&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-duqsdVLfujI/Ul66G0S0ZdI/AAAAAAABUXc/75QGLk5n0tk/s1600/DemoLogic.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-duqsdVLfujI/Ul66G0S0ZdI/AAAAAAABUXc/75QGLk5n0tk/s400/DemoLogic.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;
The implementation DemoLogicB is a normal JavaClass, KotlinDemoLogic is writen in &lt;a href=&quot;http://kotlin.jetbrains.org/&quot;&gt;Kotlin&lt;/a&gt;.
Both implementations are paired with a qualifier and a producer like the following in the picture.
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-Gcbyha4grzI/Ul688KeBy6I/AAAAAAABUXo/TyTdcQC4VnY/s1600/DemoLogicB.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-Gcbyha4grzI/Ul688KeBy6I/AAAAAAABUXo/TyTdcQC4VnY/s400/DemoLogicB.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;
At this point you have n implementations with n qualiefiers and maybe n producer. Or it must be possible to extend the running system with a few more different customer dependent implementations. To write this inside your code with an big if else tree it is not a good style. From the busineslogic point of view the right definition is:
&lt;pre class=&quot;brush: java&quot;&gt;
@Inject @DemoLogicContext DemoLogic demologic;
&lt;/pre&gt;
&lt;br/&gt;
For this you can use the producer methods from cdi. The way is quite easy:

&lt;pre class=&quot;brush: java&quot;&gt;
@Produces @DemoLogicContext
public DemoLogic create(){...}
&lt;/pre&gt;
With this you have the entry-point for the final injection point. You can extend the signature of the create method with more attributes. Mostly used is the BeanManager and/or InjectioPoint, but you can use your own classes. For example the &lt;b&gt;ContextResolver&lt;/b&gt;.

&lt;pre class=&quot;brush: java&quot;&gt;
@Produces @DemoLogicContext
public DemoLogic create(ContextResolver contextResolver){...}
&lt;/pre&gt;
The ContextResolver itself is an interface.. this means you have to use an qualifier to define the producer or implementing class for this interface.
&lt;pre class=&quot;brush: java&quot;&gt;
@Produces @DemoLogicContext
public DemoLogic create(@DemoLogicContext ContextResolver contextResolver){...}
&lt;/pre&gt;

&lt;br/&gt;
Now we have to implement the first class, called DemoContextResolver. The DemoContextResolver will be injected into every producer that must be able to decide something.
&lt;pre class=&quot;brush: java&quot;&gt;
public class DemoLogicProducer {
    private @Inject ManagedInstanceCreator creator;

    @Produces @DemoLogicContext
    public DemoLogic create(@New DemoContextResolver contextResolver){
        final Class&lt;DemoLogic&gt; beanType = DemoLogic.class;
    final AnnotationLiteral annotationLiteral = contextResolver.resolveContext(beanType);
    final DemoLogic demoLogic = creator.getManagedInstance(beanType, annotationLiteral);
    return demoLogic;
    }
    }
&lt;/pre&gt;
From this point you are able to decide what will be the implementation to use. For this example I wrote a very simple
version, but you can extend this to a tree of deciding ContextResolvers.
&lt;pre class=&quot;brush: java&quot;&gt;
public class DemoContextResolver implements ContextResolver {

    @Inject DemoContext demoContext;

    @Override public AnnotationLiteral resolveContext(Class&lt;?&gt; targetClass) {
        if(demoContext.getContextInfo()){
            return new AnnotationLiteral&lt;KotlinDemoLogicContext&gt;() {};
    } else{
    return new AnnotationLiteral&lt;DemoLogicContextB&gt;() {};
        }
        }
        }
&lt;/pre&gt;


The good thing is, that every module will be usable for itself. You can write jUnit-Tests per implementation. At runtime you can add more implementations.

Think about the possibility to change the controller for a GUI in this way ;-)
I will show this more in detail in my next blog entry (Part II)
&lt;br/&gt;

&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-pvUtFOprIyE/Ul-dDY48llI/AAAAAAABUX4/_HjQF9mLpyE/s1600/full-uml.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-pvUtFOprIyE/Ul-dDY48llI/AAAAAAABUX4/_HjQF9mLpyE/s400/full-uml.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>New series about JavaFX and CDI [GER]</title>
        <category label="CDI"/>
        <category label="JavaFX"/>
        <category label="JAXenter.de"/>
        <published>2013-10-23T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/23/new-series-about-javafx-and-cdi-[ger].html&quot; rel=&quot;tag&quot;&gt;New series about JavaFX and CDI [GER]&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-23&quot;&gt;2013-10-23&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today we started the new series about JavaFX and CDI at JAXenter.de.
&lt;a href=&quot;http://jaxenter.de/Developer-Cafe-168241&quot;&gt;http://jaxenter.de/Developer-Cafe-168241&lt;/a&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-23&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JAXenter.de - articles about CDI and JavaFX [GER]</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="JavaFX"/>
        <category label="JAXenter.de"/>
        <category label="Weld"/>
        <published>2013-10-31T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/10/31/jaxenter.de-articles-about-cdi-and-jav.html&quot; rel=&quot;tag&quot;&gt;JAXenter.de - articles about CDI and JavaFX [GER]&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-10-31&quot;&gt;2013-10-31&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;All articles [GER] are available under :&amp;nbsp;&lt;a href=&quot;http://jaxenter.de/Developer-Cafe-168241&quot;&gt;http://jaxenter.de/Developer-Cafe-168241&lt;/a&gt;&lt;br /&gt;
The series is about CDI and JavaFX in combination. First we are writing about the needed CDI basics and best-practices we need for the CDI/JavaFX bootstrapping.&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://jaxenter.de/artikel/CDI-lean-fuer-Alt-Neu-168240&quot;&gt;0001 - CDI – lean für Alt und Neu&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://jaxenter.de/artikel/CDI-entscheide-spaet-entscheide-gut-168301&quot;&gt;0002 - CDI – entscheide spät, entscheide gut&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://jaxenter.de/artikel/CDI-teile-reduziere-168466&quot;&gt;0003 - CDI – teile und reduziere&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-10-31&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>SpeedUp from Charts with Streams</title>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Streams"/>
        <published>2013-11-09T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/11/09/speedup-from-charts-with-streams.html&quot; rel=&quot;tag&quot;&gt;SpeedUp from Charts with Streams&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-11-09&quot;&gt;2013-11-09&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today we I am writing about the possibillity to speedup the JavaFX GUI elements with the new streams-API from JDK8.
&lt;br /&gt;
Let´s play with the original example from Oracle. The LineChart demo will be used as base for the following.
We are collecting/generating values for a line of points for every hundreds step. Al steps between are interpolated with splines.
For calculating the splines I am using the jakarta-commons math3 lib.&lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt; [1]&lt;/a&gt;&lt;br /&gt;
Normaly the following steps are needed to generate a LineChart.
- get the base values to show&lt;br /&gt;
- calculate the interpolated values&lt;br /&gt;
- create the line-elements&lt;br /&gt;
- fill the Line-Chart and show it&lt;br /&gt;
&lt;br /&gt;

&lt;b&gt;Get the base values to show&lt;/b&gt;&lt;br /&gt;

For this example we are generating the values we are needing. To hold the values for a List of curves
I am using a
&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
List&lt;List&lt;Integer&gt;&gt;
]]&gt;&lt;/script&gt;

Without streams you could do it like this:
&lt;br /&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix(){
final List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
   for (int i = 0; i&lt;200; i++){
   	final List&lt;Integer&gt; generatedDemoValuesForY = generateDemoValuesForY();
        	result.add(generatedDemoValuesForY);            
}
   	return result;
}

public List&lt;Integer&gt; generateDemoValuesForY(){
final Random random = new Random();
   final List&lt;Integer&gt; result = new ArrayList&lt;&gt;();
   for(int i = 0; i&lt;10; i++){
   	result.add(random.nextInt(100));
   }
   return result;
}
]]&gt;&lt;/script&gt;

But with streams I could write this in a more compact form.
The nice here is the possibility to concat the single steps. But this is only to show the new streams api.
There is no parallel part.

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
public List&lt;List&lt;Integer&gt;&gt; generateDemoValueMatrix(){
return Stream
   	.generate(this::generateDemoValuesForY)
         .limit(200)	//Anzahl Kurven
         .collect(Collectors.toList());
}

public List&lt;Integer&gt; generateDemoValuesForY(){
final Random random = new Random();
   return Stream
   	.generate(() -&gt; random.nextInt(100))
         .limit(10)
         .collect(Collectors.toList());
}
]]&gt;&lt;/script&gt;
&lt;b&gt; Calculate the interpolated values &lt;/b&gt;

Now I will start to caclculate the interpolated values. For this I am using the commons-math3 lib from Apache.
The way to do this is short and straid forward.
- Get the base values from the curve you want to calculate on &lt;br /&gt;
- Choose the algorithm you want to use&lt;br /&gt;
- Fill the base values as init into the function&lt;br /&gt;

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
private UnivariateFunction createInterpolateFunction(
final List&lt;Integer&gt; values){

   final double[] valueArrayX = new double[values.size()];
   for (int i = 0; i &lt; valueArrayX.length; i++) {
   	valueArrayX[i] = (double)i* STEP_SIZE;
  	}

   final double[] valueArrayY = new double[values.size()];
   int i=0;
   for (final Integer value : values) {
   	valueArrayY[i] = (double) value.intValue();
         i= i+1;
  	}

   final UnivariateInterpolator interpolator = 
new SplineInterpolator();
   final UnivariateFunction function = 
interpolator.interpolate(valueArrayX, valueArrayY);
  	return function;
}
]]&gt;&lt;/script&gt;

Now we are able to caculate the interpolated values.
This is something we can do in parallel for every curve. This means that we can start with the speed up.
The importand parts are the
&quot;.parallelStream()&quot; to start a Thread for eveery elements of the List
and during the &quot;map(v-&amp;gt; ... )&quot; phase the calculation is done. Every task is put to the Root - Fork-And-Join Pool.

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
private List&lt;List&lt;Double&gt;&gt; getValuesForSeries() {
final List&lt;List&lt;Integer&gt;&gt; demoValueMatrix =
generateDemoValueMatrix();
   final List&lt;List&lt;Double&gt;&gt; collect = demoValueMatrix
   	.parallelStream()
         	.map(v -&gt; {
         		final UnivariateFunction interpolateFunction = 
createInterpolateFunction(v);
              	//baue Kurve auf
                final int anzahlValuesInterpolated = 
(v.size()-1) * STEP_SIZE;
               	final List&lt;Double&gt; result = new ArrayList&lt;&gt;();
                for (int i = 0; i &lt; anzahlValuesInterpolated-1; i++) {
                	final double valueForY = 
interpolateFunction.value(i);
                     	result.add(valueForY);
              	}
                return result;
       	})
         .collect(Collectors.toList());
return collect;
}

]]&gt;&lt;/script&gt;
&lt;b&gt;Create the line-elements&lt;/b&gt;

The grafical elements for the Line-Chart are created in the same way. In parallel for every curve.

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[

private List&lt;XYChart.Series&gt; generateNextSeries(){
final List&lt;XYChart.Series&gt; chartSeries = getValuesForSeries()
   	.parallelStream()
         	.map(v -&gt; {
        		final XYChart.Series nextSeries = new XYChart.Series();
               	int i = 0;
                for (final Double valueForY : v) {
                	final XYChart.Data data 
= new XYChart.Data(i, valueForY);
                  	nextSeries.getData().add(data);
                     	i = i + 1;
              	}
                return nextSeries;
        	}).collect(Collectors.toList());
   return chartSeries;
}
]]&gt;&lt;/script&gt;
&lt;b&gt; Fill the Line-Chart and show it&lt;/b&gt;

Now the last step is the filling of the Line-Chart itself.
This is done in a seriel way. No parralel way is possible in the moment.
But this is not the part that could bring a speed-up.

&lt;script class=&quot;brush: java&quot; type=&quot;syntaxhighlighter&quot;&gt;&lt;![CDATA[
final List&lt;XYChart.Series&gt; serieses = generateNextSeries();
final ObservableList&lt;XYChart.Series&gt; data = lineChart.getData();
data.addAll(serieses);
]]&gt;&lt;/script&gt;

&lt;b&gt; Lesson Learned&lt;/b&gt;


What we can see is the possibillity to speed up the GUI part in several ways.
Not only the generating of the values itself. The creation of the grafical elements could be done in parralel too.
The seriell Version LineChartSerialDemo, needed for the 11´th round 2.799.209.417ns and the parralel version
LineChartDemo was done in 261.545.220ns.
This is a speed up of 10 at my MacBookPro.

Happy coding..








&lt;!--10--&gt;&lt;/integer&gt;&lt;/integer&gt;&lt;!--200--&gt;&lt;/list&gt;&lt;/list&gt;&lt;/pre&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-11-09&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Vaadin with CDI</title>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Vaadin"/>
        <published>2013-11-18T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/11/18/vaadin-with-cdi.html&quot; rel=&quot;tag&quot;&gt;Vaadin with CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-11-18&quot;&gt;2013-11-18&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Todays post will show a mini tutorial on how to use CDI with the current Vaadin version (7.1.8). To keep it simple, I will just extend the official Vaadin-HelloWorld-Program a bit.&lt;br /&gt;
&lt;br /&gt;
The normal Non-CDI-HelloWorld-Program works like that: There is a &quot;Click Me&quot;-Button on the screen and when you click that button, a label with the text &quot;Thanks for clicking&quot; is added below that button.&lt;br /&gt;
I will extend that HelloWorld-Program by using (injecting) our RapidPM-CDILogger which prints a WARN-Message on the console (&quot;Button was clicked&quot;).&lt;br /&gt;
&lt;br /&gt;
The project structure looks like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-OQBT3fV8CxA/UopF9jVPrII/AAAAAAAAACo/br335D8SVJs/s1600/structure.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://3.bp.blogspot.com/-OQBT3fV8CxA/UopF9jVPrII/AAAAAAAAACo/br335D8SVJs/s320/structure.PNG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
I created that Vaadin-project via Maven (see &lt;a href=&quot;https://vaadin.com/download&quot;&gt;https://vaadin.com/download&lt;/a&gt;).&lt;br /&gt;
&lt;br /&gt;
To get the program working, we have to make the following changes:&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Add the Vaadin-CDI-support and the RapidPM-Modules as dependencies in the pom.xml&lt;/li&gt;
    &lt;li&gt;Create a log4j.properties in the resources-folder to configure the logger&lt;/li&gt;
    &lt;li&gt;Modify the Vaadin UI-Class (called MyVaadinUI per default)&lt;/li&gt;
&lt;/ol&gt;
That's all. So let's start:&lt;br /&gt;
&lt;br /&gt;
1)&lt;br /&gt;
Add the following dependency entries to the pom.xml:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;dependency&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;groupId&amp;gt;com.vaadin&amp;lt;/groupId&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;artifactId&amp;gt;vaadin-cdi&amp;lt;/artifactId&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;version&amp;gt;1.0.0.alpha1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&amp;nbsp;
&amp;lt;dependency&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;groupId&amp;gt;org.rapidpm.modul&amp;lt;/groupId&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;artifactId&amp;gt;cdi-commons&amp;lt;/artifactId&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;version&amp;gt;1.2-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;
&amp;lt;/dependency&amp;gt; &lt;/pre&gt;
&lt;br /&gt;
The first dependency is needed to get Vaadin working with CDI, the second is needed to use our RapidPM-Logger.&lt;br /&gt;
&lt;span style=&quot;color: red;&quot;&gt;Attention&lt;/span&gt;: The logger won't work with cdi-commons in version 1.1.1&lt;br /&gt;
&lt;br /&gt;
2)&lt;br /&gt;
Create a file called log4j.properties:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: xml&quot;&gt;log4j.rootLogger=DEBUG,stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n&lt;/pre&gt;
&lt;br /&gt;
That file is needed for log4j, which is used by our CDILogger. Put it into src/main/resources. I had to create that resources-folder and mark it as a source-folder manually.&lt;br /&gt;
&lt;br /&gt;
3)&lt;br /&gt;
Modify the MyVaadinUI-Class so it looks like the following:&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import com.vaadin.annotations.Theme;
import com.vaadin.annotations.VaadinServletConfiguration;
import com.vaadin.cdi.CDIUI;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import org.rapidpm.demo.cdi.commons.logger.CDILogger;
import org.rapidpm.module.se.commons.logger.Logger;

import javax.inject.Inject;
import javax.servlet.annotation.WebServlet;

@Theme(&quot;mytheme&quot;)
@SuppressWarnings(&quot;serial&quot;)
@CDIUI
public class MyVaadinUI extends UI
{

    /*
    @WebServlet(value = &quot;/*&quot;, asyncSupported = true)
    @VaadinServletConfiguration(productionMode = false, ui = MyVaadinUI.class, widgetset = &quot;VaadinWithCDI.AppWidgetSet&quot;)
    public static class Servlet extends VaadinServlet {
    }
    */

    @Inject
    @CDILogger
    private Logger logger;

    @Override
    protected void init(VaadinRequest request) {
        final VerticalLayout layout = new VerticalLayout();
        final Button button = new Button(&quot;Click Me&quot;);
        button.addClickListener(new Button.ClickListener() {
            public void buttonClick(ClickEvent event) {
                layout.addComponent(new Label(&quot;Thank you for clicking&quot;));
                logger.warn(&quot;Button was clicked&quot;);
            }
        });
        configureLayout(layout, button); //Only configuring layouting-issues
    }

    private void configureLayout(final VerticalLayout layout, final Button button) {
        layout.setMargin(true);
        layout.setWidth(&quot;100%&quot;);
        layout.addComponent(button);
        setContent(layout);
    }
}&lt;/pre&gt;
Explanation:&lt;br /&gt;
- The&amp;nbsp;@CDIUI Annotation at line 19 is needed to make the project use CDI. &lt;br /&gt;
- Recognize that the inner class at lines 24-27 must be commented out (you can delete those lines completely, of course). If this isn't commented out the Logger is not injected properly and a NullPointerException is thrown when calling methods of it.&lt;br /&gt;
- The CDILogger is injected in lines 30-32&lt;br /&gt;
- When the button is clicked, a label is added to the layout and a WARN-message is posted on the console via our logger (lines 40/41).&lt;br /&gt;
&lt;br /&gt;
-----------------------------&lt;br /&gt;
&lt;br /&gt;
The result looks like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-sx_9t_rnK1Q/UopGFl2xv4I/AAAAAAAAACw/9N0gKNtdG48/s1600/result.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;146&quot; src=&quot;http://3.bp.blogspot.com/-sx_9t_rnK1Q/UopGFl2xv4I/AAAAAAAAACw/9N0gKNtdG48/s320/result.PNG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
links:&lt;br /&gt;
-&amp;nbsp; &lt;a href=&quot;https://vaadin.com/wiki/-/wiki/Main/Vaadin-CDI-integration&quot;&gt;Vaadin-CDI-integration&lt;/a&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-11-18&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Adam Bien´s afterburner.fx internals explained</title>
        <category label="Adam Bien afterburner.fx"/>
        <category label="CDI"/>
        <category label="dependency injection"/>
        <category label="JavaFX"/>
        <category label="MVP"/>
        <category label="relection"/>
        <published>2013-12-09T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/12/09/adam-biens-afterburner.fx-internals-ex.html&quot; rel=&quot;tag&quot;&gt;Adam Bien´s afterburner.fx internals explained&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-12-09&quot;&gt;2013-12-09&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today I am writing about Adam´s framework afterburner.fx.
This is a MVP framework for dependency injection into JavaFX apps.
It is very small, containing only two classes.&lt;br /&gt;
&lt;br /&gt;
What could you do with this afternburner.fx? What are the restrictions?&lt;br /&gt;
&lt;br /&gt;
Let´s start with the project init. You will need only a normal pom.xml, plain no special libs are needed. I am using JDK8 because of the simple JavaFX config. (no config ;-) )&lt;br /&gt;
&lt;br /&gt;
Convention over Configuration:&lt;br /&gt;
CoC is the main in this framework. This means, that you don´t need to configure something. But you have to follow the base structure that this framework is expecting.&lt;br /&gt;
&lt;br /&gt;
As app-base-pkg I am using &lt;b&gt;org.rapidpm.demo.jaxenter.blog008&lt;/b&gt;. (you could get all from my git repo under&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/jaxenter.de-0008-afterburner&quot;&gt;https://bitbucket.org/rapidpm/jaxenter.de-0008-afterburner&lt;/a&gt;&amp;nbsp;) The main class will be Main, this is the JavaFX Application Class with the basic boostrapping intro. The sup-pkg orig contains the pkg presentation with only one GUI module called demo. For every GUI Module you will need two classes. The first one is a class with a name ending with View and the second one will end with Presenter. In our examplke you will find the two classes, DemoView and DemoPresenter.&lt;br /&gt;
&lt;br /&gt;
The DemoPresenter is nothing else as the Controller class for the View, declared inside the fxml file.&lt;br /&gt;
The fxml File itself must be named demo.fxml and at the same place as the Presenter/Controller class.&lt;br /&gt;
&lt;br /&gt;
&amp;nbsp;The DemoView is the GUI Component itself and must extend the FXMLView class from the framework.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The View - FXMView&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
The DemoView have a default constructor, calling the init method. &lt;b&gt;init(Class clazz, String conventionalName)&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public FXMLView() {
    this.init(getClass(), getFXMLName());
}

private void init(Class clazz, String conventionalName) {
    final URL resource = clazz.getResource(conventionalName);
    String bundleName = getBundleName();
    ResourceBundle bundle = getResourceBundle(bundleName);
    this.loader = new FXMLLoader(resource, bundle);
    this.loader.setControllerFactory(new Callback&lt;class&gt;, Object&amp;gt;() {
        @Override
        public Object call(Class p) {
        return InjectionProvider.instantiatePresenter(p);
        }
        });
        try {
        loader.load();
        } catch (Exception ex) {
        throw new IllegalStateException(&quot;Cannot load &quot;
        + conventionalName, ex);
        }
        }
    &lt;/class&gt;&lt;/pre&gt;
The init will load the ResourceBundle and the fxml-file with an instance of the class FXMLLoader. The most importand step is the setting of the ControllerFactory. Inside the instance of the ControllerFactory you will see the methodcall&lt;b&gt; InjectionProvider.instantiatePresenter(p);&lt;/b&gt;&amp;nbsp; This ist the place where the injection will be taken place. One big point to know is, only inside a controller/presenter you will be able to use injection. Inside the Presenter no injection is available.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The InjectionProvider - DI with reflection&lt;/b&gt;&lt;br /&gt;
The InjectionProvider ist the heart of the framework. The base steps are the following:&lt;br /&gt;
- create an instance&lt;br /&gt;
- inject the attributes with the annotation Inject&lt;br /&gt;
- call the method with annotation Postconstruct&lt;br /&gt;
Thats all... but how it is realized?&lt;br /&gt;
&lt;br /&gt;
The first step is quite easy, just call &lt;b&gt;clazz.newInstance()&lt;/b&gt;.&lt;br /&gt;
&lt;br /&gt;
Step two is a littele bit more complex. You have to instantiate the attributes but the the attributes inside too. Thes means the injection must be done recursive. To do this you will check the attributes if they are annotated with Inject, if so, do the same for this instance.. and so on..&lt;br /&gt;
There is a small thig to know. The implementation from Adam will only create one instance of every used class. This means you will get &lt;b&gt;only singletons!!&lt;/b&gt;&amp;nbsp;And this for the complete application.&lt;br /&gt;
&lt;br /&gt;
The last step is easy again, call all methods with the annotation Postconstruct per reflection.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;static Object instantiateModel(Class clazz) {
    Object product = models.get(clazz);
    if (product == null) {
        try {
            product = injectAndInitialize(clazz.newInstance());
            models.put(clazz, product);
        } catch (InstantiationException | IllegalAccessException ex) {
            throw new IllegalStateException(
                &quot;Cannot instantiate view: &quot; + clazz, ex);
        }
    }
    return product;
}

static Object injectAndInitialize(Object product) {
    injectMembers(product);
    initialize(product);
    return product;
}

static void injectMembers(final Object instance) {
    Class aClass = instance.getClass();
    Field[] fields = aClass.getDeclaredFields();
    for (final Field field : fields) {
        if (field.isAnnotationPresent(Inject.class)) {
            Class type = field.getType();
            final Object target = instantiateModel(type);
            AccessController.doPrivileged(new PrivilegedAction() {
                @Override
                public Object run() {
                    boolean wasAccessible = field.isAccessible();
                    try {
                        field.setAccessible(true);
                        field.set(instance, target);
                        return null; // return nothing...
                    } catch (IllegalArgumentException | 
                                IllegalAccessException ex) {
                        throw new IllegalStateException(
                            &quot;Cannot set field: &quot; + field, ex);
                    } finally {
                        field.setAccessible(wasAccessible);
                    }
                }
            });
        }
    }
}
static void initialize(Object instance) {
    invokeMethodWithAnnotation(instance, PostConstruct.class);
}
&lt;/pre&gt;
&lt;b&gt;Lesson Learned&lt;/b&gt;&lt;br /&gt;
The framework afterburner.fx from Adam Bien is really small without any configuration. You could use this to inject Instances per annotation Inject. If you want to use this inside your application you have to know the following:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;There are no Scopes, all instances will have the the lifecycle of the application. The only way to terminate them earlier is to call the method forgettAll(), but this will terminate all instances. The method annotated with PreDestroy will be called before. You could not select the order the instances are destroyed.&lt;/li&gt;
    &lt;li&gt;All instances are singletons&lt;/li&gt;
    &lt;li&gt;No Producers, this means you could not abstract over an Interface layer. Or you can not switch between different implementations like you could do with Qualifiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
    If you could deal with this limitations, this will be good form you. But to use this to learn more about injection works, this is a good project to play with.&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-12-09&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Our new project: Lego® Mindstorms® M1ndSuite</title>
        <category label="EV3"/>
        <category label="IoT"/>
        <category label="Lego"/>
        <category label="M1ndsuite"/>
        <category label="M2M"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <published>2013-12-16T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/12/16/our-new-project--lego-mindstorms-m1nds.html&quot; rel=&quot;tag&quot;&gt;Our new project: Lego® Mindstorms® M1ndSuite&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-12-16&quot;&gt;2013-12-16&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;*drum roll*..............Voila! Today we officially announce our new project called &lt;b&gt;M1ndSuite&lt;/b&gt;. It will be developed parallel to our cdi-commons project.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;h2&gt;
        What is it / What is it going to be?&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;
    In general:&amp;nbsp;&lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;(or &quot;M1ndSuite&quot;) will be a gui- (web-)application for controlling and/or monitoring Lego® Mindstorms® robots.&lt;br /&gt;
    &lt;br /&gt;
    For those, who don't know what Lego® Mindstorms® is: The official &lt;a href=&quot;http://www.lego.com/en-gb/mindstorms/products/ev3/31313/&quot;&gt;website &lt;/a&gt;says:&lt;br /&gt;
    &lt;blockquote class=&quot;tr_bq&quot;&gt;
        &lt;span style=&quot;background-color: white; color: #63696a; font-family: verdana; font-size: 12px;&quot;&gt;LEGO® MINDSTORMS® EV3 has arrived! Combining the versatility of the LEGO building system with the most advanced technology we’ve ever developed, unleash the creative powers of the new LEGO MINDSTORMS EV3 set to create and command Robots that walk, talk, think and do anything you can imagine. Follow the step-by-step 3D building instructions to create TRACK3R, R3PTAR, SPIK3R, EV3RSTORM and GRIPP3R and bring them to life with an easy, intuitive and icon-based programming interface.&lt;/span&gt;&lt;/blockquote&gt;
    Sounds cool, doesn't it?&lt;br /&gt;
    &lt;br /&gt;
    Image what you could create with all those possilities! Or look what others already did :-D&lt;br /&gt;
    &lt;br /&gt;
    &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
        &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;http://img.youtube.com/vi/MQvG6IgrgYQ/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;http://youtube.googleapis.com/v/MQvG6IgrgYQ&amp;source=uds&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&amp;nbsp;&amp;nbsp;&lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;http://img.youtube.com/vi/tSXTirkNrCA/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;http://youtube.googleapis.com/v/tSXTirkNrCA&amp;source=uds&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
    &lt;br /&gt;
    &lt;div&gt;
        But let's come back to our planned &lt;b&gt;MindSuite&lt;/b&gt;&amp;nbsp;application. At this juncture we can't tell what will be the &lt;b&gt;definite &lt;/b&gt;features because we first have to become acquainted with the whole subject. But &lt;u&gt;possible features&lt;/u&gt; might be:&lt;br /&gt;
        &lt;ul&gt;
            &lt;li&gt;offering pre-built programs for different robots&lt;/li&gt;
            &lt;li&gt;possibility to create new (persistent) programs for any robot (like with the official Lego software) and real-time transfer of these into the robot's operating system&lt;/li&gt;
            &lt;li&gt;real-time monitoring of the robot's sensors / motors / ...&lt;/li&gt;
            &lt;li&gt;real-time control for the robot (e.g. &quot;move forward/backward&quot;, &quot;turn left/right&quot;, &quot;play sound xyz&quot; ...)&lt;/li&gt;
        &lt;/ul&gt;
        We can imagine &lt;b&gt;plenty &lt;/b&gt;of features, but (as already said) at this early moment we first have to get deeper into the topic. Our Mindstorm hardware just arrived on friday and we have just done our first experiments (we have built the Lego Mindstorm robot Gripp3r and loaded the standard Lego programs for it onto the EV3 brick so we could remote control it with the infrared remote control).&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        What frameworks will be used?&lt;/h2&gt;
    &lt;div&gt;
        Well, of course nothing is certain at this moment (we don't even have certain features xD) but chances are good that the (web-)application will use the spring framework.&lt;/div&gt;
    &lt;div&gt;
        There is already a java API for creating programs for the robots called LeJOS (&lt;a href=&quot;http://www.lejos.org/&quot;&gt;http://www.lejos.org/&lt;/a&gt;). We're pretty sure that we will use that to realize the communication between the MindSuite and the robots.&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h2&gt;
        Why are we doing this?&lt;/h2&gt;
    &lt;div&gt;
        Everyone is talking about the topics M2M (Machine-to-Machine) / IoT (Internet of Things) at the moment. We are very excited about these topics, too! And we love the idea behind Lego Mindstorms with all its possibilities! So creating a new software for controlling and monitoring those robots seems to be the perfect chance for us to get into that stuff. We can't wait to get started!&lt;br /&gt;
        &lt;br /&gt;
        As always with our projects, MindSuite will be open source and its code will be hosted on bitbucket. You will find the code at&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/m1ndsuite&quot;&gt;https://bitbucket.org/rapidpm/m1ndsuite&lt;/a&gt;,&amp;nbsp;but at this moment you won't find anything there of course. Give us some weeks ( or months? :) )..we don't have a roadmap yet. But we will regularly post updates on our blog to keep you informed of the current state, be curious! :D&lt;br /&gt;
        &lt;br /&gt;
        &lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s1600/mindsuite1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;81&quot; src=&quot;http://1.bp.blogspot.com/-eFqSgckFOXM/UqdDQzty4BI/AAAAAAAAAF4/wSqQjJA-h6c/s320/mindsuite1.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;first logo concept&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
        &lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s1600/DSCN0564%5B1%5D.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://1.bp.blogspot.com/-5zQKxZDJLAs/Uq244aBMYtI/AAAAAAAAAGI/A2VX2wV2HkU/s320/DSCN0564%5B1%5D.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;we already built one of the Lego Mindstorms (Gripp3r)&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;
        &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-12-16&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Developing leJOS programs with IntelliJ on Windows</title>
        <category label="0.5.0"/>
        <category label="EV3"/>
        <category label="IntelliJ"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <category label="windows"/>
        <published>2013-12-27T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2013/12/27/developing-lejos-programs-with-intelli.html&quot; rel=&quot;tag&quot;&gt;Developing leJOS programs with IntelliJ on Windows&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2013-12-27&quot;&gt;2013-12-27&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;a href=&quot;http://www.lejos.org/&quot;&gt;LeJOS&lt;/a&gt; is the java library which is needed to develop and run java programs on Lego Mindstorms robots. Four days ago, the newest alpha version 0.5.0 was released. One big new feature is an all new gui-menu which is displayed on the LCD-Display for executing programs on the brick without executing a remote command (via telnet or SSH).&lt;br /&gt;
&lt;br /&gt;
The official guides use eclipse as the IDE for developing lejos programs and in this tutorial I want to explain how to develop programs with IntelliJ on Windows. I will also show how to transfer finished programs to the brick and execute it via remote connection and via the new display menu.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    Initial situation &lt;/h2&gt;
&lt;br /&gt;
You have created the bootable MicroSD-Card for running Lejos (version 0.5.0-alpha) on the Mindstorms brick and inserted it into the brick (a tutorial on how to create is can be found &lt;a href=&quot;http://sourceforge.net/p/lejos/wiki/Creating%20a%20bootable%20SD%20card/&quot;&gt;here&lt;/a&gt;. Recognize that the procedure has changed from version 0.4.0-alpha to 0.5.0-alpha). You also have a compatible WiFi-Stick (e.g. Netgear WNA1100) which is inserted into the USB-Plug on the brick.&lt;br /&gt;
&lt;br /&gt;
So let's start. What we will do is:&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Clone the official lejos git repository to get the sources which we need to build our program&lt;/li&gt;
    &lt;li&gt;Create and configure the IntelliJ-Project for our lejos program&lt;/li&gt;
    &lt;li&gt;Write the code for the program (the usual HelloWorld from the official guide)&lt;/li&gt;
    &lt;li&gt;Create a runnable JAR-File of the program&lt;/li&gt;
    &lt;li&gt;Transfer the JAR-File onto the brick via WiFi / SSH&lt;/li&gt;
    &lt;li&gt;Execute the program via the new display menu&lt;/li&gt;
    &lt;li&gt;Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
    1 Clone the official lejos git repository to get the sources which we need to build our program&lt;/h3&gt;
For cloning the lejos git repository you must have installed git (which can be obtained from &lt;a href=&quot;http://git-scm.com/download/win&quot;&gt;here&lt;/a&gt;). For comfort (not having to use single git commands on the command line) we used the free-to-use (for non-commercial use) GUI-Tool SmartGitHg 5
(version 5.0.5) by syntevo which rocks and can be downloaded on the &lt;a href=&quot;http://www.syntevo.com/smartgithg/&quot;&gt;official site&lt;/a&gt;. When you start the program for the first time you have to tell SmartGitHg where your git installation is located, but thats quite straight-forward and the wizard will help you doing that. After you have started and configured SmartGitHg choose:&lt;br /&gt;
&quot;Project&quot; --&amp;gt; &quot;Clone ...&quot;&lt;br /&gt;
Then choose:&lt;br /&gt;
&quot;Remote Git, Mercurial or Subversion Repository&quot; and enter git://git.code.sf.net/p/lejos/ev3 into the textfield.&lt;br /&gt;
Then click &quot;Next&quot;. In the next window make sure both check boxes are checked. Click &quot;Next&quot; again. Choose a path where the source should be copied to (We chose the path &quot;F:\projects\ev3-sources&quot; which we will call EV3-SOURCES by now). Then click &quot;Next&quot; again. On the last window choose the option &quot;Open in new project&quot; and leave the name in the textfield as it is. Finally press &quot;Finish&quot;. SmartGitHg will then start downloading all files from the repository. This might need some minutes. You can watch the progress in the right bottom corner of the window.&lt;br /&gt;
After the download has finished the window should look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s1600/smartgit.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;346&quot; src=&quot;http://3.bp.blogspot.com/-xkC9OuClBk8/UrwFhuo8rQI/AAAAAAAAAHE/r32vb_FL6F0/s640/smartgit.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;SmartGitHg, downloaded EV3-sources&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
At last we have to choose the 0.5.0-alpha tag branch. Choose &quot;Branch&quot; --&amp;gt; &quot;Checkout...&quot;. In the following window choose the 0.5.0-alpha tag branch as shown in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s1600/checkout.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;427&quot; src=&quot;http://3.bp.blogspot.com/-mgazNPhkl0A/UrwG1L3NueI/AAAAAAAAAHM/PkYvjIjN3co/s640/checkout.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;checking out the 0.5.0-alpha tag branch&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Press &quot;Check out&quot; and then choose &quot;Check out commit without switching to a branch&quot;.&lt;br /&gt;
&lt;br /&gt;
Now that we have the lejos sources in version 0.5.0-alpha let's start creating our IntelliJ project for our HelloWorld-Program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    2 Create and configure the IntelliJ-Project for our lejos program&lt;/h3&gt;
Start IntelliJ and choose: &quot;File&quot; --&amp;gt; &quot;New Project...&quot;. Choose &quot;Java Module&quot; and call it HelloWorld. We saved it in &quot;F:\projects\HelloWorld&quot; (which I will call HELLOWORLD by now). Then press &quot;Next&quot; and &quot;Finish&quot;.&lt;br /&gt;
&lt;br /&gt;
Now that we have a raw new project, lets first configure it before creating the HelloWorld-code. Open the project settings (&quot;File&quot;--&amp;gt;&quot;Project Structure&quot;) and click on &quot;modules&quot;. Then click on &quot;Add Content Root&quot; and choose EV3-SOURCES\ev3-classes\src and click on &quot;OK&quot;. Do the same with EV3-SOURCES\DBusJava\src.&lt;br /&gt;
As next click on &quot;Librarys&quot; on the &quot;Project Structure&quot;-window. Click on the green &quot;+&quot; and choose &quot;Java&quot;. Then choose the folder EV3-SOURCES\ev3-classes\lib and click on &quot;OK&quot;. Click on &quot;OK&quot; again.&lt;br /&gt;
Press &quot;Apply&quot; and &quot;OK&quot; to close the project structure window now.&lt;br /&gt;
Your project structure should now look like this:&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s1600/projectstructure.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;212&quot; src=&quot;http://1.bp.blogspot.com/-c-xu3vKyXxc/UrwK2KtZTRI/AAAAAAAAAHY/IbJkJ7Tbf7E/s400/projectstructure.PNG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Project structure&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;
    3 Write the code for the program&lt;/h3&gt;
Now let's create the code. Create a class in HelloWorld\src and call it &quot;Main&quot;. Make it look like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.Button;
import lejos.hardware.lcd.LCD;

public class Main {
&amp;nbsp;&amp;nbsp;&amp;nbsp; public static void main(String[] args) {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.drawString(&quot;First EV3 Program&quot;, 0, 5);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Button.waitForAnyPress();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.clear();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LCD.refresh();

&amp;nbsp;&amp;nbsp;&amp;nbsp; }
}
&amp;nbsp;&lt;/pre&gt;
If the imports fail, something went wrong with the configuration of the project structure.&lt;br /&gt;
&lt;br /&gt;
As you can see the class implements the Main-method. It will show &quot;First EV3 Program&quot; on the display of your EV3-Brick until you press any button on the brick.&lt;br /&gt;
&lt;br /&gt;
That's it. Now we are ready to create a runnable JAR of our program.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    4 Create a runnable JAR-File of the program&lt;/h3&gt;
Open the project settings again (&quot;File&quot; --&amp;gt; &quot;Project Structure...&quot;). Click on &quot;Artifacts&quot;.Click on the green &quot;+&quot; and choose &quot;Jar&quot; --&amp;gt; &quot;From modules with dependencies...&quot;. Leave everything as it is in the new window but enter &quot;Main&quot; into the field &quot;Main Class&quot; like in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;/div&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s1600/jarfile.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;247&quot; src=&quot;http://2.bp.blogspot.com/-I0Omt2-yKsI/UrwNnAooY0I/AAAAAAAAAHg/oQ7iQyEsoWU/s400/jarfile.PNG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Creating jar-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
Then click on &quot;OK&quot;. Click on &quot;Apply&quot; and close the Project Structure-Window. Now we need to do one last thing before creating our ready-to-execute Jar. There is a new folder in your HelloWorld-src folder called &quot;META-INF&quot;. It contains a MANIFEST.MF-File. It contains two lines as you can see in the following picture:&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s1600/manifest.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;206&quot; src=&quot;http://2.bp.blogspot.com/-ukWYeYU4foE/UrwOmGfqikI/AAAAAAAAAHo/_BZLPRqXOdM/s400/manifest.PNG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;MANIFEST-file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Now you need to add the following line:&lt;br /&gt;
Class-Path: /home/root/lejos/lib/ev3classes.jar /home/root/lejos/libjna/usr/share/java/jna.jar&lt;br /&gt;
&lt;br /&gt;
You can copy/paste that line because the paths are absolute paths on the MicroSD-card.&lt;br /&gt;
&lt;br /&gt;
That's it. Save everything and choose &quot;Build&quot;--&amp;gt;&quot;Build artifacts...&quot;--&amp;gt;HelloWorld.jar--&amp;gt;&quot;build&quot;. If you get some warnings that's okay. If you get errors anything went wrong (let us know). Now we have created a Jar-File (in HELLOWORLD\out\artifacts\HelloWorld_jar) which we can transfer via WiFi to the EV3-Brick.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    5 Transfer the JAR-File onto the brick via WiFi / SSH&lt;/h3&gt;
To transfer the jar-file from our workstation to the EV3-Brick we need a connection to it. So start your EV3 with the lejos-MicroSD-card and the WiFi-Stick inserted. Make sure that your robot has an IP-Adress in your network. A description on how this is done via the menu can be found &lt;a href=&quot;http://sourceforge.net/p/lejos/wiki/Configuring%20Wifi/&quot;&gt;here&lt;/a&gt; (that didn't work for us, so we had to edit the file /etc/wpa_supplicant.conf on the microSD-card by hand).&lt;br /&gt;
&lt;br /&gt;
Now that our EV3 is online and connected to the WiFi we will transfer the jar-file onto the robot. Therefore we need to download pscp.exe from &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&quot;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;. We downloaded it to &quot;C:\Users\Marco\Downloads&quot;.&lt;br /&gt;
Open up a cmd-box (Windows-Button --&amp;gt; enter &quot;cmd&quot;, then choose cmd.exe) and navigate to the folder which contains the downloaded pscp.exe. Then enter the following command:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
    pscp -scp HELLOWORLD\out\artifacts\HelloWorld_jar\HelloWorld.jar root@IP_OF_EV3:/home/lejos/programs&lt;/blockquote&gt;
&lt;br /&gt;
&lt;br /&gt;
If you are asked for the root password just hit enter. The root user on the linux-system on the microSD card has no password. In my case that looked like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s1600/cmd.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;171&quot; src=&quot;http://4.bp.blogspot.com/-lKKQjALHNK4/Urwavl4KbVI/AAAAAAAAAIA/pegIRZIfZaU/s640/cmd.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;transfering the jar-file onto the brick&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
That's it! The file now was copied onto the EV3-brick (in /home/lejos/programs). Time to execute our program.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    6 Execute the program via the new display menu&lt;/h3&gt;
On the display menu move to &quot;Files&quot; (by pressing the right button). Press &quot;Enter&quot; (the middle button). Now you will see &quot;HelloWorld.jar&quot; on the display. Press &quot;Enter&quot; again. Now you will see &quot;Execute Program&quot; on the display. Press &quot;Enter&quot; once more and enjoy the magic :). It will need some seconds where you will only see a blank display. But then the &quot;First EV3 Program&quot; will be displayed as expected. When you press any button the program will end as expected and you will be back at the menu. Congratulations for running your lejos program developed with IntelliJ on Windows!&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    7 Alternative way of executing the program: Execute the program via WiFi / SSH (the old-fashioned pre-0.5.0-way)&lt;/h3&gt;
Sometimes you might want to run your programs which you uploaded onto the brick remotely instead of pressing buttons on the brick. One solution for this is to use a ssh connection via putty. So&amp;nbsp; download it from &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&quot;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt; (putty.exe). After downloading, execute the putty.exe. Enter the IP of your EV3 into the field &quot;Host Name (or IP address)&quot; and click on &quot;Open&quot;. This will open a remote console. Enter &quot;root&quot; as user name and just press enter when asked for password. Now you could run your program. But we have to do one more thing before executing the program: We have to disable the menu. If we wouldn't do this, both (the String &quot;First EV3 Program&quot; of our program AND the display menu) would be displayed in the display. So in the menu navigate to &quot;System&quot; and select &quot;Suspend Menu&quot;. The menu will now be suspended and the display will be blank. Now back to our remote console. Enter the following command to execute the program (which we transfered to /home/lejos/programs on the brick earlier):&lt;br /&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
    jrun -cp /home/lejos/programs/HelloWorld.jar Main&lt;/blockquote&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s1600/putty.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;402&quot; src=&quot;http://2.bp.blogspot.com/-sWC0iXMwb5o/UrwivUtCWCI/AAAAAAAAAIQ/F0zXl1NNfyc/s640/putty.PNG&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;remote console in putty&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br /&gt;
Look at the display and enjoy the magic again ;). It will again need some seconds until you will see the string on the display. Hit any button on the brick to end the program. If you want the menu back after executing the program press the middle button and the lower button on the brick. The display menu will be back instantly.&lt;br /&gt;
&lt;br /&gt;
If you have any questions or problems during the process feel free to leave a comment.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2013-12-27&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>TestFX internals explained</title>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="jUnit"/>
        <category label="TestFX"/>
        <published>2014-01-03T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/03/testfx-internals-explained.html&quot; rel=&quot;tag&quot;&gt;TestFX internals explained&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-03&quot;&gt;2014-01-03&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;TestFX a small but powerful framework for JavaFX GUI Testing with jUnit.&lt;br/&gt;
How it is used and how it is working inside?&lt;br/&gt;
&lt;br/&gt;
TDD for GUI development is for a lot of developers something that make them feeling uncomfortable.&lt;br/&gt;
Using jUnit for the testing of the GUI Elements is mostly not what you want to do. &lt;br/&gt;
But with TestFX it is quite simple to write short but reusable tests.&lt;br/&gt;
&lt;br/&gt;
Let´s start with the project initialization. You need only a few entries in you pom.xml.&lt;br/&gt;
jUnit, hamcrest and testfx, that is it.. and nothing more.&lt;br/&gt;

&lt;br /&gt;
&lt;pre class=&quot;brush: xml&quot;&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.loadui&lt;/groupId&gt;
    &lt;artifactId&gt;testFx&lt;/artifactId&gt;
    &lt;version&gt;3.0.0 &lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
    &lt;artifactId&gt;hamcrest-all&lt;/artifactId&gt;
    &lt;version&gt;1.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.11&lt;/version&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;
            &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
    &lt;/class&gt;&lt;/pre&gt;
After we added this entries to the pom.xml, we can start with the first jUnitTest using TestFX.&lt;br/&gt;
We will start with the traditional &lt;b&gt;HelloWorld&lt;/b&gt;. The first step is the creation of a TestClass.&lt;br/&gt;
The TestClass must extend from GuiTest, a base class from the TestFX Framework. &lt;br/&gt;
This class is abstract and you have to implement the method &lt;b&gt;protected Parent getRootNode()&lt;/b&gt;&lt;br/&gt;
This method must create the GUI element that you will test. I our example we want to test a simple button.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Category(TestFX.class)
public class SimpleButtonTest extends GuiTest {
    @Override
    protected Parent getRootNode() {
        final Button btn = new Button();
        btn.setId(&quot;btn&quot;);
        btn.setText(&quot;Hello World&quot;);
        btn.setOnAction((actionEvent)-&gt; btn.setText( &quot;was clicked&quot; ));
        return btn;
    }
}
    &lt;/class&gt;&lt;/pre&gt;
You can see, that you don´t have to create a holder for your GUI element.&lt;br/&gt;
Now we can start with the first test itself.&lt;br/&gt;
The button will change the text from &quot;Hello World&quot; to &quot;was clicked&quot; if the user will click the button.&lt;br/&gt;
How we can test this?&lt;br/&gt;

As normal we have to write a test method annotated with the @Test from jUnit.&lt;br/&gt;
The first question will be, how to get the reference of the button? &lt;br/&gt;
For this you can use one of the service methods. With find and the id you will get the instance.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Test
public void shouldClickButton(){
    final Button button = find( &quot;#btn&quot; );
    click(button);
    verifyThat( &quot;#btn&quot;, hasText(&quot;was clicked&quot;) );
}
    &lt;/class&gt;&lt;/pre&gt;
As you can see, we can start with the functional tests after we got the reference. Here we are simulating the click.&lt;br/&gt;
After this we are checking if the result is as expected.&lt;br/&gt;
Writing tests looks now like , writing the use case with methods organized with the builder pattern.&lt;br/&gt;
If you want to write your own check like hasText() you have to write it with the framework hamcrest.&lt;br/&gt;
But TestFX will provide a lot of default checks and test-steps. Mostly you don not need more.&lt;br/&gt;
&lt;br/&gt;
But how TestFX is doing all this?&lt;br/&gt;
Starting with the test class GUITest, we know that we have to create the GUI element we want to test.&lt;br/&gt;
The class GUITest itself contains a lot of methods to describe the use case with &lt;br/&gt;
actions like click,drag,move,push, scroll, rightClick and so on.&lt;br/&gt;
But how the application is started? This will be done by the internal class TestFXApp inside GUITest. &lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public static class TestFxApp extends Application
{
    private static Scene scene = null;

    @Override
    public void start( Stage primaryStage ) throws Exception
    {
        primaryStage.initStyle(StageStyle.UNDECORATED);
        primaryStage.show();
        stageFuture.set( primaryStage );
    }

    public static void setRoot( Parent rootNode )
    {
        scene.setRoot( rootNode );
    }
}
    &lt;/class&gt;&lt;/pre&gt;
Every developer that was writing the first few jUnit tests for an JavaFX application &lt;br/&gt;
came to the point where the JVM was telling something like &lt;br/&gt;
&quot;please, only one instance of the JavaFX Application please&quot;&lt;br/&gt;
How to deal with this?&lt;br/&gt;
The basic is quite simple. You have to start the application in one thread, save this as an singleton over all jUnit tests in one JVM.&lt;br/&gt;
After this, put every junit test method in one Callable and start them one after an other.&lt;br/&gt;
The first step will be done with the method setupStage, annotated with @Before.&lt;br/&gt;
Inside this there is a check if the singleton is already there or not. If not, it will be created. FXTestUtils.launchApp(TestFxApp.class);&lt;br/&gt;
After this the GUI element from getRootNode() will be placed in a new Runnable.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Before
public void setupStage() throws Throwable{
    showNodeInStage();
}

private void showNodeInStage(){
    showNodeInStage(null);
}

private void showNodeInStage( final String stylesheet ){
    GuiTest.stylesheet = stylesheet;

    if( stage == null ){
        FXTestUtils.launchApp(TestFxApp.class);
        try{
            stage = targetWindow(stageFuture.get( 25,TimeUnit.SECONDS ) );
            FXTestUtils.bringToFront( stage );
        }catch( Exception e ) {
            throw new RuntimeException( &quot;Unable to show stage&quot;, e );
        }
    }

    try{
        FXTestUtils.invokeAndWait( new Runnable(){
            @Override
            public void run(){
                Scene scene = SceneBuilder
                    .create()width( 600 ) height( 400 )
                    .root( getRootNode() ).build();

                if(stylesheet!=null) 
                    scene.getStylesheets().add(stylesheet);
                stage.setScene( scene );
            }
        }, 5 );
    }catch( Exception e ) {
        e.printStackTrace();
    }
}

    &lt;/class&gt;&lt;/pre&gt;

That´s it. Quite simple and easy to use for a developer.&lt;br/&gt;
The good thing is, that TestFX is good usable in an CI environment. &lt;br/&gt;
You only have to configure jUnit if not already done.&lt;br/&gt;
&lt;br/&gt;
But this is not the end..  I am working in the moment at the full CDI support inside &lt;br/&gt;
TestFX. We will see it in one of the next versions from TestFX. stay tuned...&lt;br/&gt;
&lt;br/&gt;
If you have any ideas what we can improve..    let me know..&lt;br/&gt;
&lt;br/&gt;
happy javafx testing&lt;br/&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 1</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-01-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/10/fxcontroller-with-cdi-managed-dynamico.html&quot; rel=&quot;tag&quot;&gt;FXController with CDI managed DynamicObjectAdapter - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-10&quot;&gt;2014-01-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today I will show the first step how you can use a dynamic proxy for JavaFX Controller.&lt;br/&gt;
This we will need for the CDI support inside TestFX.. but this later..&lt;br/&gt;
&lt;br/&gt;
During I was writing on my reflection shortcut together with Dr. Heinz Kabutz&lt;br/&gt;
(will be first available in german, later in english if asked for) I was thinking about his Newsletter &lt;br/&gt;
about &quot;Object Adapter based on Dynamic Proxy&quot;. &lt;br/&gt;
Based on this we will now transform this into an CDI pattern for JavaFX Controller.&lt;br/&gt;
&lt;br/&gt;
The basic target will be an decorator for an CDI environment, to switch between implementations of defined methods&lt;br/&gt;
of an controller. Ok, there is an decorator defined inside the CDI environment but with some hard limitations.&lt;br/&gt;
&lt;br/&gt;
First of all, you have to define the decorator inside the beans.xml. I don´t like this. &lt;br/&gt;
If something will be changed you have to restart the container. And the definition is static.&lt;br/&gt;
The second I not like, is the usage of an decorator. &lt;br/&gt;
&lt;br/&gt;
You have to annotate the class, &lt;br/&gt;
you have to inject the basic implementation&lt;br/&gt;
and you have to extend the basic implementation.  &lt;br/&gt;
&lt;br/&gt;
This is too much and the main disadvantage: you have to decide what decorator to use in the static context.&lt;br/&gt;
&lt;br/&gt;
How to solve this? &lt;br/&gt;
&lt;br/&gt;
Let´s start with the basic step. With the default methods in JDK8 you don´t need a basic Implementation class.&lt;br/&gt;
But you have an interface. Let´s say we have an interface called DemoLogic.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@CDINotMapped
public interface DemoLogic {

    public default int add(int a, int b){
        return a+b;
    }

    public default int sub(int a, int b){
        return a-b;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Importand is the annotation, to exclude this from the default scope inside CDI. You will see it later why..&lt;br/&gt;
&lt;br/&gt;
The next thing we want to have is an special implementation from the add method. This we will implement inside a class &lt;br/&gt;
called DemoLogicAdapter_A.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@CDINotMapped
public class DemoLogicAdapter_A implements DemoLogic{

    public int add(int a, int b){
        System.out.println(&quot;DemoLogicAdapter_A.add&quot;);
        return a+b + 100;
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Same here with the annotation. The good thing is, you really have to implement the changed method only.&lt;br/&gt;
No other delegator stuff.&lt;br/&gt;
&lt;br/&gt;
Next we need, is something to decide dynamically if we want to use the original implementation or the special one.&lt;br/&gt;
This we will simulate with a singleton calles Context. This class with only one boolean attribute called original&lt;br/&gt;
is to simulate a decicion logic.&lt;br/&gt;
If the attribute is true, we are in context original otherwise we are inside the context customer specific.&lt;br/&gt;

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Singleton
public class Context {

    public boolean original = true;
}
    &lt;/class&gt;&lt;/pre&gt;

Now we will use it like the developer will do it later in a high level way.&lt;br/&gt;
For this we write a jUnit Test to test this.&lt;br/&gt;
The test will do the following.&lt;br/&gt;
Inject the DemoLogic, call the method add and test if the original version was used.&lt;br/&gt;
After this switch the context by setting the attribut original to false.&lt;br/&gt;
Now get the demologic again and call the method add. &lt;br/&gt;
If all is all right we will get the customer specific result.&lt;br/&gt;


&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, &quot;org.rapidpm.commons&quot;)
                .addAsManifestResource(EmptyAsset.INSTANCE, &quot;beans.xml&quot;);
    }

    @Inject @DynamicDecoratorTest Instance&lt;DemoLogic&gt; demoLogic;
    @Inject Context context;
    @Test
    public void testDemoLogicOriginalTest() throws Exception {
    Assert.assertNotNull(demoLogic);
    final DemoLogic demoLogic1 = demoLogic.get();
    final int add = demoLogic1.add(1, 1);
    Assert.assertEquals(2,add);
    System.out.println(&quot;add = &quot; + add);

    context.original = false;
    final DemoLogic demoLogic2 = demoLogic.get();
    final int addAdapted = demoLogic2.add(1, 1);
    Assert.assertEquals(102,addAdapted);
    System.out.println(&quot;addAdapted = &quot; + addAdapted);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
I am using arquillian to have CDI support inside my jUnit Tests.&lt;br/&gt;
The annotation DynamicDecoratorTest is to separate this test from the rest of my tests.&lt;br/&gt;
&lt;br/&gt;
You see the usage quite clear. The developer will only see the interface. He will use it like &lt;br/&gt;
he will do it as normal. No change to see! Let´s asume the context switch is done by the system,&lt;br/&gt;
hidden, so the the develper is not able to see it. &lt;br/&gt;
He will write code only with the thinking about the business logic to implement.&lt;br/&gt;
&lt;br/&gt;
Afer we described what we want to have, we will implement the core. &lt;br/&gt;
To get an instance of the DemoLogic, we need a producer. We will call the class DemoLogicProducer.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public class DemoLogicProducer {

    @Inject Instance&lt;DynamicObjectAdapterFactory&gt; dynamicObjectAdapterFactoryInstance;

    @Inject Context context;

    @Produces @DynamicDecoratorTest
    public DemoLogic create(ManagedInstanceCreator instanceCreator){
    final DemoLogic demoLogic = instanceCreator.activateCDI(new DemoLogic() {});

    final DynamicObjectAdapterFactory dynamicObjectAdapterFactory = dynamicObjectAdapterFactoryInstance.get();

    final Object adapter;
    if (context.original){
    adapter = new Object();
    } else {
    adapter = instanceCreator.activateCDI(new DemoLogicAdapter_A());
    }

    return dynamicObjectAdapterFactory.adapt(demoLogic, DemoLogic.class, adapter);
    }
    }
    &lt;/class&gt;&lt;/pre&gt;
The basic what we are simulating here ist the switch between original and customer specific.&lt;br/&gt;
This will be more comfortable in the next post. (using a ContextResolver)&lt;br/&gt;
But to show the basic step this is made explicite simple.&lt;br/&gt;
If the attribute is true, use the original one otherwise use the customer specific.&lt;br/&gt;
Very simple.. Both instances are manually put inside the CDI environment. &lt;br/&gt;
This ist only to show that the adapter itself can be managed too.&lt;br/&gt;
&lt;br/&gt;
The most importand step is the transparent wrapping with the DynamicObjectAdapterFactory.&lt;br/&gt;
The developer will not see this, until he is debugging ;-)&lt;br/&gt;
&lt;br/&gt;
How this factory is working? &lt;br/&gt;
The factory is using the java.lang.reflect.Proxy from the JDK itself. An old but very usefull class.&lt;br/&gt;
In my case I will use this in side a CDI managed environment. &lt;br/&gt;

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public class DynamicObjectAdapterFactory {

    @Inject Instance&lt;CDIInvocationHandler&gt; cdiInvocationHandlerInstance;

    public  &lt;T&gt; T adapt(final Object adaptee,final Class&lt;T&gt; target,final Object adapter) {

        final CDIInvocationHandler invocationHandler = cdiInvocationHandlerInstance
        .get()
        .adapter(adapter)
        .adaptee(adaptee);

        return (T) Proxy.newProxyInstance(
        target.getClassLoader(),
        new Class[]{target},
        invocationHandler
        );
        }

        }
        &lt;/class&gt;&lt;/pre&gt;
This means I will be able to inject, for example, the InvocationHandler. &lt;br/&gt;
This I need, because I need a managed InvocationHandler. &lt;br/&gt;
The usage of the Proxy is nothing complex. But the InvocationHandler is the final and importand step.&lt;br/&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public class CDIInvocationHandler implements InvocationHandler {

    @Inject @CDILogger Logger logger;

    private Map&lt;MethodIdentifier, Method&gt; adaptedMethods = new HashMap&lt;&gt;();

    private Object adapter;
    private Object adaptee;

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        if (adaptedMethods.isEmpty()){
            final Class&lt;?&gt; adapterClass = adapter.getClass();
            Method[] methods = adapterClass.getDeclaredMethods();
            for (Method m : methods) {
                adaptedMethods.put(new MethodIdentifier(m), m);
            }
        }else{
            if (logger.isDebugEnabled()) {
                logger.debug(&quot;adaptedMethods is initialized..&quot;);
            }
        }
        try {
            Method other = adaptedMethods.get(new MethodIdentifier(method));
            if (other != null) {
                return other.invoke(adapter, args);
            } else {
                return method.invoke(adaptee, args);
            }
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }

    public CDIInvocationHandler adapter(final Object adapter) {
        this.adapter = adapter;
        return this;
    }

    public CDIInvocationHandler adaptee(final Object adaptee) {
        this.adaptee = adaptee;
        return this;
    }


}

public class MethodIdentifier {
    private final String name;
    private final Class[] parameters;

    public MethodIdentifier(Method m) {
        name = m.getName();
        parameters = m.getParameterTypes();
    }

    // we can save time by assuming that we only compare against
    // other MethodIdentifier objects
    public boolean equals(Object o) {
        MethodIdentifier mid = (MethodIdentifier) o;
        return name.equals(mid.name) &amp;&amp;
                Arrays.equals(parameters, mid.parameters);
    }

    public int hashCode() {
        return name.hashCode();
    }
}

    &lt;/class&gt;&lt;/pre&gt;

The method invoke is called every time a method is called on the proxy. This is the place to decide which method will be called.&lt;br/&gt;
From the adapter we will get all methods and put them inside a HashMap. The key is based on method-name and attributes. &lt;br/&gt;
If a method is called with this key, we will get the adapter instance of this method from the map and &lt;br/&gt;
will call this instead of the original one.&lt;br/&gt;
If not key found, we will call the original nethod.&lt;br/&gt;
This is really simple!&lt;br/&gt;
&lt;br/&gt;
This means you have everywhere CDI managed instances.&lt;br/&gt;
You have only to implement what you whant to change.&lt;br/&gt;
It is dynamic with every request.&lt;br/&gt;
No beans.xml must be edited.&lt;br/&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  &lt;br/&gt;
&lt;br/&gt;
Next step will be the integration iside an JavaFX controller.. and TestFX CDI Support&lt;br/&gt;
&lt;br/&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Motors - Part 1</title>
        <category label="0.5.0"/>
        <category label="components"/>
        <category label="EV3"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="motors"/>
        <published>2014-01-11T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/11/lego-mindstorms-ev3-components--motors.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Motors - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-11&quot;&gt;2014-01-11&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;br /&gt;
With this posting I will start a series of articles where I explain which components/sensors are contained in the Lego Mindstorms EV3-set an how to work with them.&lt;br /&gt;
&lt;br /&gt;
In this posting I will start with one of the most basic components - the motors. The Mindstorms-set includes three motors: two of the same size and a smaller one.&lt;br /&gt;
&lt;br /&gt;
Both types work the same way and so they have the same api-methods.&lt;br /&gt;
&lt;br /&gt;
I will build a simple program were I let the robot perform some movements to different directions.&lt;br /&gt;
&lt;br /&gt;
Before we can start developing, we first need a robot which we will control with the program. I built a simple robot for that. It consists of only one single component connected to the brick: One of the bigger motors. There are two wheels plugged into the motor and two more wheels which aren't connected to the motor and just work as stabilization. Here are some pics:&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://4.bp.blogspot.com/-gJ0BPfi2Pb0/Us6us3v_eeI/AAAAAAAAAIk/EenQtF2MY7M/s1600/DSCN0594.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-gJ0BPfi2Pb0/Us6us3v_eeI/AAAAAAAAAIk/EenQtF2MY7M/s1600/DSCN0594.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-lGWCS5TqS3s/Us6uusRK-GI/AAAAAAAAAIs/mEk-cZr8jKg/s1600/DSCN0596.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-lGWCS5TqS3s/Us6uusRK-GI/AAAAAAAAAIs/mEk-cZr8jKg/s1600/DSCN0596.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-Lp-Hs7-z_nw/Us6uzYNSw6I/AAAAAAAAAI8/eLNfIbfRkEg/s1600/DSCN0597.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-Lp-Hs7-z_nw/Us6uzYNSw6I/AAAAAAAAAI8/eLNfIbfRkEg/s1600/DSCN0597.JPG&quot; height=&quot;320&quot; width=&quot;240&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-4mXFS9dCiYg/Us6u4bC5xlI/AAAAAAAAAJM/XT-HV-eSpSg/s1600/DSCN0599.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-4mXFS9dCiYg/Us6u4bC5xlI/AAAAAAAAAJM/XT-HV-eSpSg/s1600/DSCN0599.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
( There are different ways at different abstract levels to control the motors, but I will use the most basic method by using the Motor-class directly in this first part. We couldn't use a more abstract method which enable features like driving turns or following paths because we only have a single motor connected to our robot here. So the robot can just move forwards and backwards. )&lt;br /&gt;
&lt;br /&gt;
I plugged the motor into plug connection B on the brick.&lt;br /&gt;
&lt;br /&gt;
So, now we are ready to develop the program for our new robot. I set up an IntelliJ-project as described in our posting about &lt;a href=&quot;http://www.rapidpm.org/2013/12/developing-lejos-programs-with-intellij.html&quot;&gt;developing leJOS programs with IntelliJ on Windows&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
First, here is the plain code which is quite easy to understand:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {

        Motor.B.setAcceleration(200);
        Motor.B.setSpeed(90);
        Motor.B.rotate(360);
        Motor.B.setSpeed(180);
        Motor.B.rotate(360);
        Motor.B.setSpeed(360);
        Motor.B.rotate(360);
        Motor.B.backward();
        Delay.msDelay(3000);
        Motor.B.stop();

    }
}
&lt;/pre&gt;
What does that code do?&lt;br /&gt;
We address the motor in plug connection B via Motor.B. Then we set its acceleration to 200. The standard value is 6000 which means that the motor will accelerate by 6000 degrees per second per second. This is quite fast and so we lowered the value to 200 to get a smoother acceleration.&lt;br /&gt;
Then we set the speed of the motor to 90 degrees per second. After we &quot;configured&quot; the motor, we let it start rotating by 360 degrees. This operation is a blocking operation which means that the program will stop here until the motor rotated 360 degrees (which will be done after 4 seconds at the configured speed of 90 degrees per second).&lt;br /&gt;
After the motor rotated 360 degrees we double the speed to 180 degrees per second and let the motor rotate 360 degrees again. This time the motor will need half the time (2 seconds), of course.&lt;br /&gt;
After that the same happens again with a speed of 360 degrees per second.&lt;br /&gt;
Then, as the last part of the program, we call the backward-method. In contrast to the rotate-method, this method is non-blocking. That means, that the program will continue directly after calling that method, it won't wait till the backwards-movement is done (otherwise the motor wouldn't stop rotating anymore, there is no parameter for defining how long the motor should rotate). Recognize that there is also a rotate()-method with a second, boolean parameter. If you use that one with the boolean parameter = true the method becomes non-blocking like backward(). &lt;br /&gt;
In the next line we tell the program to do nothing for 3 seconds, the motor will of course continue rotating (at the speed which was set as last = 360 degrees per second) during that time. &lt;br /&gt;
Then after these 3 seconds we let the motor stop und the program is at its end.&lt;br /&gt;
&lt;br /&gt;
To get some feedback on what the robot is exactly doing through the program execution, we added some printlns to the console.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(200);
        
        Motor.B.setSpeed(90);
        System.out.println(&quot;Set speed to 90 degrees per second.&quot;);
        System.out.print(&quot;Rotating 360 degrees...&quot;);
        Motor.B.rotate(360);
        System.out.println(&quot;done!&quot;);
        
        Motor.B.setSpeed(180);
        System.out.println(&quot;Set speed to 180 degrees per second.&quot;);
        System.out.print(&quot;Rotating 360 degrees...&quot;);
        Motor.B.rotate(360);
        System.out.println(&quot;done!&quot;);
        
        Motor.B.setSpeed(360);
        System.out.println(&quot;Set speed to 360 degrees per second...&quot;);
        System.out.print(&quot;Rotating 360 degrees...&quot;);
        Motor.B.rotate(360);
        System.out.println(&quot;done!&quot;);
        
        Motor.B.backward();
        System.out.print(&quot;Now rotating backwards for 3s&quot;);
        Delay.msDelay(3000);
        System.out.print(&quot;...3s are over...&quot;);
        Motor.B.stop();
        System.out.println(&quot;and stopped!&quot;);

    }
}
&lt;/pre&gt;
That code looks better now, but there's tons of duplicate code. So we put the code for setting different speeds and letting the motor rotate in a function.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(200);

        rotateDegreesAtSpeed(360, 90);
        rotateDegreesAtSpeed(360, 180);
        rotateDegreesAtSpeed(360, 360);

        Motor.B.backward();
        System.out.print(&quot;Now rotating backwards for 3s&quot;);
        Delay.msDelay(3000);
        System.out.print(&quot;...3s are over...&quot;);
        Motor.B.stop();
        System.out.println(&quot;and stopped!&quot;);

    }

    private static void rotateDegreesAtSpeed(final int degreesToRotate, final int degreesPerSecond) {
        Motor.B.setSpeed(degreesPerSecond);
        System.out.println(&quot;Set speed to &quot;+degreesPerSecond+ &quot;degrees per second.&quot;);
        System.out.print(&quot;Rotating &quot;+ degreesToRotate + &quot;degrees...&quot;);
        Motor.B.rotate(degreesToRotate);
        System.out.println(&quot;done!&quot;);
    }
}&lt;/pre&gt;
&lt;br /&gt;
That was it. After transfering the program onto the brick (via WiFi) we executed the program. Here's a video of how the result looks like (console output readable in higher qualities).&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://ytimg.googleusercontent.com/vi/qr14DFO60Tk/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/qr14DFO60Tk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/qr14DFO60Tk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Perfect. The next thing we did was extending the robot by a second motor - the smaller one. The result looked like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-eNXOOaEsic0/Us6u60ZBzHI/AAAAAAAAAJY/q4p4IaTrQIM/s1600/DSCN0600.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-eNXOOaEsic0/Us6u60ZBzHI/AAAAAAAAAJY/q4p4IaTrQIM/s1600/DSCN0600.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://3.bp.blogspot.com/-SIUBBBpNqBk/Us6u9ehJ2VI/AAAAAAAAAJg/GP55djU9xZk/s1600/DSCN0601.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-SIUBBBpNqBk/Us6u9ehJ2VI/AAAAAAAAAJg/GP55djU9xZk/s1600/DSCN0601.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-tEuoOrBUdaY/Us6u_wRN4EI/AAAAAAAAAJo/Bp31UBL3OtY/s1600/DSCN0602.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-tEuoOrBUdaY/Us6u_wRN4EI/AAAAAAAAAJo/Bp31UBL3OtY/s1600/DSCN0602.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
So the second motor will make the three &quot;razorblades&quot; rotate ( some eyecandy :) ).&lt;br /&gt;
We put the second motor in plug connection A of the brick.&lt;br /&gt;
&lt;br /&gt;
The aim for that second motor should be: The razorblades should always rotate the same speed, the first motor has.&lt;br /&gt;
&lt;br /&gt;
So we extended our program. Here's the finished code:&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.utility.Delay;

public class Main {
    public static void main(String[] args) {

        final int ACCELERATION = 200;
        final int ONE_ROTATION = 360;
        /*
        The standard value for acceleration is (6000 degrees per second) per second
        which results in a very jerky start when the motor starts rotating.
        To make the start smoother, the acceleration is set to a lower level.
         */
        Motor.B.setAcceleration(ACCELERATION);
        Motor.A.setAcceleration(ACCELERATION);

        Motor.A.forward();
        rotateDegreesAtSpeed(ONE_ROTATION, 90);
        rotateDegreesAtSpeed(ONE_ROTATION, 180);
        rotateDegreesAtSpeed(ONE_ROTATION, 360);

        Motor.A.backward();
        System.out.println(&quot;Switched Motor A from forward to backward. Waiting for the direction change.&quot;);
        Delay.msDelay(2000);
        Motor.B.backward();

        System.out.print(&quot;Now rotating backwards for 3s&quot;);
        Delay.msDelay(3000);
        System.out.print(&quot;...3s are over...&quot;);
        Motor.B.stop();
        Motor.A.stop();
        System.out.println(&quot;and stopped!&quot;);

    }

    private static void rotateDegreesAtSpeed(final int degreesToRotate, final int degreesPerSecond) {
        Motor.A.setSpeed(degreesPerSecond);
        Motor.B.setSpeed(degreesPerSecond);
        System.out.println(&quot;Set speed of motors to &quot;+degreesPerSecond+ &quot; degrees per second.&quot;);
        System.out.print(&quot;Rotating &quot;+ degreesToRotate + &quot; degrees...&quot;);
        Motor.B.rotate(degreesToRotate);
        System.out.println(&quot;done!&quot;);
    }
}&lt;/pre&gt;
At the beginning of the program we set the acceleration of motor A to 200, too. Then we call Motor.A.forward(), which is a non-blocking operation like the backward()-method. We added one line in the created function to set the speed for motor A which is the same as for motor B, of course. After the three function calls we first call bachwards() on motor A. This will make the motor stop as the first step, and then start rotating backwards in a second step. Recognize, that Motor.A.backward() will be called when motor B stopped rotating. To let the robot wait until motor A also stopped, we added a delay of two seconds. After these two seconds the robot will start turning backwards (motor B will rotate into the other direction). At the same time, motor A will start rotating in the other direction, too.&lt;br /&gt;
We will let the robot move backwards for three seconds and then stop both motors.&lt;br /&gt;
&lt;br /&gt;
So, here is the final result:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://ytimg.googleusercontent.com/vi/F_TNtE2B6Lg/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/F_TNtE2B6Lg?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/F_TNtE2B6Lg?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
In the next article I will use the DifferentialPilot-class, which is the superior level of abstraction for controlling the motors, to move a two-wheeled robot which can drive turns for example.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IoT with Java8 and TinkerForge Part 1</title>
        <category label="IoT"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="TinkerForge"/>
        <published>2014-01-13T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/13/iot-with-java8-and-tinkerforge-part-1.html&quot; rel=&quot;tag&quot;&gt;IoT with Java8 and TinkerForge Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-13&quot;&gt;2014-01-13&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;IoT is something cool, but I think you know it already.&lt;br /&gt;
Today I started with TinkerForge.
TinkerForge is a german company that are building electronic elements. You can put them together like LEGO.
This means, that you don´t need any special electronic stuff or knowledge.
&lt;br /&gt;
And the best, you can code plain Java to use them.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;But how we can start?
&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
First of all, you need a MasterBrick and at minimumm one sensor. For my first experiment I am using
the simple temperature sensor. After unpacking it I needed around 3 min to put all together.
After this you can plug it into your USB port. Now the hardware part is ready.
&lt;br /&gt;
&lt;br /&gt;
To speak with this components you have to install two things.&lt;br /&gt;
First the usb-driver, that is used for the communication with the MasterBrick,&lt;br /&gt;
second the BrickViewr. With this you can check the installation, update the firmware and so on.
&lt;br /&gt;
&lt;br /&gt;
You will find the software for&lt;b&gt; linux/osx/windows&lt;/b&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Hello IoT World:&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
We will start with the first HelloWorld. Here with the Hello IoTWorld.&lt;br /&gt;
After you connected the MasterBrick with the USB-port you will see a blue light
and the MasterBrick will be ready for communication.
&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-L4kMEQNQn7U/UtRZqJ_UlPI/AAAAAAABVGA/q_UgrGaqkdQ/s1600/SvenRuppert_IoT_TinkerForge_001_BrickV_001.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-L4kMEQNQn7U/UtRZqJ_UlPI/AAAAAAABVGA/q_UgrGaqkdQ/s1600/SvenRuppert_IoT_TinkerForge_001_BrickV_001.jpg&quot; height=&quot;140&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
Now we could start the BrickViewer to check the installation.
The importand part is the UID from the sensor. With this we can connect it later.
After you pressed the connect button, you can see all the informations.
&lt;br /&gt;
&lt;br /&gt;
At &lt;a href=&quot;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&quot;&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt; are all source codes you will need, including the TinkerForge API itself.&lt;br /&gt;
I spoke with TinkerForge and we decided to put the API into maven.&lt;br /&gt;
&lt;br /&gt;
After we have done this, I will inform you.
If you are interested, follow me on Twitter please ( &lt;b&gt;&lt;a href=&quot;https://twitter.com/SvenRuppert&quot;&gt;@SvenRuppert&lt;/a&gt;&lt;/b&gt; )
&lt;br /&gt;
&lt;br /&gt;
The basic steps are quite simple to use this sensor.&lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;create a IPConnection&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;create an instance of the class BrickletTemperature&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;configure the sensor&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;add an ActionListener.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
That is all.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.IPConnection;

public class ExampleCallback {
    private static final String host = &quot;localhost&quot;;
    private static final int port = 4223;
    private static final String UID = &quot;dXj&quot;; 
    public static void main(String args[]) throws Exception {
        IPConnection ipcon = new IPConnection(); 
        BrickletTemperature temp = new BrickletTemperature(UID, ipcon); 
        ipcon.connect(host, port); 
        temp.setTemperatureCallbackPeriod(1000);
        temp.addTemperatureListener(new 
          BrickletTemperature.TemperatureListener() {
            public void temperature(short temperature) {
                System.out.println(&quot;Temperature: &quot; 
                   + temperature/100.0 + &quot; °C&quot;);
            }
        });
        ipcon.disconnect();
    }
}
&lt;/pre&gt;
After this short example we could do our first javafx test.
We want to check the temperature over some time and show this inside an LineChart.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-q7AnTcjRQz4/UtRaLcWsJFI/AAAAAAABVGI/lUAYpFuc87g/s1600/SvenRuppert_IoT_TinkerForge_001_Temp_001.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-q7AnTcjRQz4/UtRaLcWsJFI/AAAAAAABVGI/lUAYpFuc87g/s1600/SvenRuppert_IoT_TinkerForge_001_Temp_001.jpg&quot; height=&quot;199&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Here we are... and please note, the DateAxis is from&lt;a href=&quot;http://myjavafx.blogspot.de/2013/09/javafx-charts-display-date-values-on.html&quot;&gt; http://myjavafx.blogspot.de/2013/09/javafx-charts-display-date-values-on.html&lt;/a&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
 public class HelloTinkerForge extends Application {

    private static final String host = &quot;localhost&quot;;
    private static final int port = 4223;
    private static final String UID = &quot;dXj&quot;; 


    public static void main(String args[]) throws Exception {
        launch(args);
    }

    public static XYChart.Series series;

    @Override
    public void start(Stage stage) {
        stage.setTitle(&quot;Line Chart TinkerForge Sample&quot;);
        final DateAxis dateAxis = new DateAxis();
        final NumberAxis yAxis = new NumberAxis();
        dateAxis.setLabel(&quot;Time of Temp&quot;);
        final LineChart&lt;date number=&quot;&quot;&gt; lineChart
    = new LineChart&amp;lt;&amp;gt;(dateAxis, yAxis);

    lineChart.setTitle(&quot;Temp Monitoring&quot;);

    series = new XYChart.Series();
    series.setName(&quot;My temps&quot;);
    final ObservableList seriesData = series.getData();

    lineChart.getData().add(series);
    Scene scene = new Scene(lineChart, 800, 600);
    stage.setScene(scene);
    stage.show();
    new Worker(seriesData).start();

    }

    public static class Worker extends Thread {
    final ObservableList seriesData;
    public Worker(final ObservableList seriesData) {
    setDaemon(true);
    setName(&quot;Thread Temp&quot;);
    this.seriesData = seriesData;
    }

    @Override
    public void run() {
    Platform.runLater(new Runnable() {
    @Override
    public void run() {
    IPConnection ipcon = new IPConnection();
    BrickletTemperature temp
    = new BrickletTemperature(UID, ipcon);
    try {
    ipcon.connect(host, port);
    temp.setTemperatureCallbackPeriod(1000);
    temp.addTemperatureListener(
    new BrickletTemperature.TemperatureListener() {
    public void temperature(short temperature) {
    Platform.runLater(new Runnable() {
    @Override
    public void run() {
    final double temp
    = temperature / 100.0;
    final int counter
    = seriesData.size() + 1;
    final XYChart.Data data
    = new XYChart.Data(
    new Date(), temp);
    seriesData.add(data);
    }
    });
    }
    });
    } catch (IOException |
    AlreadyConnectedException |
    TimeoutException |
    NotConnectedException e) {
    e.printStackTrace();
    }
    }
    });
    }
    }
    }
&lt;/date&gt;&lt;/pre&gt;
&lt;pre class=&quot;brush: java&quot;&gt;&lt;date number=&quot;&quot;&gt;
&lt;/date&gt;&lt;/pre&gt;
Short and simple.. Well this is a simple example, but the next step will be with more sensor-elements...&lt;br /&gt;
&amp;nbsp;stay tuned..  and happy coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Motors - Part 2</title>
        <category label="0.5.0"/>
        <category label="EV3"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="motors"/>
        <published>2014-01-15T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/15/lego-mindstorms-ev3-components--motors.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Motors - Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-15&quot;&gt;2014-01-15&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;In the first article of the Mindstorms component series I showed the most basic way to control motors which are connected to the EV3-brick. We had a robot with 1 motor connected which made the robot move forwards and backwards and one smaller motor which let three razorblades rotate (for fun).&lt;br /&gt;
In this second part I will explain how to use the superior level of abstraction to control a robot with two motors (each motor moves one wheel). The lejos-crew calls these robots&amp;nbsp; &quot;wheeled vehicles&quot;.&lt;br /&gt;
&lt;br /&gt;
So, first I built such a vehicle as shown in these pictures:&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://2.bp.blogspot.com/-CLVVItozSsA/UtAEx0-SEeI/AAAAAAAAAJ0/UyaH9_YisiE/s1600/DSCN0607.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://2.bp.blogspot.com/-CLVVItozSsA/UtAEx0-SEeI/AAAAAAAAAJ0/UyaH9_YisiE/s1600/DSCN0607.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://2.bp.blogspot.com/-ZJrqRdjMP58/UtAE12wAQGI/AAAAAAAAAKE/RTdYKtIUBXI/s1600/DSCN0608.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://2.bp.blogspot.com/-ZJrqRdjMP58/UtAE12wAQGI/AAAAAAAAAKE/RTdYKtIUBXI/s1600/DSCN0608.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://4.bp.blogspot.com/-ov-9G8prnC8/UtAEznnul6I/AAAAAAAAAJ8/zkag-CyIaZs/s1600/DSCN0609.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://4.bp.blogspot.com/-ov-9G8prnC8/UtAEznnul6I/AAAAAAAAAJ8/zkag-CyIaZs/s1600/DSCN0609.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://3.bp.blogspot.com/-6ubRga2G6lI/UtAE4SelCWI/AAAAAAAAAKM/yWMoaJ8Dfmc/s1600/DSCN0610.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://3.bp.blogspot.com/-6ubRga2G6lI/UtAE4SelCWI/AAAAAAAAAKM/yWMoaJ8Dfmc/s1600/DSCN0610.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
(For the wheels I used the construction manual of the GRIPP3R-robot)&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    DifferentialPilot-class &lt;/h3&gt;
As said before, the DifferentialPilot class from the lejos api represents the superior level of abstraction when communicating with the motors. You can use it when you have a robot with two motors connected to the brick where each motor controls an own wheel.&lt;br /&gt;
&lt;br /&gt;
It offers different methods like travel(), steer() or arc() which will be used in the program for the robot.&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    The parcours&lt;/h3&gt;
First, I thought of a little demonstration parcours for the new robot. It should contain simple movements for- and backwards, rotations and turns / circles. As a result the parcours consists of 3 parts:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/-5bk-C7htHhI/UtFh5xIWyDI/AAAAAAAAAKc/zIWe21XVy2g/s1600/parcours1.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;173&quot; src=&quot;http://4.bp.blogspot.com/-5bk-C7htHhI/UtFh5xIWyDI/AAAAAAAAAKc/zIWe21XVy2g/s1600/parcours1.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
So, the first part of the parcours is pretty simple, the robot will move in a rectangular shape until it is back in its initial position.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-QTsrtvTwbEg/UtFh9A3Z-xI/AAAAAAAAAKk/3UmL59wUwLw/s1600/parcours2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;186&quot; src=&quot;http://1.bp.blogspot.com/-QTsrtvTwbEg/UtFh9A3Z-xI/AAAAAAAAAKk/3UmL59wUwLw/s1600/parcours2.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
In the second part, the robot then will move 90° in a turn. After the turn it will then drive a 90° turn backwards after which the robot will be in the position indicated transparent in the picture.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/-iaGSsTV-7XM/UtFh-Gkp3xI/AAAAAAAAAKo/8YEX_hwL4yw/s1600/parcours3.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;197&quot; src=&quot;http://4.bp.blogspot.com/-iaGSsTV-7XM/UtFh-Gkp3xI/AAAAAAAAAKo/8YEX_hwL4yw/s1600/parcours3.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
At the end of the second part the robot will first move forwards a bit. Then it will move in a circle. After the circle has finished, the robot will rotate by 180° (and then look like transparent indication in the picture). Then the robot will move backwards until it is back in the initial position from the beginning of the parcours. &lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;
    The code &lt;/h3&gt;
Let's have a look at the plain code of the finished program first.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {
    public static void main(String[] args) {

        final DifferentialPilot pilot = new DifferentialPilot(30.0, 185.0, Motor.C, Motor.B);
        pilot.setAcceleration(200);
        pilot.setRotateSpeed(50.0);
        pilot.setTravelSpeed(50.0);

        pilot.travel(350.0);
        pilot.rotate(90.0);
        pilot.travel(190.0);
        pilot.rotate(90.0);
        pilot.travel(350.0);
        pilot.rotate(90.0);
        pilot.travel(190.0);
        pilot.rotate(90.0);

        pilot.steer(65.0, 90.0);
        pilot.steer(-65.0, 90.0);

        pilot.travel(175.0);
        pilot.arc(-100.0,-360.0);
        pilot.steer(200.0,180.0);
        pilot.travel(-175.0);

    }
}

&lt;/pre&gt;
&lt;br /&gt;
At the beginning we instantiate a new instance of a DifferentialPilot and configure the wanted movement speeds. The used constructor takes four parameters:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;wheel-diameter: The diameter of the wheel connected to the motor. The used wheel has a 30mm diameter.&lt;/li&gt;
    &lt;li&gt;track width: The distance between the centres of both wheels. In my case ~185mm.&lt;/li&gt;
    &lt;li&gt;left motor: The plug connection where the left motor is plugged in.&lt;/li&gt;
    &lt;li&gt;right motor: The plug connection where the right motor is plugged in.&lt;/li&gt;
&lt;/ul&gt;
The diameter of the wheels and the track width are needed by the api to know how long the motors must rotate to perform correct rotations etc.&lt;br /&gt;
&lt;br /&gt;
In the next block we perform the first part of the parcours which is pretty trivial. The travel-method makes the robot move forwards for the given distance (350mm). Recognize, that the distance unit must be the same as used for wheel diameter and track width in the constructor. That method is a blocking operation, so the program will wait here until the movement has finished. After that, the robot will rotate (in place) by 90° to the left (-90° would be&amp;nbsp; 90° right). This happens four times until the rectangular movement has finished and the robot is back in its initial position.&lt;br /&gt;
&lt;br /&gt;
In the next block there are to steer-method calls.&lt;br /&gt;
The steer()-method takes two parameters:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;turnRate: The ratio of the two wheels' speeds (Integer between -200 and +200)&lt;/li&gt;
    &lt;li&gt;angle: When the robot turned by this degrees, the steering will stop.&lt;/li&gt;
&lt;/ul&gt;
This needs some more explainations:&lt;br /&gt;
turnRate: If the value is positive you are configuring the left wheel, if it's negative you are configuring the right wheel. Let's look at some positive values:&lt;br /&gt;
0 - means, that both wheels will rotate at the same speed, which causes the robot to move forwards (no steering!)&lt;br /&gt;
100 - means, that the left wheel won't move.&lt;br /&gt;
200 - means, that the left wheel will do the exact opposite of the right wheel. &lt;br /&gt;
&lt;br /&gt;
angle: you can enter a value between 0 und 360°, positive and negative. Positive values will rotate the brick to the left, negative values cause right rotations.&lt;br /&gt;
&lt;br /&gt;
So, back to our two method-calls. The first call says: Make the left wheel move 0.65 * the speed of the right wheel. This will cause the robot to turn leftwards while moving. The robot will then move until it has turned by 90° to the left.&lt;br /&gt;
The second method call: The first parameter is negative, so we tell the RIGHT wheel to move at 0.65 * the speed of the LEFT wheel. The robot will move until the robot turned 90° to the left. Recognize, that the robot can only turn to the left by moving &quot;backwards&quot; because the right wheel rotates slower than the left wheel.&lt;br /&gt;
&lt;br /&gt;
In the last block the motor travels some centimeters fowards. Then there is a new method called arc. This methods tells the robot to move in a circle. The two parameters are:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;radius of the circle&lt;/li&gt;
    &lt;li&gt;angle: When the robot turned by this degrees, the steering will stop.&lt;/li&gt;
&lt;/ul&gt;
Both parameters may be positive or negative.&lt;br /&gt;
A positive radius means, that the circle centre should be on the left of the brick. A negative respectively means that the circle centre is on the right side of the brick.&lt;br /&gt;
A positive angle means that the robot will rotate to the left, a negative angle respectively right.&lt;br /&gt;
&lt;br /&gt;
So, the arc-method-call says: Drive a circle. The circle center is on the right side of the brick and has a radius of 10cm. Drive that circle by rotating rightwards. The only possibility to do that, is by driving the circle forwards. A positive angle of 360° would have caused the robot to drive the circle by rotating to the left, which could only have been realized by moving backwards.&lt;br /&gt;
The next steer-method-call is easy: It says: The left wheel should do the opposite of the right wheel. The robot should move until it has turned by 180°. Maybe you recognized it: It's a simple 180° in-place rotation. So we could have used pilot.rotate(180) here, too. &lt;br /&gt;
The last travel()-call makes the robot move backwards the last centimeters until it is back in it's initial position.&lt;br /&gt;
&lt;br /&gt;
That's it, at last I just refactored and added some Console-ouput to the program for comfort:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.motor.Motor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {

    final static double NINETY_DEGREES = 90.0;

    public static void main(String[] args) {

        final DifferentialPilot pilot = new DifferentialPilot(30.0, 185.0, Motor.C, Motor.B);
        pilot.setAcceleration(200);
        pilot.setRotateSpeed(50.0);
        pilot.setTravelSpeed(50.0);

        System.out.println(&quot;Configured speeds and starting the first part of the parcours.&quot;);
        travelRectangle(pilot, 350.0, 190.0);

        System.out.println(&quot;Starting the second part of the parcours.&quot;);
        driveTurns(pilot);

        System.out.println(&quot;Starting the third part of the parcours.&quot;);
        driveCircleAndBackToInitialPosition(pilot);

    }

    private static void driveCircleAndBackToInitialPosition(final DifferentialPilot pilot) {
        System.out.print(&quot;    Driving half the way...&quot;);
        pilot.travel(175.0);
        System.out.println(&quot;done!&quot;);
        System.out.print(&quot;    Driving the circle...&quot;);
        pilot.arc(-100.0,-360.0);
        System.out.println(&quot;done!&quot;);
        System.out.print(&quot;    Turning 180 degrees...&quot;);
        pilot.steer(200.0,180.0);
        System.out.println(&quot;done!&quot;);
        System.out.print(&quot;    Driving backwards to initial position...&quot;);
        pilot.travel(-175.0);
        System.out.println(&quot;done!&quot;);
    }

    private static void driveTurns(final DifferentialPilot pilot) {
        System.out.print(&quot;    Driving turn forwards...&quot;);
        pilot.steer(65.0, NINETY_DEGREES);
        System.out.println(&quot;done!&quot;);
        System.out.print(&quot;    Driving turn backwards...&quot;);
        pilot.steer(-65.0, NINETY_DEGREES);
        System.out.println(&quot;done!&quot;);
    }

    private static void travelRectangle(final DifferentialPilot pilot, final double rectLength, final double rectWidth) {
        travelRectangleEdgeAndRotate(pilot, rectLength);
        travelRectangleEdgeAndRotate(pilot, rectWidth);
        travelRectangleEdgeAndRotate(pilot, rectLength);
        travelRectangleEdgeAndRotate(pilot, rectWidth);
    }

    private static void travelRectangleEdgeAndRotate(final DifferentialPilot pilot, final double distance) {
        System.out.print(&quot;    Driving &quot; + distance + &quot; mm...&quot;);
        pilot.travel(distance);
        System.out.println(&quot;done!&quot;);
        System.out.print(&quot;    Rotating 90 degrees...&quot;);
        pilot.rotate(NINETY_DEGREES);
        System.out.println(&quot;done!&quot;);
    }
}
&lt;/pre&gt;
and here is the result:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;http://i1.ytimg.com/vi/E-lcFrSva78/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/E-lcFrSva78?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;http://www.youtube.com/v/E-lcFrSva78?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
It isn't 100% exact, but still quite satisfying. I think this is because the wheel diameter and the track width I gave the constructor aren't perfectly correct.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>IoT with Java8 and TinkerForge Part 2</title>
        <category label="IoT"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="TinkerForge"/>
        <published>2014-01-20T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/20/iot-with-java8-and-tinkerforge-part-2.html&quot; rel=&quot;tag&quot;&gt;IoT with Java8 and TinkerForge Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-20&quot;&gt;2014-01-20&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;One of the interesting features of &lt;a href=&quot;http://www.tinkerforge.com/&quot;&gt;TinkerForge&lt;/a&gt; is the possibility to
put different elements like sensors, physical buttons, and more on a MasterBrick&lt;br /&gt;
&lt;br /&gt;
This is what we want to do today.
&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Barometer&lt;/b&gt;&lt;br /&gt;
Today we are using the &lt;a href=&quot;http://www.tinkerforge.com/en/doc/Hardware/Bricklets/Barometer.html&quot;&gt;Barometer-Bricklet&lt;/a&gt;.
The Barometer Bricklet can be used to extend the features of Bricks
by the capability to measure air pressure in range of 10 to 1200mbar
with a resolution of 0.012mbar. The measurement is temperature
compensated internally. The Bricklet is equipped with
a MS5611-01BA01 sensor which is designed to be used as an altimeter, too.
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;At &lt;a href=&quot;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&quot;&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt; are all source codes you will need, including the TinkerForge API itself.
    I spoke with TinkerForge and we decided to put the API into maven. After we have done this, I will inform you.
    If you are interested, follow me on Twitter please ( &lt;b&gt;@SvenRuppert&lt;/b&gt; )
&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
The most interesting part for us today will be the presents of two sensors inside of one Bricklet.&lt;br /&gt;
How we can handle it and how we will get the data to the screen?&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Connect to n - Sensor-units&lt;/b&gt;&lt;br /&gt;
To remember... To connect to a sensor you need an instance of the representing class.
To get the value from the sensor you have to implement an ActionListener.
Here the short example from my last blog about TinkerForge. &lt;i&gt;(&lt;a href=&quot;http://www.rapidpm.org/2014/01/iot-with-java8-and-tinkerforge-part-1.html&quot;&gt;engl&lt;/a&gt; /&lt;a href=&quot;http://jaxenter.de/artikel/Internet-of-Things-mit-Java-8-und-TinkerForge-Teil-1-170511&quot;&gt; ger&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import com.tinkerforge.BrickletTemperature;
import com.tinkerforge.IPConnection;
public class ExampleCallback {
  private static final String host = &quot;localhost&quot;;
  private static final int port = 4223;
  private static final String UID = &quot;dXj&quot;;
  public static void main(String args[]) throws Exception {
    IPConnection ipcon = new IPConnection();
    BrickletTemperature temp = new BrickletTemperature(UID, ipcon);
    ipcon.connect(host, port);
    temp.setTemperatureCallbackPeriod(1000);
    temp.addTemperatureListener(new
    BrickletTemperature.TemperatureListener() {
      public void temperature(short temperature) {
        System.out.println(&quot;Temperature: &quot;
        + temperature/100.0 + &quot; °C&quot;);
      }
    });
    ipcon.disconnect();
}
}
&lt;/pre&gt;
The same will be with the two sensor-units inside the Barometer-Bricklet.
The class name will be BrickletBarometer, and you have to implement two ActionListeners.
One for the air-pressure called AirPressureListener and one for the altitude called AltitudeListener.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class ExampleCallback {
    private static final String host = &quot;localhost&quot;;
    private static final int port = 4223;
    private static final String UID = &quot;jY4&quot;;

    public static void main(String args[]) throws Exception {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);
        ipcon.connect(host, port);
        b.setAirPressureCallbackPeriod(1000);
        b.setAltitudeCallbackPeriod(1000);
        b.addAirPressureListener(
                new BrickletBarometer.AirPressureListener() {
                    public void airPressure(int airPressure) {
                        System.out.println(&quot;Air Pressure: &quot;
                                + airPressure / 1000.0 + &quot; mbar&quot;);
                    }
                }
        );
        b.addAltitudeListener(new BrickletBarometer.AltitudeListener() {
            public void altitude(int altitude) {
                System.out.println(&quot;Altitude: &quot; + altitude / 100.0 + &quot; m&quot;);
            }
        });
        ipcon.disconnect();
    }
}
&lt;/pre&gt;
&lt;b&gt;Connection to JavaFX&lt;/b&gt;&lt;br /&gt;
The connection to JavaFX could be simple. The basic steps are always the same.
You have to start an Thread outside our JavaFX GUI Thread. Inside this thread you have to configure the sensor
and inside the run()- method you have to add the action listener.
All steps that are manipulating the GUI, you have to start again inside a Platform.runLater()
Now, we have to sensor-units. This means that we are doing this twice.
To reuse the code later, we are extracting it into an separate class.
If we would do it for the temperature sensor we used last time, it will look like the following.
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Temp implements Runnable {

  private String UID;
  private ObservableList seriesData;

  public Temp(final String UID, final XYChart.Series series) {
      this.UID = UID;
      this.seriesData = series.getData();
  }

  @Override
  public void run() {
      IPConnection ipcon = new IPConnection();
      BrickletTemperature temp = new BrickletTemperature(UID, ipcon);
      try {
          ipcon.connect(Barometer.host, Barometer.port);
          temp.setTemperatureCallbackPeriod(1000);
          temp.addTemperatureListener(new BrickletTemperature.TemperatureListener() {
              public void temperature(short temperature) {
                  Platform.runLater(new Runnable() {
                      @Override
                      public void run() {
                          final double temp = temperature / 100.0;
                          System.out.println(&quot;Temperature: &quot; + temp + &quot; °C&quot;);
                          final XYChart.Data data = new XYChart.Data(new Date(), temp);
                          seriesData.add(data);
       }
                  });
              }
          });
      } catch (IOException 
       | AlreadyConnectedException 
    | TimeoutException 
    | NotConnectedException e) {
          e.printStackTrace();
      }
  }
}
&lt;/pre&gt;
For the Barometer-Bricklet I was writing two classes. One for the airpressure and one for the altitude.
Both are identically, with one difference. The implementation of the ActionListener.
Every sensor will put his data to a separate LineChart.&lt;br /&gt;
&amp;nbsp;This implementation is not perfect, because we are not disconnecting
from the sensor in the end, and for one Bricklet we have two representing classes.
Both instances are in a different thread.
But this is still running over a longer period. (at least a few days with my laptop)
How to encapsulate this in better way we will see in one of my next posts.

&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Altitude implements Runnable {

    private String UID;
    private ObservableList seriesData;

    public Altitude(final String UID, final XYChart.Series series) {
        this.UID = UID;
        this.seriesData = series.getData();
    }

    @Override
    public void run() {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);

        try {
            ipcon.connect(Barometer.host, Barometer.port);
            b.setAirPressureCallbackPeriod(1000);
            b.addAltitudeListener(new BrickletBarometer.AltitudeListener() {
                public void altitude(int altitude) {
                    System.out.println(&quot;Altitude: &quot; + altitude / 100.0 + &quot; m&quot;);
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            final double temp = altitude / 100.0;
                            final XYChart.Data data = new XYChart.Data(new Date(), temp);
                            seriesData.add(data);
                        }
                    });
                }
            });
        } catch (IOException | AlreadyConnectedException | TimeoutException | NotConnectedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/pre&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Airpressure implements Runnable {

    private String UID;
    private ObservableList seriesData;

    public Airpressure(final String UID, final XYChart.Series series) {
        this.UID = UID;
        this.seriesData = series.getData();
    }

    @Override
    public void run() {
        IPConnection ipcon = new IPConnection();
        BrickletBarometer b = new BrickletBarometer(UID, ipcon);

        try {
            ipcon.connect(Barometer.host, Barometer.port);
            b.setAirPressureCallbackPeriod(1000);
            b.addAirPressureListener(new BrickletBarometer.AirPressureListener() {
                public void airPressure(int airPressure) {
                    System.out.println(&quot;Air Pressure: &quot; + airPressure / 1000.0 + &quot; mbar&quot;);
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            final double temp = airPressure / 1000.0 ;
                            final XYChart.Data data = new XYChart.Data(new Date(), temp);
                            seriesData.add(data);
                        }
                    });
                }
            });
        } catch (IOException 
     | AlreadyConnectedException 
     | TimeoutException 
     | NotConnectedException e) {
            e.printStackTrace();
        }
    }
}
&lt;/pre&gt;
Putting all together we will get the following main.

&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Barometer extends Application {
    public static final String host = &quot;localhost&quot;;
    public static final int port = 4223;


    public static void main(String args[]) throws Exception {
        launch(args);
    }

    public static XYChart.Series seriesTemp = new XYChart.Series();
    public static XYChart.Series seriesAirpressure = new XYChart.Series();
    public static XYChart.Series seriesAltitude = new XYChart.Series();

    @Override
    public void start(Stage stage) {
        stage.setTitle(&quot;Line Chart TinkerForge Sample&quot;);

        final VBox box = new VBox();
        seriesTemp.setName(&quot;Temp&quot;);
        seriesAirpressure.setName(&quot;Airpressure&quot;);
        seriesAltitude.setName(&quot;Altitude&quot;);

        final ObservableList&lt;node&gt; boxChildren = box.getChildren();
        boxChildren.add(createLineChart(&quot;Temp&quot;, seriesTemp));
        boxChildren.add(createLineChart(&quot;Airpressure&quot;, seriesAirpressure));
        boxChildren.add(createLineChart(&quot;Altitude&quot;, seriesAltitude));

        Scene scene = new Scene(box, 2000, 1500);

        stage.setScene(scene);
        stage.show();
        Platform.runLater(new Temp(&quot;dXj&quot;, seriesTemp));
        Platform.runLater(new Airpressure(&quot;jY4&quot;, seriesAirpressure));
        Platform.runLater(new Altitude(&quot;jY4&quot;, seriesAltitude));
        }

        private LineChart createLineChart(final String chartName,final XYChart.Series series ){
        final DateAxis dateAxis = new DateAxis();
        dateAxis.setLabel(&quot;Time&quot;);
        final NumberAxis yAxis = new NumberAxis();

        final LineChart&lt;date number=&quot;&quot;&gt; lineChart = new LineChart&amp;lt;&amp;gt;(dateAxis, yAxis);
            lineChart.setTitle(chartName);
            lineChart.getData().add(series);

            return lineChart;
            }
            }
        &lt;/date&gt;&lt;/node&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;i&gt;At&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&quot;&gt;https://bitbucket.org/rapidpm/jaxenter.de-0012-iot-tinkerforge&lt;/a&gt;&amp;nbsp;are all source codes you will need, including the TinkerForge API itself. I spoke with TinkerForge and we decided to put the API into maven. After we have done this, I will inform you. If you are interested, follow me on Twitter please (&amp;nbsp;&lt;b&gt;@SvenRuppert&lt;/b&gt;&amp;nbsp;)&lt;/i&gt;&lt;br /&gt;
&lt;i&gt;&lt;br /&gt;&lt;/i&gt;
Short and simple.. as always ..
But if we are using more sensors in a way like this, we will get performance problems.
To solve this we are connecting different &lt;b&gt;NoSQL&lt;/b&gt; systems soon. And we have to build the next version of JavaFX GUI-Elements...
.... stay tuned..  and happy coding.
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-20&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Infrared Sensor - Part 1</title>
        <category label="0.5.0"/>
        <category label="components"/>
        <category label="EV3"/>
        <category label="infrared"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="sensor"/>
        <published>2014-01-27T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/01/27/lego-mindstorms-ev3-components--infrar.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Infrared Sensor - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-01-27&quot;&gt;2014-01-27&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Now that we have demonstrated how to work with motors, the next component we will focus on is a sensor - the infrared sensor.&lt;br /&gt;
&lt;br /&gt;
In this first part we will show how to use the ability of the sensor to find objects and recognize the distance between that object and the sensor. There are other functionalities like receiving commands from the infrared remote control, which we will focus on in later posts.&lt;br /&gt;
&lt;br /&gt;
The used lejos version is 0.5.0-alpha like in our last postings as it is still the most current version (01/27/2014).&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The robot&lt;/h2&gt;
First, as always, we needed a new robot which uses the infrared sensor. Therefore I just enhanced the robot from the last episode a bit (so if you want to understand the source code in this posting it will help if you already have checked the two postings about &lt;a href=&quot;http://www.rapidpm.org/2014/01/lego-mindstorms-ev3-components-motors.html&quot;&gt;using&lt;/a&gt; &lt;a href=&quot;http://www.rapidpm.org/2014/01/lego-mindstorms-ev3-components-motors_15.html&quot;&gt;motors&lt;/a&gt;). I strengthened the basement between the two wheels, so that it wouldn't break because of the weight of the brick and other components. The brick is now no longer located directly between the wheels, but a bit more above. Additionally, I mounted the infrared sensor centered above / in front of the brick and plugged it into the sensor plug 2. The result looks like the following. &lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://2.bp.blogspot.com/-opuibjzU9_I/UuJxa2QG1vI/AAAAAAAAALE/yMY5H4v2YBU/s1600/DSCN0625e.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-opuibjzU9_I/UuJxa2QG1vI/AAAAAAAAALE/yMY5H4v2YBU/s1600/DSCN0625e.jpg&quot; height=&quot;320&quot; width=&quot;292&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://4.bp.blogspot.com/-RwYTQq7b_X0/UuJxZF2dN3I/AAAAAAAAAK8/G40LOi26B-U/s1600/DSCN0628e.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-RwYTQq7b_X0/UuJxZF2dN3I/AAAAAAAAAK8/G40LOi26B-U/s1600/DSCN0628e.jpg&quot; height=&quot;320&quot; width=&quot;279&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://1.bp.blogspot.com/-bMjGO2zIqPI/UuJxcCzoZvI/AAAAAAAAALM/ruR6MexJmBw/s1600/DSCN0629.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-bMjGO2zIqPI/UuJxcCzoZvI/AAAAAAAAALM/ruR6MexJmBw/s1600/DSCN0629.JPG&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
( could be a relative of disney's wall-e )&lt;br /&gt;
&lt;h2&gt;
    The parcours&lt;/h2&gt;
As said, in this tutorial we will focus on the ability of the infrared sensor to locate objects and return the objects' distance.&lt;br /&gt;
&lt;br /&gt;
The scenario I created for that purpose:&lt;br /&gt;
We have a walled zone (cage). The robot is placed anywhere in that cage and the robot will always move forwards until he is directly in front of a wall. He then will turn left (90°) and will again move forwards until he reaches the next wall.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/--kzkAggDFmw/UuJzfiCnFJI/AAAAAAAAALU/DnGSbJe2vxY/s1600/DSCN0632.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/--kzkAggDFmw/UuJzfiCnFJI/AAAAAAAAALU/DnGSbJe2vxY/s1600/DSCN0632.JPG&quot; height=&quot;249&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The infrared sensor API&lt;/h2&gt;
So, before looking at the code let's talk a bit about what classes and methods the api offers for the infrared sensor.&lt;br /&gt;
&lt;br /&gt;
It's quite easy to use an infrared sensor. You can simply instantiate an object of the EV3InfraredSensor-class. The (slightly) harder part is to tell the program to use the functionality of the sensor to detect objects and return their distances - and react on the returned values of course. Therefore you need: RangeFinderAdaptor, RangeFeatureDetector and FeatureListener.&lt;br /&gt;
&lt;br /&gt;
But it's not as hard as it might seem now.&lt;br /&gt;
The aim is to have a listener on the sensor, so that the it returns the distance of a recognized object in regular time intervals (let's say: return the object's distance every second).&lt;br /&gt;
We need a class, which implements the FeatureListener, to do that. In my opinion the name FeatureListener is a bit confusing.. &quot;Feature&quot; means the object that has been detected by the sensor. The class which implements it has to implement the method&lt;br /&gt;
public void featureDetected(final Feature feature, final FeatureDetector detector);&lt;br /&gt;
And this method is called in the given interval, so we react to the distance of the detected object here (we will see how that works in the code for the parcours).&lt;br /&gt;
But that implementing class is the last thing we will do.&lt;br /&gt;
The regular order for realizing our aim with the instantiated Sensor-object is:&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Instantiate a RangeFinderAdaptor-object and tell it in which mode the sensor is used&lt;/li&gt;
    &lt;li&gt;Instantiate a RangeFeatureDetector-object and tell it: the interval of checking the object's distance and the maximum distance of objects. It also needs the (prior to this step) created RangeFinderAdaptor-object.&lt;/li&gt;
    &lt;li&gt;Instantiate an object of the class which implements the FeatureListener&lt;/li&gt;
    &lt;li&gt;Add the instantiated listener from step 3 to the RangeFeatureDetector-object from step 2.&lt;/li&gt;
&lt;/ol&gt;
That's it. So after the theory let's have a look at the finished plain code.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The code &lt;/h2&gt;
We have two classes this time. The Main-Class (as always) and the class which implements the needed FeatureListener.&lt;br /&gt;
&lt;br /&gt;
Let's start with the Main-Class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.Button;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.RangeFinderAdaptor;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.objectdetection.FeatureListener;
import lejos.robotics.objectdetection.RangeFeatureDetector;
import lejos.utility.Delay;

public class Main {

    protected final static double NINETY_DEGREES = 90.0;
    protected final static double PILOT_SPEED = 50.0;
    protected final static int PILOT_ACCELERATION = 25;
    protected final static float MAX_DISTANCE = 100.0f;
    protected final static int INTERVAL = 500;
    protected final static double WHEEL_DIAMETER = 30.0f;
    protected final static double DISTANCE_BETWEEN_WHEELS = 170.0;

    public static void main(String[] args) {

        final DifferentialPilot pilot = new DifferentialPilot(WHEEL_DIAMETER, DISTANCE_BETWEEN_WHEELS, Motor.C, Motor.B);
        final EV3IRSensor infraredSensor = new EV3IRSensor(SensorPort.S2);

        configurePilot(pilot);
        configureInfraredSensor(infraredSensor, pilot);

        //wait for the sensor to be completely initialized and start the robot
        Delay.msDelay(5000);
        System.out.println(&quot;    Starting!&quot;);
        pilot.forward();
        Button.waitForAnyPress();
    }

    private static void configureInfraredSensor(final EV3IRSensor infraredSensor, final DifferentialPilot pilot) {
        final RangeFinderAdaptor rangeFinderAdaptor = new RangeFinderAdaptor(infraredSensor.getDistanceMode());
        final RangeFeatureDetector rangeFeatureDetector = new RangeFeatureDetector(rangeFinderAdaptor, MAX_DISTANCE, INTERVAL);
        final FeatureListener detectedObjectListener = new DetectedObjectListener(pilot);
        rangeFeatureDetector.addListener(detectedObjectListener);
    }

    private static void configurePilot(final DifferentialPilot pilot) {
        pilot.setAcceleration(PILOT_ACCELERATION);
        pilot.setRotateSpeed(PILOT_SPEED);
        pilot.setTravelSpeed(PILOT_SPEED);
    }
}
&lt;/pre&gt;
&lt;br /&gt;
The main-method is quite short and simple. In the first part we instantiate the pilot to control the wheels/motors and the infrared sensor. For more information on the pilot check the corresponding postings about using motors with the lejos api if you haven't done yet).&lt;br /&gt;
The EV3InfraredSensor-class only needs to know which plug it is plugged into to create a corresponding object.&lt;br /&gt;
&lt;br /&gt;
After creating our needed pilot and sensor we need to configure them. Have a look at the configureInfraredSensor-method. That's were we realize the things described in the last paragraph.&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;We create a RangeFinderAdaptor-object by telling the constructor in which mode the sensor should work.&lt;/li&gt;
    &lt;li&gt;We create a RangeFeatureDetector and assign the RangeFinderAdaptor-object plus the maximum distance of objects and the interval where the sensor should check for objects.&lt;/li&gt;
    &lt;li&gt;We create a FeatureListener-object which needs the pilot because we will control the pilot in it. We will see the implementation of the listener next.&lt;/li&gt;
    &lt;li&gt;We assign the created listener to the RangeFeatureDetector so the featureDetected-method of the listener is called in the configured interval.&lt;/li&gt;
&lt;/ol&gt;
After configuring the sensor I set a delay of five seconds because the configuration needs some time. When I tried starting the pilot without a delay it came to weird reactions like the robot moving forwards and backwards some millimeters jerkily.&lt;br /&gt;
After the delay the robot will start moving forwards and the rest of the code is done in the listener, so let's have a look at it next. (Button.waitForAnyPress() is just used to let the program continue. Without that line the program would just end before the robot even started moving.)&lt;br /&gt;
&lt;br /&gt;
The Listener-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.objectdetection.Feature;
import lejos.robotics.objectdetection.FeatureDetector;
import lejos.robotics.objectdetection.FeatureListener;
import static org.rapidpm.ev3.infrared.Main.*;

public class DetectedObjectListener implements FeatureListener {

    private DifferentialPilot pilot;

    public DetectedObjectListener(final DifferentialPilot pilot) {
        this.pilot = pilot;
    }

    @Override
    public void featureDetected(final Feature feature, final FeatureDetector detector) {
        int range = (int)feature.getRangeReading().getRange();
        if(range &amp;lt;= 10){
            if(range &amp;lt;=2){
                System.exit(0);
            }
            pilot.stop();
            pilot.rotate(NINETY_DEGREES);
            pilot.forward();
        }
    }
}
&lt;/pre&gt;
&lt;br /&gt;
We have a field for the pilot from the constructor which we will use in the featureDetected()-method which is called in the configured interval.&lt;br /&gt;
In that method we get the distance/range of a recognized object from the Feature-object (which represents the detected object).&lt;br /&gt;
If the range is greater than 10 (centimeters), nothing will happen. The robot will of course continue moving forward (remember that in the main-method we called pilot.forward() and told the program to wait for a button press to exit the program).&lt;br /&gt;
If the range is lower than 10, we know that the robot has reached a wall. So we tell the pilot to stop. After that we let the robot rotate by 90°. At last we tell the pilot to move forwards again. An exception to that behavior is the special case if the range is lower or equals 2 cm. If that is the case the program will exit. Why is that? Without that backdoor, the program would run until any button of the brick is pressed (remember the main-method). But instead of having to grab the robot and press a button we now can just hold any object directly in front of the infrared sensor and the program will exit.&lt;br /&gt;
&lt;h2&gt;
    The result&lt;/h2&gt;
At the end I added some console output to the featureDetected-method to have some feedback during the execution of the program.&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;    @Override
    public void featureDetected(final Feature feature, final FeatureDetector detector) {
        int range = (int)feature.getRangeReading().getRange();
        if(range &amp;lt;= 10){
            if(range &amp;lt;=3){
                System.out.println(&quot;Recognized signal directly on front of me: exiting!&quot;);
                System.exit(0);
            }
            System.out.print(&quot;Reached wall! Stopping...&quot;);
            pilot.stop();
            System.out.println(&quot;done!&quot;);
            System.out.print(&quot;Rotating 90 degrees...&quot;);
            pilot.rotate(NINETY_DEGREES);
            System.out.println(&quot;done!&quot;);
            pilot.forward();
        } else {
            System.out.println(&quot;range: &quot;+range);
        }
    }
&lt;/pre&gt;
&lt;br /&gt;
And here is the result (watch on youtube for better quality):&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://ytimg.googleusercontent.com/vi/OzLn8FzbEto/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/OzLn8FzbEto?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/OzLn8FzbEto?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-01-27&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>One way to deadlock a JBoss AS 7</title>
        <category label="Deadlock"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="RapidPM"/>
        <published>2014-02-03T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&quot; rel=&quot;tag&quot;&gt;One way to deadlock a JBoss AS 7&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-03&quot;&gt;2014-02-03&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Take a standard JBoss AS 7 and create/deploy a simple remote stateless session bean with two methods. One of them should
be asynchronous. As shown in the following example the asynchronous method creates a little bit of load and the second one&amp;nbsp;simulates a login.

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public interface IMyBean
{
 Future&amp;lt;Void&amp;gt; doNothing();
 void login();
}&lt;/pre&gt;
&lt;pre class=&quot;brush: java&quot;&gt;@Stateless
@Remote(IMyBean.class)
public class MyBean implements IMyBean
{
 @Override
 @Asynchronous
 public Future&amp;lt;Void&amp;gt; doNothing()
 {
  //Creates Load
  int lo = 0;
  for (int i = 0; i &amp;lt; 5000; i++)
  {
   lo += i;
  }
  System.out.println(&quot;nothing done&quot;);
  return new AsyncResult&amp;lt;Void&amp;gt;(null);
 }
 @Override
 public void login()
 {
  System.out.println(&quot;logged in&quot;);
 }
}
&lt;/pre&gt;
In the next step besides 10 EJB-Remote-Clients which access the asynchronous method parallel&amp;nbsp;we create an additional client which repeatly tries to login.
(Note: Classpath contains jboss-ejb-client.properties and jboss-client.jar)

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class HangTest
{
 public static void main(String args[]) throws NamingException
 {
  //EJB-Remote-Access
  Properties jndiProps = new Properties();
  jndiProps.put(Context.URL_PKG_PREFIXES, &quot;org.jboss.ejb.client.naming&quot;);
  Context context = new InitialContext(jndiProps);
  final IMyBean myBean = (IMyBean) context.lookup(&quot;ejb:/hangtest/MyBean!IMyBean&quot;);

  //Create and start asynchronous method threads
  final List&amp;lt;Thread&amp;gt; threadList = new ArrayList&amp;lt;&amp;gt;();
  for (int i = 0; i &amp;lt; 10; i++)
  {
   Thread thread = new Thread()
   {
    @Override
    public void run()
    {
     try
     {
      myBean.doNothing().get();
     }
     catch(Exception e)
     {
      e.printStackTrace();
     }
     finally
     {
      threadList.remove(this);
     }
    }
   };
   threadList.add(thread);
   thread.start();
  }

  //Repeated Login
  while(!threadList.isEmpty())
  {
   System.out.println(&quot;Try login...&quot;);
   myBean.login();
  }
 }
}
&lt;/pre&gt;
The code above works as expected which means that random server messages (&quot;nothing done&quot;, &quot;logged in&quot;) are printed out and that the login client can login. It also can be executed as many times as you want without a change in behavior.&lt;br /&gt;
BUT if you increase the number of asynchronous method clients for example to 20-30 (depending on your computer) then nothing is printed out and the login client can not login anymore. The JBoss or -&amp;nbsp;to be more specific - some&amp;nbsp;components of it are in a deadlock
(Note: JBoss shutdown does not work anymore).

So what has happened?&lt;br /&gt;
&lt;br /&gt;
To answer this question we have to look into the standalone.xml, especially in the subsystem &quot;urn:jboss:domain:ejb3&quot;. This section contains ejb3-related configurations and among them threadpools.&amp;nbsp;In this context it is important&amp;nbsp;that the default threadpool is shared between asynchronous calls, timers and ejb-remote.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:ejb3:1.2&quot;&amp;gt;&lt;/pre&gt;
&lt;pre class=&quot;brush: java&quot;&gt;...
 &amp;lt;async thread-pool-name=&quot;default&quot;/&amp;gt;
 &amp;lt;timer-service thread-pool-name=&quot;default&quot;&amp;gt;
  &amp;lt;data-store path=&quot;timer-service-data&quot; relative-to=&quot;jboss.server.data.dir&quot;/&amp;gt;
        &amp;lt;/timer-service&amp;gt;
 &amp;lt;remote connector-ref=&quot;remoting-connector&quot; thread-pool-name=&quot;default&quot;&amp;gt;
  &amp;lt;thread-pools&amp;gt;
   &amp;lt;thread-pool name=&quot;default&quot;&amp;gt;
    &amp;lt;max-threads count=&quot;10&quot;/&amp;gt;
    &amp;lt;keepalive-time time=&quot;100&quot; unit=&quot;milliseconds&quot;/&amp;gt;
   &amp;lt;/thread-pool&amp;gt;
  &amp;lt;/thread-pools&amp;gt;
   &amp;lt;/remote&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/pre&gt;
&lt;br /&gt;
So if you stumble upon that problem either increase the max-thread count property or even better seperate the thread-pools for asynchronous and ejb-remote components. &lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-03&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>TestFX a must for jUnit Tests inside JavaFX environments!</title>
        <category label="CDI"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="TestFX"/>
        <published>2014-02-04T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/04/testfx-a-must-for-junit-tests-inside-j.html&quot; rel=&quot;tag&quot;&gt;TestFX a must for jUnit Tests inside JavaFX environments!&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-04&quot;&gt;2014-02-04&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;b&gt;You have written jUnit Tests for JavaFX applications?&amp;nbsp;&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;You want to simulate user interactions?&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
If you are starting from scratch this will be a long task.&lt;br /&gt;
But the Team from TestFX is working on a solution.&lt;br /&gt;
TestFX (&lt;a href=&quot;https://github.com/SmartBear/TestFX&quot;&gt;https://github.com/SmartBear/TestFX&lt;/a&gt;) is an OpenSource framework from Henrik Olsson (SmartBear) with the goal to be an easy-to-use framework for testing JavaFX.&lt;br /&gt;
&lt;br /&gt;
This framework is ready for Java8 and supports JavaFX 2.&lt;br /&gt;
With this you are able to test featured JavaFX based GUIs.&lt;br /&gt;
&lt;br /&gt;
No License needed, no costs, complete OpenSource and extensible.&lt;br /&gt;
&lt;br /&gt;
The fluent and clean API is simple to use for the interaction with the controls. No special wrapper must be implemented, no boilerplate code is needed to test a simple control. Extend the jUnit Test-class and create an instance of your JavaFX control.&lt;br /&gt;
&lt;br /&gt;
That´s all you need. After this you are able to interact directly with the instance you created.&lt;br /&gt;
TestFX will give you a lot of service methods to interact and verify the behavior of the tested control.&lt;br /&gt;
And, if something goes wrong, you will get an screenshot of the failed test.&lt;br /&gt;
&lt;br /&gt;
One of the really big advantages is the easy possibility to extend TestFX by yourself. The framework is clean and well structured.&lt;br /&gt;
The support for Hamcrest Matchers and Lambdas will give you all you need to build complex tests.&lt;br /&gt;
&lt;br /&gt;
There is only one more thing....&lt;br /&gt;
... &amp;nbsp;we are working on the&lt;b&gt; CDI support&lt;/b&gt; for TestFX.&lt;br /&gt;
&lt;br /&gt;
stay tuned and happy coding.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-04&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>FXController with CDI managed DynamicObjectAdapter - Part 2</title>
        <category label="Arquillian"/>
        <category label="CDI"/>
        <category label="CDICommons"/>
        <category label="Java"/>
        <category label="JavaFX"/>
        <category label="JDK8"/>
        <category label="Reflection"/>
        <category label="Weld"/>
        <published>2014-02-07T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/07/fxcontroller-with-cdi-managed-dynamico.html&quot; rel=&quot;tag&quot;&gt;FXController with CDI managed DynamicObjectAdapter - Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-07&quot;&gt;2014-02-07&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Based on my &lt;a href=&quot;http://www.rapidpm.org/2014/01/fxcontroller-with-cdi-managed.html&quot;&gt;blog article part 1&lt;/a&gt; we want to integrate the DynamicObjectAdapter into an JavaFX application.
To remember: We have an interface called DemoLogic with two methods. add(..) and sub(..)
The implementation is really simple, but at runtime we could switch the implementation partially.
For this we needed an adapter.
&lt;br/&gt;
The biggest tdifference compared to the default CDI decorator was,
that we need no definition inside the beans.xml. The implementation is smaller
and no need for Qualifiers and other biolder-plate code.
&lt;br/&gt;
This DemoLogic we want to use now inside an JavaFX application.
For this we ned first an fxml.file called DemoPane.fxml. Here we will define a few elements.

&lt;br /&gt;
&lt;pre class=&quot;brush: javafx&quot;&gt;
&amp;lt;?import javafx.scene.control.Button?&amp;gt;
&amp;lt;?import javafx.scene.control.TextField?&amp;gt;
&amp;lt;?import javafx.scene.layout.VBox?&amp;gt;
&amp;lt;?import javafx.scene.control.Label?&amp;gt;
&amp;lt;?import javafx.scene.control.CheckBox?&amp;gt;
&amp;lt;fx:root type=&amp;quot;javafx.scene.layout.AnchorPane&amp;quot;
            xmlns:fx=&amp;quot;http://javafx.com/fxml&amp;quot;&amp;gt;
    &amp;lt;children&amp;gt;
        &amp;lt;VBox&amp;gt;
            &amp;lt;children&amp;gt;
                &amp;lt;Button fx:id=&amp;quot;button&amp;quot; text=&amp;quot;Hello World&amp;quot; /&amp;gt;
                &amp;lt;CheckBox fx:id=&amp;quot;checkbox&amp;quot; text=&amp;quot;switch context&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldA&amp;quot;/&amp;gt;
                &amp;lt;TextField fx:id=&amp;quot;textFieldB&amp;quot;/&amp;gt;
                &amp;lt;Label fx:id=&amp;quot;label&amp;quot;/&amp;gt;
            &amp;lt;/children&amp;gt;
        &amp;lt;/VBox&amp;gt;

    &amp;lt;/children&amp;gt;

&amp;lt;/fx:root&amp;gt;
    &lt;/class&gt;&lt;/pre&gt;

With the button we will activate the calculation, with the checkbox we will switch the context.
To have a small as possible implementation, there is no error checking.
&lt;br/&gt;
The next will be the controller called DemoController. This is a normal JavaFX Controller, but CDI managed.
How to get this? Well there is a good blog article here ;-) &lt;a href=&quot;http://www.rapidpm.org/2013/08/javafxcdi-bootstrap-add-on.html&quot;&gt;CDI JavaFX bootstrapping&lt;/a&gt;.
&lt;br/&gt;
Inside the DemoController we will get an Instance of the DemoLogic and the Context.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;
    &lt;/class&gt;&lt;/pre&gt;

The full implementation will be like the following.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@DynamicDecoratorTest
public class DemoController implements Initializable{

    @FXML public TextField textFieldA;
    @FXML public TextField textFieldB;
    @FXML public Button button;
    @FXML public Label label;
    @FXML public CheckBox checkbox;

    @Inject
    @DynamicDecoratorTest
    Instance&amp;lt;DemoLogic&amp;gt; demoLogicInstance;

    @Inject
    Context context;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        button.setText(&amp;quot;klick me&amp;quot;);
        button.setOnAction(actionEvent -&amp;gt; {

            final DemoLogic demoLogic = demoLogicInstance.get();

            final String textFieldAText = textFieldA.getText();
            final Integer a = Integer.valueOf(textFieldAText);

            final String textFieldBText = textFieldB.getText();
            final Integer b = Integer.valueOf(textFieldBText);

            final int result = demoLogic.add(a, b);
            label.setText(result+&amp;quot;&amp;quot;);

        });

        checkbox.setOnAction(actionEvent -&amp;gt; {
            context.original = checkbox.isSelected();
        });
    }
}
    &lt;/class&gt;&lt;/pre&gt;

Inside the method initialize you will find the connection between the GUI logic and the business logic.
This is now clean devided.
&lt;br/&gt;
To test this I was using Arquillian. LAter we will see how we could do this with TestFX.
We are working on the CDI Support.

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@RunWith(Arquillian.class)
public class DemoLogicTest {
    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackages(true, &amp;quot;org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;junit.org.rapidpm.demo&amp;quot;)
                .addPackages(true, &amp;quot;demo&amp;quot;)
                .addAsManifestResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);
    }

    @Inject @DynamicDecoratorTest
    Instance&amp;lt;DemoController&amp;gt; demoControllerInstance;
    @Inject
    Context context;

    static final FXMLLoader loader = new FXMLLoader();

    @Test
    public void testDemoLogicJavaFXTest() throws Exception {
        loader.setControllerFactory(param -&amp;gt; demoControllerInstance.get());
        Application.launch(DemoApp.class);
    }


    public static class DemoApp extends Application {
        @Override
        public void start(Stage stage) throws Exception {

            final URL resource = getClass()
                    .getClassLoader()
                    .getResource(&amp;quot;DemoPane.fxml&amp;quot;);
            loader.setLocation(resource);
            final DemoController controller = (DemoController) loader
                    .getControllerFactory()
                    .call(DemoController.class);
            try {

                loader.setController(controller);
                loader.setRoot(new AnchorPane());
                final Parent root = (Parent) loader.load();

                stage.setScene(new Scene(root));
                stage.setTitle(&amp;quot;Custom Control&amp;quot;);
                stage.setWidth(300);
                stage.setHeight(200);
                stage.show();
            } catch (IOException exception) {
                throw new RuntimeException(exception);
            }

        }

        public static void main(String[] args) {
            launch(args);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;
You never need the decorator from CDI anymore. ;-)  &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-07&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>JDK8/Streams are cool? Here is the answer. ;-)</title>
        <category label="Java"/>
        <category label="JDK8"/>
        <category label="Streams"/>
        <published>2014-02-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/10/jdk8-streams-are-cool-here-is-the-answ.html&quot; rel=&quot;tag&quot;&gt;JDK8/Streams are cool? Here is the answer. ;-)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-10&quot;&gt;2014-02-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Today I was preparing a few slides for my next JUG talk.
For this if started with a normal piece of code like the following.

&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;  
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; resultMatrix = new ArrayList&amp;lt;&amp;gt;();
        final Random random = new Random();
        for(int anzahlKurven = 0; anzahlKurven &amp;lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
            for (int i = 0; i &amp;lt; 10; i++) {
                final int nextInt = random.nextInt(100);
                result.add(nextInt);
            }
            resultMatrix.add(result);
        }
        return resultMatrix;
    }

    &lt;/class&gt;&lt;/pre&gt;
Next step would be the creation of two methods...
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;  
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for(int anzahlKurven = 0; anzahlKurven &amp;lt;ANZAHL_KURVEN; anzahlKurven++){
            final List&amp;lt;Integer&amp;gt; demoValuesForY = generateDemoValuesForY();
            result.add(demoValuesForY);
        }
        return result;
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY() {
        final Random random = new Random();
        final List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 0; i &amp;lt; 10; i++) {
            final int nextInt = random.nextInt(100);
            result.add(nextInt);
        }
        return result;
    }
    &lt;/class&gt;&lt;/pre&gt;
Ok, look´s like always... booooring.... So I started with Streams..
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&amp;gt; {
                    return random.nextInt(100);
                })
                .limit(10)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Not really better.. only new syntax.. now reducing the syntax..
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        final Random random = new Random();
        return Stream
                .generate(() -&amp;gt; random.nextInt(100))
                .limit(10)
                .collect(Collectors.toList());
    }

    &lt;/class&gt;&lt;/pre&gt;
But Random offer something new.
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream
                .generate(this::generateDemoValuesForY)
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    public List&amp;lt;Integer&amp;gt; generateDemoValuesForY(){
        return new Random()
                .ints(0, 100)
                .limit(10)
                .boxed()
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Combining both methods..
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        final Random random = new Random();
        return Stream.generate(
                    () -&amp;gt; Stream.generate(
                            () -&amp;gt; random.nextInt(100))
                            .limit(10)
                            .collect(Collectors.toList())
                )
                .limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
OK, not short enough.. we could it better..
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return Stream.generate(
                () -&amp;gt; new Random()
                        .ints(0, 100)
                        .limit(10)
                        .boxed()
                        .collect(Collectors.toList())
                ).limit(ANZAHL_KURVEN)
                .collect(Collectors.toList());
    }
    &lt;/class&gt;&lt;/pre&gt;
Uuuppsss..  static imports possible.. ;-)
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; generateDemoValueMatrix() {
        return generate(() -&amp;gt; new Random()
                .ints(0, 100)
                .limit(10).boxed().collect(toList())
        ).limit(ANZAHL_KURVEN).collect(toList());
    }
    &lt;/class&gt;&lt;/pre&gt;

Now compare with the first  and decide ;-) Streams are cool ? I think so!!
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Infrared Sensor - Part 2</title>
        <category label="0.5.0"/>
        <category label="components"/>
        <category label="EV3"/>
        <category label="infrared"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="Mindsuite"/>
        <category label="remote control"/>
        <category label="sensor"/>
        <published>2014-02-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/10/lego-mindstorms-ev3-components--infrar.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Infrared Sensor - Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-10&quot;&gt;2014-02-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;In this second part on the mindstorm's infrared sensor we will focus on the remote control and the ability of the remote sensor to recognize commands from that remote control respectively. There are multiple buttons on that remote control and we will control the robot by pressing different buttons.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The robot&lt;/h2&gt;
We will use the robot from the first part as it already uses the infrared sensor. The mindstorm's remote control looks like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/--ykPdzdmwGY/Uvd2Sls9PTI/AAAAAAAAAL8/l5i7epxq6rA/s1600/DSCN06462.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/--ykPdzdmwGY/Uvd2Sls9PTI/AAAAAAAAAL8/l5i7epxq6rA/s1600/DSCN06462.jpg&quot; height=&quot;320&quot; width=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
There are two buttons on the left (red) and two buttons on the right (blue). There is a fifth button at the top center which is (in contrast to all other buttons) a toggling button. So if you press it one time, the remote control sends a signal continuously until the button is pressed a second time. Before taking the photo I pressed that button one time to activate the green signal led. We will use that toggle button on the next part of the infrared sensor articles.&lt;br /&gt;
The red slider at the bottom center is for selecting a frequency channel. You can select four channels and the current channel is shown in the red circle under the toggling button.&lt;br /&gt;
&lt;h2&gt;
    The parcours&lt;/h2&gt;
There is the robot and there is the remote control. The aim is to press different buttons on the remote control to control and move the robot. We will use the two buttons on the left to let the robot rotate left/right, respectively the two buttons on the right to let the robot move forwards/backwards. When more than one button is pressed, the program should exit.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://3.bp.blogspot.com/-2hiF0vwZ5s0/Uvd2J57BhCI/AAAAAAAAAL0/nvAubN0xv3c/s1600/parcours.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-2hiF0vwZ5s0/Uvd2J57BhCI/AAAAAAAAAL0/nvAubN0xv3c/s1600/parcours.jpg&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2&gt;
    The infrared sensor API&lt;/h2&gt;
There are two relevant modes for the infrared sensor. The distance mode and the seek mode. We used the former implicitly in the last article and we will use it in this one because it offers the possibility to receive commands from the infrared remote control. The latter can be used to receive the position and the distance of the remote control to the robot (the next tutorial will use the seek mode).&lt;br /&gt;
&lt;br /&gt;
It's very easy to receive a command from the remote control. The only method we will use is infraredSensor.getRemoteCommand(0);&lt;br /&gt;
This will return an integer value which represents the pressed button on the remote control (e.g. the left upper button on the remote control will return 1). The parameter of the method is also an integer value which represents the frequency channel which we use on the remote control. You can select one of four different channels (via the red slider on the remote control). In this case we use channel 0 (which is called channel 1 on the remote control).&lt;br /&gt;
&lt;br /&gt;
That's it. We don't need RangeFinderAdaptors, RangeFeatureDetectors or anything like that this time. So let's directly jump to the finished code and see how it works.&lt;br /&gt;
&lt;h2&gt;
    The code &lt;/h2&gt;
There are two classes. The Main-class and an InfraredSignalCheckerThread, which extends Thread and contains the logic for received commands from the remote control.&lt;br /&gt;
&lt;br /&gt;
Let's start with the Main-Class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.Button;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.navigation.DifferentialPilot;

public class Main {

    protected final static double NINETY_DEGREES = 90.0;
    protected final static double PILOT_SPEED = 100.0;
    protected final static int PILOT_ACCELERATION = 500;
    protected final static double WHEEL_DIAMETER = 30.0f;
    protected final static double DISTANCE_BETWEEN_WHEELS = 170.0;

    public static void main(String[] args) throws InterruptedException {

        final DifferentialPilot pilot = new DifferentialPilot(WHEEL_DIAMETER, DISTANCE_BETWEEN_WHEELS, Motor.C, Motor.B);
        final EV3IRSensor infraredSensor = new EV3IRSensor(SensorPort.S2);
        final InfraredSignalCheckerThread checkerThread = new InfraredSignalCheckerThread(infraredSensor, pilot);

        configurePilot(pilot);
        checkerThread.start();
        Button.waitForAnyPress();
    }

    private static void configurePilot(final DifferentialPilot pilot) {
        pilot.setAcceleration(PILOT_ACCELERATION);
        pilot.setRotateSpeed(PILOT_SPEED);
        pilot.setTravelSpeed(PILOT_SPEED);
    }
}
&lt;/pre&gt;
&lt;br /&gt;
If you've (hopefully) read our &lt;a href=&quot;http://www.rapidpm.org/2014/01/lego-mindstorms-ev3-components-infrared.html&quot;&gt;last article&lt;/a&gt; on the infrared sensor, you will recognize that the Main-class became a bit smaller this time. We don't have to configure anything on the infrared sensor.&lt;br /&gt;
First we create instances for the pilot and the infrared sensor again. The new thing is the InfraredSignalCheckerThread which extends Thread. This class contains all the logic for received commands. The logic is implemented in a Thread-extending class because we want to listen continuously for any received commands. The created instance of the InfraredSignalCheckerThread needs the infraredSensor-object of course and it needs the pilot (because we will control/move the robot corresponding to the pressed button on the remote control).&lt;br /&gt;
&lt;br /&gt;
After we created the instances we configure the pilot and start the checkerThread. That's it. Let's have a look at the InfraredSignalCheckerThread-class now.&lt;br /&gt;
&lt;br /&gt;
The InfraredSignalCheckerThread-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.navigation.DifferentialPilot;

public class InfraredSignalCheckerThread extends Thread {

    private EV3IRSensor infraredSensor;
    private DifferentialPilot pilot;

    public InfraredSignalCheckerThread(final EV3IRSensor infraredSensor, final DifferentialPilot pilot){
        this.infraredSensor = infraredSensor;
        this.pilot = pilot;
    }

    @Override
    public void run() {
        while(true){
            final int remoteCommand = infraredSensor.getRemoteCommand(0);
            switch (remoteCommand){
                case 0:
                    pilot.quickStop();
                    break;
                case 1:
                    pilot.rotateLeft();
                    break;
                case 2:
                    pilot.rotateRight();
                    break;
                case 3:
                    pilot.forward();
                    break;
                case 4:
                    pilot.backward();
                    break;
                default:
                    System.out.println(&quot;button combination pressed..exiting...&quot;);
                    System.exit(0);
            }
        }
    }
}
&lt;/pre&gt;
&lt;br /&gt;
Let's have a look at the run-method. As you can see we have an infinite loop. In that loop we get an integer command from the method infraredSensor.getRemoteCommand(0). The given parameter (0) means that the infrared sensor should listen at frequency channel 0 (remember the red slider on the remote control for selecting a channel).&lt;br /&gt;
So now the thread is checking for any commands on channel 0 continuously. As next we check which command was sent. The different buttons send different integer values. Here is the documentation from within the EV3IRSensor-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;/** The button values are:
* 1 TOP-LEFT
* 2 BOTTOM-LEFT
* 3 TOP-RIGHT
* 4 BOTTOM-RIGHT
* 5 TOP-LEFT + TOP-RIGHT
* 6 TOP-LEFT + BOTTOM-RIGHT
* 7 BOTTOM-LEFT + TOP-RIGHT
* 8 BOTTOM-LEFT + BOTTOM-RIGHT
* 9 CENTRE/BEACON
* 10 BOTTOM-LEFT + TOP-LEFT
* 11 TOP-RIGHT + BOTTOM-RIGHT
* (0 means no buttons pressed)
*/&lt;/pre&gt;
&lt;br /&gt;
So, as you can see if no button is pressed on the remote control the method will return 0. The four buttons we want to use return 1, 2, 3 and 4.&lt;br /&gt;
Knowing these return values the switch statement becomes very easy to understand. If no button is pressed the robot shouldn't move. If the top left button is pressed the robot should rotate to the left and so on, we just call the corresponding methods of the DifferentialPilot-class to control the motors. If more than one button is pressed at a time the program should exit.&lt;br /&gt;
&lt;h2&gt;
    The result&lt;/h2&gt;
And here is the result (watch on youtube for better quality):&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://i1.ytimg.com/vi/Bco7R93tYv0/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/Bco7R93tYv0?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/Bco7R93tYv0?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
Some words on complications that I had while writing the program: After starting the CheckerThread I had to wait around 30 seconds before pressing a button on the remote control. I have no explaination for that but when I pressed any button earlier the robot moved very jerkily. I tried different workarounds like Thread.sleep() and Delay.ms() in the main-method and the checker-thread. I also tried a timer in the CheckerThread which printed a message on the console to tell the user that the program isn't yet ready if he tried to press any button during those first 30 seconds. But none of these attempts worked. &lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Raspberry Wildfly Cluster for less than 300EUR</title>
        <category label="IoT"/>
        <category label="JBoss"/>
        <category label="JDK8"/>
        <category label="Raspberry PI"/>
        <category label="Wildfly"/>
        <published>2014-02-13T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/13/raspberry-wildfly-cluster-for-less-tha.html&quot; rel=&quot;tag&quot;&gt;Raspberry Wildfly Cluster for less than 300EUR&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-13&quot;&gt;2014-02-13&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;So WildFly 8 is final now.&lt;br /&gt;
In this article i like to show how you can create a development/testing wildly cluster with raspberry pis and only one power supply.&lt;br /&gt;
&lt;br /&gt;
I have bought:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;5x Raspberry Pis (Model B) with Wireless USB-Adapters&lt;/li&gt;
    &lt;li&gt;1x 10-Port USB 2.0 Hub&lt;/li&gt;
    &lt;li&gt;5x USB to Micro USB Adpapter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-kpQJO9A_2ls/UvldlgnYDdI/AAAAAAAAAAk/W-_zu4KexQQ/s1600/Foto.JPG&quot; height=&quot;400&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
The Raspberries are configured with Raspbian Wheezy (wlan auto), JDK 8 and Wildfly 8 Final.&lt;br /&gt;
&lt;div&gt;
    In this combination you have to remove the '-server' from the domain.sh otherwise WildFly won't start.&lt;/div&gt;
&lt;br /&gt;
The WildFly Configuration can be made within 5 minutes.&lt;br /&gt;
&lt;ol&gt;
    &lt;li&gt;Master&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Create management user admin (./add-user.sh)&lt;/li&gt;
        &lt;li&gt;Create a management slave user for each of your pi slaves (./add-user.sh)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Remember the secret value at the end of this process for each slave (e.g.&lt;span style=&quot;font-family: Menlo; font-size: 11px;&quot;&gt;&amp;lt;secret value=&quot;MTIzNDU=&quot; /&amp;gt;&lt;/span&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to the public interface (e.g. 192.168.0.103)&amp;nbsp;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;li&gt;Slave&lt;/li&gt;
    &lt;ol&gt;
        &lt;li&gt;Configure host.xml with the slave name of 1.1&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style=&quot;font-family: Menlo; font-size: 11px;&quot;&gt;
                &amp;lt;host name=&quot;slave1&quot; xmlns=&quot;urn:jboss:domain:2.0&quot;&amp;gt;&lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Configure the server identity&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;div style=&quot;font-family: Menlo; font-size: 11px;&quot;&gt;
                &amp;lt;server-identities&amp;gt;
                &amp;lt;secret value=&quot;MTIzNDU=&quot;/&amp;gt;
                &amp;lt;/server-identities&amp;gt;
            &lt;/div&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Bind the interfaces to master and public interface (e.g. 192.168.0.104)&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;To simply the typing i have written a small script that takes the master-ip and the bind-ip&lt;/li&gt;
&lt;span style=&quot;font-family: Menlo; font-size: 11px;&quot;&gt;&lt;pre&gt;#MasterAdress
MASTER_ADDRESS=$1

# Bind Addresses
BIND_ADDRESS=$2

JBOSS_BIND_ADDRESS_MANAGEMENT=$BIND_ADDRESS
JBOSS_BIND_ADDRESS=$BIND_ADDRESS
JBOSS_BIND_ADDRESS_UNSECURE=$BIND_ADDRESS

sudo ./domain.sh -Djboss.bind.address.unsecure=$JBOSS_BIND_ADDRESS_UNSECURE -Djboss.bind.address.management=$BOSS_BIND_ADDRESS_MANAGEMENT -Djboss.bind.address=$JBOSS_BIND_ADDRESS -Djboss.domain.master.address=$MASTER_ADDRESS&lt;/pre&gt;
&lt;/span&gt;

        &lt;/ul&gt;
    &lt;/ol&gt;
&lt;/ol&gt;
Ready. Now you can deploy any archive either to main-server-group (just a domain) or other-server-group (full cluster).&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI EJB-Remote Context for wildfly</title>
        <category label="CDI"/>
        <category label="EJB"/>
        <category label="JBoss"/>
        <category label="JNDI"/>
        <category label="RapidPM"/>
        <category label="Wildfly"/>
        <published>2014-02-17T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/17/cdi-ejb-remote-context-for-wildfly.html&quot; rel=&quot;tag&quot;&gt;CDI EJB-Remote Context for wildfly&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-17&quot;&gt;2014-02-17&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div&gt;
    This article shows how ejb remote clients can be configured and connected in a more dynamic way.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
Within wildfly (current version 8.0.0.Final) there are several possibilities to connect ejb remote clients. Descriptions can be found on:&lt;br /&gt;
&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;the standard way with jboss-ejb-client.properties&lt;br /&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project&quot;&gt;https://docs.jboss.org/author/display/WFLY8/Remote+EJB+invocations+via+JNDI+-+EJB+client+API+or+remote-naming+project&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;a programmatic way&lt;br /&gt;&lt;a href=&quot;http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html&quot;&gt;http://alexbischoftechwriteups.blogspot.de/2013/11/jboss-as-7-programmatic-ejb-remote.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        The Problem&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        You have an application for two (or more) tenants which are identical but are deployed on different machines. Customers should be able to switch between those tenants without restarting the application. Additionally the code itself should not depend on tenant specific code.&lt;br /&gt;
        As far as i know this would be necessary with the standard approach (jboss-ejb-client.properties) given above.&lt;br /&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;h4&gt;
    &lt;/h4&gt;
    &lt;h3&gt;
    &lt;/h3&gt;
    &lt;h3&gt;
        A Solution&lt;/h3&gt;
    &lt;div&gt;
        &lt;br /&gt;
        After some consideration i have identified the following five components which are needed to implement this feature.&lt;/div&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Component that creates WildFly ejb remote connections&lt;/li&gt;
            &lt;li&gt;Component that produces the JNDI-Context&lt;/li&gt;
            &lt;li&gt;Component that holds the selected tenant-key for the client&lt;/li&gt;
            &lt;li&gt;Component that maps the tenant-keys to connection properties&lt;/li&gt;
            &lt;li&gt;CDI-Modul Qualifier&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;
        Putting them together leads to the following UML:&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
            &lt;a href=&quot;http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-ZZPEg3qbdpU/UwEe92qwxaI/AAAAAAAAACM/dWExN23jkkk/s1600/diagram.png&quot; height=&quot;382&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        To keep the example as simple as possible i have decided to use the ejb-remote-quickstart example and extend it with the jndicontext module. The current implementation uses a simple property file which holds the following data.&lt;/div&gt;
    &lt;div&gt;
&lt;pre&gt;tenant1.host=localhost
tenant1.port=8080
tenant1.username=test
tenant1.password=test
tenant1.noanonymous=false

tenant2.host=192.168.0.104
tenant2.port=8080
tenant2.username=test
tenant2.password=test
tenant2.noanonymous=false
&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;br /&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;h3&gt;
            The Fazit&lt;/h3&gt;
        &lt;br /&gt;
        The resulting service locator just has to use the JndiSession (in this example the RemoteEJBClient) which technically holds the tenant key and can be set from the GUI.&lt;br /&gt;
        &lt;div&gt;
&lt;pre&gt;public class RemoteEJBClient {
    @Inject @JndiContextAnno
    Instance&amp;lt;Context&amp;gt; contextInstance;

    @Inject
    JndiSession jndiSession;
    //...snip
    private RemoteCalculator lookupRemoteStatelessCalculator() throws NamingException {
        Context context = contextInstance.get();
        //...snip
    }
}

public class CDIBootStrapper {
    public static void main(String[] args) throws Exception
    {
        WeldContainer weld = new Weld().initialize();
        RemoteEJBClient client = weld.instance().select(RemoteEJBClient.class).get();

        client.getJndiSession().setTenantKey(&quot;tenant1&quot;);
        client.invokeStatelessBean();

        client.getJndiSession().setTenantKey(&quot;tenant2&quot;);
        client.invokeStatelessBean();
    }
)&lt;/pre&gt;
        &lt;/div&gt;
        So the code looks very clean and in comparison to jboss-ejb-client.properties way more functional.&lt;br /&gt;
        The sources can be found on&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/abischof/injectablejndicontext&quot;&gt;https://bitbucket.org/abischof/injectablejndicontext&lt;/a&gt;.&lt;br /&gt;
        Have fun coding... ;)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>are you missing the ? operator from project coin?</title>
        <category label="Core Java"/>
        <category label="Proxy"/>
        <category label="Reflection"/>
        <published>2014-02-20T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/20/are-you-missing-the-operator-from-proj.html&quot; rel=&quot;tag&quot;&gt;are you missing the ? operator from project coin?&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-20&quot;&gt;2014-02-20&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;How to get rid of 90% boiler plate code from NPE-save model - surfing?
&lt;br/&gt;
What I am meaning with modell surfing?
For example you have a class DemoClassA.&lt;br/&gt;
Inside DemoClassA you have an instance of DemoClassB.&lt;br/&gt;
Inside DemoClassB you have an instance of DemoClassC. And so on..&lt;br/&gt;
&lt;br/&gt;
You need something like the following.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
String value = demoClassA.getDemoClassB().getDemoClassC().getValue();
    &lt;/class&gt;&lt;/pre&gt;
The bad thing is if your valid model could have ClassB or ClassC with null.
You only have to show the value inside your GUI if the complete getter - cascade will be valid.
The first would be something like this.&lt;br/&gt;
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;  
 DemoClassB valueB = demoClassA.getDemoClassB();
 if(demoB != null){
    DemoClassC demoC = demoB.getDemoClassC();
    if(demoC != null){
     String value = demoC.getValue();
    }
 }
    &lt;/class&gt;&lt;/pre&gt;
A lot of booooring code. Project Coin had something with Wildcards.
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
 String value = demoClassA?.getDemoClassB()?.getDemoClassC()?.getValue();
    &lt;/class&gt;&lt;/pre&gt;
This is really nice, but it was not accepted. So I had do something like this for myself.
&lt;br/&gt;
One main point will be that the objects are ready initialized and I could not change the source code from this part.
Other languages as plain Java are not allowed.
No other frameworks, no AOP and something like this.
Puuhh.. what else?
&lt;br/&gt;
I was thinking about the newsletter nr 180 (&lt;a href=&quot;http://www.javaspecialists.eu/archive/Issue180.html&quot;&gt;http://www.javaspecialists.eu/archive/Issue180.html&lt;/a&gt;) from Heinz Kabutz.
He explained how to generate static Proxy Classes. This was a good point to start from.
&lt;br/&gt;
The key concept is the generating of Proxy Classes on the fly if they are needed. Via Reflection the real Subject is analysed and the Proxy generated. He is instanciating the new proxy class and the real subject with the default constructor. For my project this was not helpfull, because the model was grown over the last 10 years. Nearly no default constructor is available and the project owner was building something like a RMI Lazy Loading inside the persistent model. This model itself is used directly inside Swing.. hmmmmm  nothing was I really want to use... &lt;br/&gt;
Changing the old code is very time consuming. &lt;br/&gt;
On the other side I was writing a lot of this if != null code. &lt;br/&gt;
So I decided to write a Proxy that I can use on initialized objects. This must be recursive to get the NPE save getter cascades.
Based on Heinz code, I started to write a &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject &lt;/b&gt;to stop the instance creation on the real Subject.
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public class VirtualProxySourceGeneratorOnExistingObject extends VirtualProxySourceGenerator {

    public VirtualProxySourceGeneratorOnExistingObject(
            Class subject, Class realSubject) {
        super(subject, realSubject, Concurrency.OnExistingObject);
    }
    protected void addRealSubjectCreation(PrintWriter out,  String name, String realName) {
        out.printf(&quot; public %s realSubject;%n&quot;, name);
        out.println();
        out.printf(&quot; private %s realSubject() {%n&quot;, name);
        out.println(&quot; return realSubject;&quot;);
        out.println(&quot; }&quot;);
    }
}
    &lt;/class&gt;&lt;/pre&gt;
After this I changed the &lt;b&gt;VirtualProxySourceGenerator&lt;/b&gt;to use this &lt;b&gt;VirtualProxySourceGeneratorOnExistingObject&lt;/b&gt; and changed it in a way that a getter method will generate a new Proxy for the next realSubject.
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public abstract class VirtualProxySourceGenerator {

    protected final Class subject;
    protected final Class realSubject;
    private final String proxy;
    private CharSequence charSequence;
    private Concurrency type;

    public VirtualProxySourceGenerator(
            Class subject, Class realSubject, Concurrency type) {
        this.subject = subject;
        this.realSubject = realSubject;
        this.type = type;
        this.proxy = makeProxyName(subject, type);

    }

    private static String makeProxyName(Class subject, Concurrency type) {
        return &quot;$$_&quot; + subject.getName().replace('.', '_') +
                &quot;Proxy_&quot; + Integer.toHexString(System.identityHashCode(
                subject.getClassLoader())) + &quot;_&quot; + type;
    }

    public String getProxyName() {
        return proxy;
    }

    public CharSequence getCharSequence() {
        if (charSequence == null) {
            StringWriter sw = new StringWriter();
            generateProxyClass(new PrintWriter(sw));
            charSequence = sw.getBuffer();
        }
        //System.out.println(&quot;charSequence = &quot; + charSequence.toString());
        return charSequence;
    }

    private void generateProxyClass(PrintWriter out) {
        addClassDefinition(out);
        addProxyBody(out);
        out.close();
    }

    private void addProxyBody(PrintWriter out) {
        addRealSubjectCreation(out, subject.getName(), realSubject.getName());
        addProxiedMethods(out);
        out.println(&quot;}&quot;);
    }

    protected abstract void addRealSubjectCreation(PrintWriter out, String name, String realName);


    private void addClassDefinition(PrintWriter out) {
        addImports(out);
        out.printf(&quot;public class %s %s %s {%n&quot;,
                proxy, getInheritanceType(subject), subject.getName());
    }

    private String getInheritanceType(Class subject) {
        return subject.isInterface() ? &quot;implements&quot; : &quot;extends&quot;;
    }

    protected void addImports(PrintWriter out) {

    }

    private void addToStringIfInterface(PrintWriter out) {
        if (subject.isInterface()) {
            out.println();
            out.println(&quot; public String toString() {&quot;);
            out.println(&quot; if(realSubject() == null ) return \&quot;NullObjectHolder in \&quot; + this.getClass() ;&quot;);
            out.println(&quot; return realSubject().toString();&quot;);
            out.println(&quot; }&quot;);
        }
    }

    private void addProxiedMethods(PrintWriter out) {
        for (Method m : subject.getMethods()) {
            addProxiedMethod(out, m);
        }
        addToStringIfInterface(out);
    }

    private void addProxiedMethod(PrintWriter out, Method m) {
        if (Modifier.isFinal(m.getModifiers())) return;
        addMethodSignature(out, m);
        addMethodBody(out, m);   //NPE da val ger getter gefuellt wird

        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf(&quot;);%n }%n&quot;);
        else {
            out.printf(&quot;);%n&quot;);  //end of orig method.. start proxy additional stuff
            final boolean aFinal = Modifier.isFinal(returnType.getModifiers());
            if (!returnType.isPrimitive() &amp;&amp; !returnType.isArray() &amp;&amp; ! aFinal ){
                final String typeName = returnType.getTypeName();
                final String proxyGenerator = &quot;org.rapidpm.module.se.commons.proxy.ProxyGenerator&quot;;
                final String concurrency = &quot;org.rapidpm.module.se.commons.proxy.Concurrency&quot;;
                out.printf(&quot; if (val == null) { System.out.println(\&quot; val == null for method  + &quot; +m.getName()+ &quot;\&quot;);} %n&quot;);
                out.printf(typeName + &quot; proxyObj = &quot; + proxyGenerator+ &quot;.make(&quot;+typeName+&quot;.class, &quot;+typeName+&quot;.class, &quot; +concurrency+&quot;.&quot;+type.toString()+&quot;); %n&quot;);

                if (type.equals(Concurrency.OnExistingObject)){
                    out.printf(&quot;try { %n&quot;);
                    out.printf(&quot;    proxyObj.getClass().getDeclaredField(\&quot;realSubject\&quot;).set(proxyObj, val);  %n&quot;);
                    out.printf(&quot;} catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {  %n&quot;);
                    out.printf(&quot;    e.printStackTrace(); %n&quot;);
                    out.printf(&quot;}  %n&quot;);
                }
                out.printf(&quot; return proxyObj; %n&quot;);
            } else {
                out.printf(&quot; return val; %n&quot;);
            }
                out.printf(&quot;%n}%n&quot;);
        }
    }

    private void addMethodSignature(PrintWriter out, Method m) {
        out.printf(&quot;%n public %s&quot;, Util.prettyPrint(m.getReturnType()));
        out.printf(&quot; %s(&quot;, m.getName());
        addParameterList(out, m);
        out.printf(&quot;) {%n &quot;);
    }

    private void addParameterList(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? &quot;&quot; : &quot;, &quot;;
            out.printf(&quot;%s p%d%s&quot;, Util.prettyPrint(types[i]), i, next);
        }
    }

    private void addMethodBody(PrintWriter out, Method m) {
        addMethodBodyDelegatingToRealSubject(out, m);
    }

    private void addMethodBodyDelegatingToRealSubject(PrintWriter out, Method m) {
        //hole result
        final Class&lt;?&gt; returnType = m.getReturnType();
        if (returnType == void.class) out.printf(&quot;realSubject().%s(&quot;, m.getName());
        else if(m.getName().equals(&quot;toString&quot;)){
            out.println(&quot;String val;&quot;);
            out.println(&quot; if(realSubject() == null ) val = \&quot;NullObjectHolder in \&quot; + this.getClass() ; &quot;);
            out.printf(&quot; else val = realSubject().%s(&quot;, m.getName());
        } else if(m.getName().startsWith(&quot;get&quot;) &amp;&amp; ! returnType.isPrimitive()){
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + &quot; val;&quot;);
            out.println(&quot; if(realSubject() == null ) val = null ; &quot;);
            out.printf(&quot; else val = realSubject().%s(&quot;, m.getName());   
        } else {
            String name;
            if (returnType.isArray()) name = returnType.getSimpleName();
            else name = returnType.getName();
            out.println(name + &quot; val;&quot;);
            out.printf(&quot;val = realSubject().%s(&quot;, m.getName());  

        }
        addMethodCall(out, m);
    }

    private void addMethodCall(PrintWriter out, Method m) {
        Class&lt;?&gt;[] types = m.getParameterTypes();
        for (int i = 0; i &lt; types.length; i++) {
            String next = i == types.length - 1 ? &quot;&quot; : &quot;, &quot;;
            out.printf(&quot;p%d%s&quot;, i, next);
        }
    }
}
    &lt;/class&gt;&lt;/pre&gt;
The result is really cool. see the following code ;-)
&lt;br/&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
       DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println(&quot;value = &quot; + value);
    &lt;/class&gt;&lt;/pre&gt;
&lt;br/&gt;

You can navigate the full path. no NPE! No boiler plate code!

&lt;pre class=&quot;brush: java&quot;&gt;
@Test
    public void testGenerator00X() throws  Exception {
        DemoClassA demoClassA = new DemoClassA();
        demoClassA.demoClassB = null;

        final String value = proxy(demoClassA).getDemoClassB().getDemoClassC().getValue();
        System.out.println(&quot;value = &quot; + value);

    }

private DemoClassA proxy(DemoClassA demoClassA) {
        final Class&amp;lt;DemoClassA&amp;gt; aClass = (Class&amp;lt;DemoClassA&amp;gt;) demoClassA.getClass();
        final DemoClassA demo = ProxyGenerator.make(aClass, aClass, Concurrency.OnExistingObject);

        final Class&amp;lt;? extends DemoClassA&amp;gt; aClassProxy = demo.getClass();
        try {
            aClassProxy.getDeclaredField(&amp;quot;realSubject&amp;quot;).set(demo,demoClassA );
        } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {
            e.printStackTrace();
        }
        return demo;
    }
    &lt;/class&gt;&lt;/pre&gt;
You can now use every getter.. not NPE. Only the result will be an null. This was exactly what I needed to get only the valid values from the model if they are available.
This means, that you could proxy an object after you have initialized it.
The full source code is available under : &lt;a href=&quot;https://bitbucket.org/rapidpm/modules&quot;&gt;https://bitbucket.org/rapidpm/modules&lt;/a&gt; on the develop branch. I will merge it into the version 2.0 as generic pattern and CDI managed...



&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-20&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Wildfly/JBoss: How to secure customer passwords</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-02-28T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/02/28/wildfly-jboss--how-to-secure-customer-.html&quot; rel=&quot;tag&quot;&gt;Wildfly/JBoss: How to secure customer passwords&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-02-28&quot;&gt;2014-02-28&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div&gt;
    If you are familiar with Wildfly/JBoss you might now that you can easily configure your system to use JAAS database authentication  for the login process of your customer. Because it is considered bad practice to store passwords in clear text a hash-algorithm (e.g. SHA256, MD5) can be specified to encrypt them. Further informations can be found under&amp;nbsp;&lt;a href=&quot;https://docs.jboss.org/author/display/WFLY8/Security+subsystem+configuration&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    The problem with that approach is that your passwords will be vulnerable to dictionary and rainbowtable attacks (refresh your knowlegde&amp;nbsp;&lt;a href=&quot;http://netsecurity.about.com/od/hackertools/a/Rainbow-Tables.htm&quot;&gt;here&lt;/a&gt;).&lt;/div&gt;
&lt;div&gt;
    One way to face this problem is to use salted hashed passwords but the standard DatabaseServerLoginModule does not support that. But you can use &lt;a href=&quot;http://www.rtner.de/software/PBKDF2.html&quot;&gt;this&lt;/a&gt;&amp;nbsp;extension of the DatabaseServerLoginModule.&lt;/div&gt;
&lt;div&gt;
    The configuration is fairly easy:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;
    Wildfly/JBoss Konfiguration&lt;/h3&gt;
&lt;div&gt;
    &lt;b&gt;1&lt;/b&gt;. Create module&lt;/div&gt;
&lt;div&gt;
    Create the new module de.rtner.security.main and configure the module.xml like this&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;module xmlns=&quot;urn:jboss:module:1.1&quot; name=&quot;de.rtner.security&quot;&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource-root path=&quot;PBKDF2-1.0.4.jar&quot;/&amp;gt;
        &amp;lt;resource-root path=&quot;SaltedDatabaseLoginModule-1.0.4.jar&quot;/&amp;gt;
    &amp;lt;/resources&amp;gt;
   &amp;lt;dependencies&amp;gt;
        &amp;lt;module name=&quot;javax.api&quot;/&amp;gt;
        &amp;lt;module name=&quot;javax.servlet.api&quot;/&amp;gt;
        &amp;lt;module name=&quot;org.jboss.as.web-common&quot;/&amp;gt;
        &amp;lt;module name=&quot;org.jboss.logging&quot;/&amp;gt;
        &amp;lt;module name=&quot;org.picketbox&quot;/&amp;gt;
        &amp;lt;module name=&quot;sun.jdk&quot;/&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/module&amp;gt;&lt;/pre&gt;
    Both declared jars must also be present in that folder.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;2&lt;/b&gt;. Update module.xml of picketbox.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    Every custom login module has to be declared as a dependencies in the module.xml of picketbox. So just add this line:&lt;br /&gt;
    &lt;pre&gt;&amp;lt;module name=&quot;de.rtner.security&quot;/&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;b&gt;3&lt;/b&gt;. Update standalone.xml&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;&amp;lt;login-module code=&quot;de.rtner.security.auth.spi.SaltedDatabaseServerLoginModule&quot; flag=&quot;required&quot; module=&quot;de.rtner.security&quot;&amp;gt;
 &amp;lt;module-option name=&quot;dsJndiName&quot; value=&quot;java:jboss/datasources/ExampleDS&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;principalsQuery&quot; value=&quot;select password from User where login=?&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;rolesQuery&quot; value=&quot;select role, 'Roles' from UserRole where login=?&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;hmacAlgorithm&quot; value=&quot;HMacSHA256&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;formatter&quot; value=&quot;de.rtner.security.auth.spi.PBKDF2HexFormatter&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;engine&quot; value=&quot;de.rtner.security.auth.spi.PBKDF2Engine&quot;/&amp;gt;
 &amp;lt;module-option name=&quot;engine-parameters&quot; value=&quot;de.rtner.security.auth.spi.PBKDF2Parameters&quot;/&amp;gt;
&amp;lt;/login-module&amp;gt;&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
The password encryption can be done with the following function.
&lt;br /&gt;
&lt;div&gt;
&lt;pre class=&quot;brush: java&quot;&gt;private String createPbKdF2Passwort(String password) throws NoSuchAlgorithmException
{
 PBKDF2Formatter formatter = new PBKDF2HexFormatter();
 SecureRandom sr = SecureRandom.getInstance(&quot;SHA1PRNG&quot;);
 byte[] salt = new byte[8];
 sr.nextBytes(salt);
 int iterations = 1000;
 PBKDF2Parameters p = new PBKDF2Parameters(&quot;HmacSHA256&quot;, &quot;ISO-8859-1&quot;, salt, iterations);
 PBKDF2Engine e = new PBKDF2Engine(p);
 p.setDerivedKey(e.deriveKey(password));
 return formatter.toString(p);
}&lt;/pre&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Have fun coding.&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-02-28&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Infrared Sensor - Part 3</title>
        <category label="0.6.0"/>
        <category label="control"/>
        <category label="EV3"/>
        <category label="infrared"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="remote"/>
        <category label="sensor"/>
        <published>2014-03-10T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/03/10/lego-mindstorms-ev3-components--infrar.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Infrared Sensor - Part 3&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-03-10&quot;&gt;2014-03-10&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;This is the last part of our articles on the mindstorm's infrared sensor. After looking at the abilities of the remote sensor to recognize objects and commands from the remote control we will now have a closer a look on the functionality of finding an infrared signal sent by the remote control constantly.&lt;br /&gt;
&lt;br /&gt;
In february the lejos api had a new release - 0.6.0-ALPHA, so while using the 0.5.0-ALPHA-release in our last articles we will by now use the 0.6.0-release.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The robot&lt;/h2&gt;
We will use the robot from the last two articles on the infrared sensor again, and of course we will use the remote control. If you haven't checked the infrared articles already ( &lt;a href=&quot;http://www.rapidpm.org/2014/01/lego-mindstorms-ev3-components-infrared.html&quot;&gt;Part 1&lt;/a&gt;/&lt;a href=&quot;http://www.rapidpm.org/2014/02/lego-mindstorms-ev3-components-infrared.html&quot;&gt;Part 2&lt;/a&gt;) you should do so.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The parcours&lt;/h2&gt;
There is the robot and there is the remote control. In this part we want to tell the robot: Hold a distance of about 20-35cm to the remote control!&lt;br /&gt;
Which means that if we move the remote control nearer to the robot, it should move backwards and if we move the remote control away from the robot it should follow. We will only use the toggling button this time. If it is toggled and sending a signal, the robot should care about holding the right distance to the remote control. The program will exit if the signal ends (the button is untoggled).&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The infrared sensor API&lt;/h2&gt;
As announced in our last part on the infrared sensor we will use the SeekMode this time to receive the relative position and distance of the remote control.&lt;br /&gt;
&lt;br /&gt;
What we will need to instantiate therefore is: the infrared sensor and a RangeFinderAdaptor for the infrared sensor.&lt;br /&gt;
&lt;br /&gt;
As soon as we instantiated a RangeFinderAdapter we can use its getRanges()-method which returns all required information to let the robot find the remote control and its position.&lt;br /&gt;
&lt;br /&gt;
We will use a thread which will check those informations continuously so that the robot will always react to changes of the remote controls position.&lt;br /&gt;
&lt;br /&gt;
Let us directly jump to the finished code and see how it works in detail.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The code&lt;/h2&gt;
We have two classes this time: The Main-class and the InfraredSignalCheckerThread-class. First, let's look at the main-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Main {

    protected final static double PILOT_SPEED = 60.0;
    protected final static int PILOT_ACCELERATION = 500;
    protected final static double WHEEL_DIAMETER = 30.0f;
    protected final static double DISTANCE_BETWEEN_WHEELS = 170.0;

    public static void main(String[] args) throws InterruptedException {

        final DifferentialPilot pilot = new DifferentialPilot(WHEEL_DIAMETER, DISTANCE_BETWEEN_WHEELS, Motor.C, Motor.B);
        final EV3IRSensor infraredSensor = new EV3IRSensor(SensorPort.S2);
        final RangeFinderAdaptor rangeFinderAdaptor = new RangeFinderAdaptor(infraredSensor.getSeekMode());
        final InfraredSignalCheckerThread checkerThread = new InfraredSignalCheckerThread(rangeFinderAdaptor, pilot);

        configurePilot(pilot);
        checkerThread.start();

        Button.waitForAnyPress();
    }

    private static void configurePilot(final DifferentialPilot pilot) {
        pilot.setAcceleration(PILOT_ACCELERATION);
        pilot.setRotateSpeed(PILOT_SPEED);
        pilot.setTravelSpeed(PILOT_SPEED);
    }
}&lt;/pre&gt;
&lt;br /&gt;
First, we instantiate the pilot and the infraredSensor as always. Then we instantiate the RangeFinderAdapter which gets the infrared-sensor's SeekMode as a parameter. The RangeFinderAdapter will return all informations on the remote control's position. We then instantiate a InfraredSignalCheckerThread which gets the adaptor to check the remote control's position continuosly and the pilot to let the robot react on the remote control's position.&lt;br /&gt;
&lt;br /&gt;
After the instantiations we set the pilot's speeds and start the thread. So now let's have a look at our Thread-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class InfraredSignalCheckerThread extends Thread {

    private RangeFinderAdaptor adaptor;
    private DifferentialPilot pilot;
    private boolean isMoving = false;
    private  boolean isBearing = false;

    public InfraredSignalCheckerThread(final RangeFinderAdaptor adaptor, final DifferentialPilot pilot){
        this.adaptor = adaptor;
        this.pilot = pilot;
    }

    @Override
    public void run() {
        while(true){
            final float bearing = adaptor.getRanges()[0];
            final float distance = adaptor.getRanges()[1];
            if(distance &amp;lt; 129.0f &amp;amp;&amp;amp; distance &amp;gt; 127.0f &amp;amp;&amp;amp; bearing &amp;lt; 1.0f){
                System.exit(0);
            }
            doBearing(bearing);
            doMoving(distance);
        }
    }

    private void doBearing(final float bearing) {
        if(bearingIsOk(bearing)){
            isBearing = false;
        }
        else {
            if(bearing &amp;gt; 5.0f){
                pilot.rotateRight();
                isBearing = true;
            } else {
                pilot.rotateLeft();
                isBearing = true;
            }
        }
    }

    private void doMoving(final float distance) {
        if(!isBearing){
            if(!isMoving){
                pilot.quickStop();
            }
            if(distanceIsOk(distance)){
                pilot.quickStop();
                isMoving = false;
            }
            else {
                if(distance &amp;lt; 25.0f){
                    pilot.backward();
                } else {
                    pilot.forward();
                }
                isMoving = true;
            }
        }
    }

    private boolean bearingIsOk(final float bearing) {
        if(bearing &amp;lt; 5.0f &amp;amp;&amp;amp; bearing &amp;gt; -5.0f){
            return true;
        }
        return false;
    }

    private boolean distanceIsOk(final float distance) {
        if(distance &amp;gt;20.0f &amp;amp;&amp;amp; distance &amp;lt; 35.0f){
            return true;
        }
        return false;
    }
}&lt;/pre&gt;
&lt;br /&gt;
The constructor is easy as it only saves the adaptor and the pilot into private variables so that we can use them in the run-method. If you have a look at the private variables you will see that there are two boolean attributes isBearing and isMoving. We need those variables because we want to robot to first react on direction changes of the remote control (which is done by rotating), and we don't want the robot to react on distance changes (which is done by moving forwards/backwards) until the bearing has finished.&lt;br /&gt;
&lt;br /&gt;
Okay, let's have a look at the run-method which is called when we start the thread in the main-class.&lt;br /&gt;
We need two information on our remote control: The relative bearing to the robot and the distance to the robot. As said earlier, the getRanges()-Method returns those information. Here is what the api says:&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;/**
     * return a sample provider for the IR sensor operating in seek mode
     * The provider returns the bearing and distance to one or more IR beacons.
     * Up to four
     * beacons (on different channels 0-3) can be detected. Each beacon has an
     * associated two byte value (so the beacon on channel 0 will have values
     * in locations 0 and 1 in the array. The first location contains the relative
     * bearing to the beacon, the second the distance.

     * The bearing values range from -12 to +12 (with values increasing clockwise
     * when looking from behind the sensor. A bearing of 0 indicates the beacon is
     * directly in front of the sensor. Distance values (0-100) are in cm and if no
     * beacon is detected a bearing of 0 and a distance of 255 is returned.&lt;/pre&gt;
&lt;br /&gt;
So, we only care for the first two floats of the array because we only have one remote control. And we want the bearing-information of it ([0]) and the distance-information ([1]).&lt;br /&gt;
&lt;br /&gt;
After writing those informations into float variables we check, if the information are valid: The api says, if no signal is found the value of bearing will be 0 and the distance will be 255. So first, we check this case and exit the program if no signal is found (I found out, that if no signal is sent, the distance value is 128.0 and not 255 as written in the api).&lt;br /&gt;
&lt;br /&gt;
If the values are valid (a signal was received we call the methods doBearing and doMoving). Those methods will make the robot first react on direction changes of the remote control, and then react on distance changes afterwards. Let's have a closer look at these two methods, first the doBearing-Method:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;private void doBearing(final float bearing) {
        if(bearingIsOk(bearing)){
            isBearing = false;
        }
        else {
            if(bearing &amp;gt; 5.0f){
                pilot.rotateRight();
                isBearing = true;
            } else {
                pilot.rotateLeft();
                isBearing = true;
            }
        }
    }

&lt;/pre&gt;
&lt;pre class=&quot;brush: java&quot;&gt;private boolean bearingIsOk(final float bearing) {
        if(bearing &amp;lt; 5.0f &amp;amp;&amp;amp; bearing &amp;gt; -5.0f){
            return true;
        }
        return false;
    }
&lt;/pre&gt;
&lt;br /&gt;
First, we check if the bearing is okay, which means that the remote control is more or less directly in front of the robot. As said in the api that value can be anything between -12 and 12 (I found out, that this value can be anything between -25 and 25). So we tell the program, if the value is between -5 and 5 the bearing is okay and the reaction of the robot has finished. If the bearing is not okay, we tell the robot to rotate right of the bearing is greater than 5, or rotate left if the value is lower than -5. While rotating, we tell the program, that the robot is reacting to the bearing, by setting the isBearing-attribute to true. By the rotation the bearing value will approach to 0. When that's the case we tell the program, that the robot has finished its reaction and set the isBearing variable to false.&lt;br /&gt;
&lt;br /&gt;
And here's the doMoving-Method:&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
&lt;pre class=&quot;brush: java&quot;&gt;private void doMoving(final float distance) {
        if(!isBearing){
            if(!isMoving){
                pilot.quickStop();
            }
            if(distanceIsOk(distance)){
                pilot.quickStop();
                isMoving = false;
            }
            else {
                if(distance &amp;lt; 20.0f){
                    pilot.backward();
                } else {
                    pilot.forward();
                }
                isMoving = true;
            }
        }
    }
&lt;/pre&gt;
&lt;pre class=&quot;brush: java&quot;&gt;private boolean distanceIsOk(final float distance) {
        if(distance &amp;gt;20.0f &amp;amp;&amp;amp; distance &amp;lt; 35.0f){
            return true;
        }
        return false;
    }
&lt;/pre&gt;
    &lt;br /&gt;
    When the doBearing-method has finished, the doMoving-method will start. But we only want to react on the remote control's distance if the robot has finished it's reaction to the bearing. So we first check, if the robot is not bearing any longer. The second &quot;if&quot; that follows now is a bit tricky: We check, if the robot is moving as a result from the doMoving-Method or as a result from the doBearing-method. If it NOT moving as a result of the doMoving-method, it should stop because then we have the case, that the robot is still rotating as a reacting to the bearing (we didn't tell the program to stop rotating any time in the doBearing-method). So after that, we check if the remote control's distance is okay (which means the remote control is in a distance of 20 to 35cm) to the robot. If that is the case the robot should stop and we mark the isMoving-attribute as false. If the distance is NOT okay we tell the robot to move backwards of the distance is less then 25 (because it should &quot;flee&quot; from the remote control) or move forwards if the distance is greater than 35 (because it should &quot;follow&quot; the remote control).&lt;br /&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;h2&gt;
    The result&lt;/h2&gt;
And here is the result (watch on youtube for better quality):&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;object width=&quot;320&quot; height=&quot;266&quot; class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://i1.ytimg.com/vi/hGBv4OA2b9Q/0.jpg&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/hGBv4OA2b9Q?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/hGBv4OA2b9Q?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-03-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Lego Mindstorms EV3 Components: Color Sensor - Part 1</title>
        <category label="0.6.0"/>
        <category label="Color"/>
        <category label="EV3"/>
        <category label="Lego"/>
        <category label="lejos"/>
        <category label="Mindstorms"/>
        <category label="sensor"/>
        <published>2014-03-17T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/03/17/lego-mindstorms-ev3-components--color-.html&quot; rel=&quot;tag&quot;&gt;Lego Mindstorms EV3 Components: Color Sensor - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-03-17&quot;&gt;2014-03-17&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;In this and in our next postings on our Lego Mindstorms series we will have a closer look at the EV3 color sensor. Today we will use the sensor's ability of detecting and distinguishing different colors.&lt;br /&gt;
&lt;br /&gt;
Meanwhile version 0.7.0 of the lejos api was released. But in this tutorial we will still use the 0.6.0-release as 0.7.0s changes weren't dramatic. So you should be able to run the same program with 0.7.0, too.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The robot&lt;/h2&gt;
The only task the robot will do in this tutorial is: Detecting colors and tell us which color was detected. So in fact we only need the sensor. No motors or something like that is needed. But as we already have a robot from our last articles on the infrared sensor we will take that one and only switch the infrared sensor with the new color sensor.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://1.bp.blogspot.com/-4ymIE9suwYE/UyW4_gA8p9I/AAAAAAAAAMM/ei3h5K1LB6w/s1600/DSCN0665.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-4ymIE9suwYE/UyW4_gA8p9I/AAAAAAAAAMM/ei3h5K1LB6w/s1600/DSCN0665.JPG&quot; height=&quot;320&quot; width=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The parcours&lt;/h2&gt;
We built a stick with different colors: red, green, yellow and blue. We will hold the different colors in front of the robot's sensor and the robot should give feedback on the detected color by letting the background-LED of the brick's buttons illuminate in the same color. One exception: If blue is detected the program should exit.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/-r5IwUOLzJ0Q/UyW8RDwVa_I/AAAAAAAAAMY/mODactZInrw/s1600/DSCN0667.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-r5IwUOLzJ0Q/UyW8RDwVa_I/AAAAAAAAAMY/mODactZInrw/s1600/DSCN0667.JPG&quot; height=&quot;96&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2&gt;
    The color sensor API&lt;/h2&gt;
Like the infrared sensor the color sensor has different modes for different tasks. The infrared sensor for example had modes to detect signals of an infrared source or to detect objects and their distance to the robot.&lt;br /&gt;
There is a mode for every task a sensor can execute. To detect different colors we need the color sensor's colorIDMode. Once the sensor is in the right mode we only need to call&amp;nbsp;colorSensor.getColorID to get the detected color.&lt;br /&gt;
&lt;br /&gt;
Sounds easy, IS easy. Here comes the code.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The code&lt;/h2&gt;
We have two classes this time: The Main-class and the ColorRecognizerThread-class. First, let's look at the (really small) main-class:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class Main {


    public static void main(String[] args) throws InterruptedException {
        final EV3ColorSensor colorSensor = new EV3ColorSensor(SensorPort.S2);
        final SensorMode mode = colorSensor.getColorIDMode();
        final ColorRecognizerThread colorRecognizerThread = new ColorRecognizerThread(colorSensor);

        colorRecognizerThread.start();

        Button.waitForAnyPress();
    }

}&lt;/pre&gt;
&lt;br /&gt;
In contrast to our earlier postings we don't need a DifferentialPilot this time because the robot doesn't have to move. So the only things we do is instantiating a new ColorSensor-Instance and set it to the colorIDMode. Then we instantiate a ColorRecognizerThread (which extends Thread) and give it the color sensor object as a constructor parameter. In that thread we will implement the logic to detect colors and let the LED illuminate in the same color.&lt;br /&gt;
After starting the thread we wait for any button press as always so that our program won't just exit after starting the thread.&lt;br /&gt;
&lt;br /&gt;
The ColorRecognizerThread looks like the following:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class ColorRecognizerThread extends Thread {

    private EV3ColorSensor colorSensor;

    public ColorRecognizerThread(final EV3ColorSensor colorSensor) {
        this.colorSensor = colorSensor;
    }

    @Override
    public void run() {
        while(true){
            final int colorId = colorSensor.getColorID();
            switch (colorId){
                //RED
                case 0:
                    Button.LEDPattern(2);
                    break;
                //GREEN
                case 1:
                    Button.LEDPattern(1);
                    break;
                //BLUE
                case 2:
                    Button.LEDPattern(4);
                    threadSleep(2000);
                    Button.LEDPattern(0);
                    System.exit(0);
                //YELLOW
                case 3:
                    Button.LEDPattern(3);
                    break;
                default:
                    Button.LEDPattern(0);
            }
        }
    }

    private void threadSleep(final int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}&lt;/pre&gt;
&lt;br /&gt;
The constructor is easy as it only saves the color sensor object into a private variable so that we can use it in the run-method.&lt;br /&gt;
The really interesting part is the run-method of course, which is called when starting the thread in the main class. We have a deadloop as we want the robot to detect colors continuously. In that loop we get the color found by the color sensor by calling the getColorID()-Method. As you can see it returns an integer. By having a look at the sources (Color.java) we find out which integer value stands for which color:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;    public static final int RED = 0;
    public static final int GREEN = 1;
    public static final int BLUE = 2;
    public static final int YELLOW = 3;
    public static final int MAGENTA = 4;
    public static final int ORANGE = 5;
    public static final int WHITE = 6;
    public static final int BLACK = 7;
    public static final int PINK = 8;
    public static final int GRAY = 9;
    public static final int LIGHT_GRAY = 10;
    public static final int DARK_GRAY = 11;
    public static final int CYAN = 12;
    public static final int BROWN = 13;
    public static final int NONE = -1;&lt;/pre&gt;
&lt;br /&gt;
So, after getting the id we have a &quot;switch case&quot;-statement for that id. If the found color is red, green or yellow we just want the background-LED of the brick to illuminate in the same color (case 0, 1 and 3). Maybe you are curious why the integer parameter for the Button.LEDPattern-method doesn't match with the integer values from the Color-class. Well, the LED doesn't have a pattern for all of the colors. It has 9 different patterns in total (thanks to &lt;a href=&quot;http://www.lejos.org/forum/viewtopic.php?p=22564#p22564&quot; target=&quot;_blank&quot;&gt;tigger from the forum&lt;/a&gt; for that information!)&lt;br /&gt;
&lt;br /&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
    0: turn off button lights&lt;br /&gt;
    1/2/3: static light green/red/yellow&lt;br /&gt;
    4/5/6: normal blinking light green/red/yellow&lt;br /&gt;
    7/8/9: fast blinking light green/red/yellow&lt;br /&gt;
    &amp;gt;9: same as 9.&lt;/blockquote&gt;
&amp;nbsp;If the color blue is found (case 2) I wanted the program to do the following: Turn the light of the color sensor of and exit the program. The api says that we can use the setFloodlight(int color)-method for that by calling it with Color.NONE:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;/**
* Used to turn on or off the floodlight by color. If the sensor has multiple light colors,
* you can control which color is turned on or off. If the color does not exist, it does
* nothing and returns false. You can turn the floodlight off by using Color.NONE.&lt;/pre&gt;
But this throws an exception if you look at the sources of EV3ColorSensor (the default case of the switch-statement):&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public boolean setFloodlight(int color)
    {
        int mode;
        switch (color)
        {
        case Color.BLUE:
            mode = COL_AMBIENT;
            break;
        case Color.WHITE:
            mode = COL_COLOR;
            break;
        case Color.RED:
            mode = COL_REFLECT;
            break;
        default:
            // TODO: Should we ignore a wrong color or throw an exception?
            throw new IllegalArgumentException(&quot;Invalid color specified&quot;);
        }
        switchMode(mode, SWITCH_DELAY);
        // TODO Auto-generated method stub
        return true;
    }&lt;/pre&gt;
&lt;br /&gt;
But I never the less wanted to give some optic signal to show that the program is exiting. Turning off the LED wasn't enough because we already turn it of in our default case of our switch statement in the ColorRecognizerThread. In the end I decided to let the LED display the pattern 4 (blinking green) for two seconds before exiting the program. The threadSleep-method was just created to have the try-catch out of our run-method (because it looks stupid).&lt;br /&gt;
&lt;br /&gt;
That's all.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    The result&lt;/h2&gt;
And here is the tiny result (watch on youtube for better quality):&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;center&gt;
    &lt;object class=&quot;BLOGGER-youtube-video&quot; classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot; data-thumbnail-src=&quot;https://i1.ytimg.com/vi/mhQgVQueluk/0.jpg&quot; height=&quot;266&quot; width=&quot;320&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;https://www.youtube.com/v/mhQgVQueluk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; /&gt;&lt;param name=&quot;bgcolor&quot; value=&quot;#FFFFFF&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;embed width=&quot;320&quot; height=&quot;266&quot;  src=&quot;https://www.youtube.com/v/mhQgVQueluk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/center&gt;
&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-03-17&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Java8 CompletableFuture for JavaFX and CDI Part I</title>
        <category label="CDI"/>
        <category label="Concurrency"/>
        <category label="Core Java"/>
        <category label="Java8"/>
        <category label="JavaFX"/>
        <published>2014-03-28T00:00:00+01:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/03/28/java8-completablefuture-for-javafx-and.html&quot; rel=&quot;tag&quot;&gt;Java8 CompletableFuture for JavaFX and CDI Part I&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-03-28&quot;&gt;2014-03-28&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;Java8 CompletableFuture for JavaFX and CDI Part I

Java8 will give you a few more tools to solve concurrency problems.&lt;br/&gt;
One of them is the CompletableFuture. I will show you, how you could sync the &lt;br/&gt;
two different init-cycles from CDI and JavaFX with this.&lt;br/&gt;
&lt;br/&gt;
CDI and JavaFX are using a life-cycle during the init process. &lt;br/&gt;
For CDI you can use the method that is annotated with the &lt;br/&gt;
AnnotationLiteral @Postconstruct and for JavaFX you can use the method initialize(..)
&lt;br/&gt;
If you want to have a method that is called after both others are finished you have to think &lt;br/&gt;
about the problem that it is not clear which method is called first.&lt;br/&gt;
To show more in detail what the problem is let us think about the following.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
private String pattern;
private SimpleDateFormat sdf;

//beispielhaft für eine init
public void createSDF(){
    this.sdf = new SimpleDateFormat(this.pattern);        
}

//beispielhaft für eine init
public void newPattern(final String pattern) {
    this.pattern = pattern;
}

public String format(final Date date){
    return sdf.fomat(date);
}
&lt;/pre&gt;

To use the method format(..) you must use the methods newPattern(..) and createSDF first.&lt;br/&gt;
But both in the right order like the following code snipp.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
newPattern(&quot;yyyy.MM.dd&quot;);
createSDF();
final String s = versionAB.format(new Date());
System.out.println(&quot;s = &quot; + s);
&lt;/pre&gt;
If you are calling first createSDF(..) for example you will get an exception.&lt;br/&gt;
But thinking to the problem with CDI and JavaFX it must be
valid to do something like the following.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
createSDF();
newPattern(&quot;yyyy.MM.dd&quot;);

final String s = versionAB.format(new Date());
System.out.println(&quot;s = &quot; + s);
&lt;/pre&gt;
The method creatdSDF(..) is called before newPattern(..).&lt;br/&gt;
The solution is quite simple. The method call from createSDF must be non blocking but&lt;br/&gt;
waiting with the execution until newPattern(..) was called.&lt;br/&gt;
The same with format(..). This method call must wait until both are finished but itself it &lt;br/&gt;
is an blocking method call. This is to give the developer the feeling he expected, &lt;br/&gt;
if he is working with the result from format(..).
&lt;br/&gt;
To solve this we have to booleans called initCompleteA and initCompleteB. &lt;br/&gt;
Both are false in the beginning. If newPattern(..) is called initcompleteA will be true, &lt;br/&gt;
and initCompleteB will be true after the method creatSDF() is ready.

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
public void newPattern(final String pattern) {
    this.pattern = pattern;
    initCompleteA=true;
    System.out.println(&quot;newPattern = &quot; + pattern);
}
public void createSDF(){
    CompletableFuture&amp;lt;Void&amp;gt; supplyAsync
        = CompletableFuture
        .supplyAsync(taskCreateSDF, cachedThreadPool);
    supplyAsync.thenAccept(System.out::println);
}
public Supplier&amp;lt;Void&amp;gt; taskCreateSDF = ()-&amp;gt; {
    while(! initCompleteA ){
        try {
            System.out.println(&quot;createSDF is waiting&quot; );
            TimeUnit.MILLISECONDS.sleep(4);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    sdf = new SimpleDateFormat(pattern);
    initCompleteB = true;
    return null;
};
&lt;/pre&gt;

The Method format(..) now is only waiting for both...
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt; 
public Supplier&amp;lt;String&amp;gt; task = ()-&amp;gt; {
//Warten bis alle true
    while(! (initCompleteA &amp;&amp; initCompleteB) ){
        try {
            System.out.println(&quot;initCompleteA = &quot; + initCompleteA);
            System.out.println(&quot;initCompleteB = &quot; + initCompleteB);
            System.out.println(&quot;pattern = &quot; + pattern);
            System.out.println(&quot;sdf = &quot; + sdf);
            TimeUnit.MILLISECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    return sdf.format(this.date);
};
private Date date;

public String format(final Date date){
    this.date = date;
    supplyAsync = CompletableFuture
        .supplyAsync(task, cachedThreadPool);
    try {
        return supplyAsync.get();
    } catch (InterruptedException | ExecutionException e) {
        e.printStackTrace();
    }
    return &quot;&quot;;
}
&lt;/pre&gt;

The example you will find at
&lt;a href=&quot;http://stash.rapidpm.org/projects/PUB/repos/jaxenter.de-0016-async-calls/browse&quot;&gt;http://stash.rapidpm.org/projects/PUB/repos/jaxenter.de-0016-async-calls/browse&lt;/a&gt;
&lt;br/&gt;
The next Part will show how we have to implement
the JavaFX CDI bootstrapping to use this.
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-03-28&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Dynamic WADL with CDI</title>
        <category label="WADL"/>
        <category label="CDI"/>
        <category label="JAXRS"/>
        <published>2014-04-08T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/04/08/dynamic-wadl-with-cdi.html&quot; rel=&quot;tag&quot;&gt;Dynamic WADL with CDI&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-04-08&quot;&gt;2014-04-08&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;The WADL (Web Application Definition Language) is used to
describe HTTP-based applications which means that JAXRS
applications can and are described by that. Typically it is
generated (static or dynamic) with the jersey maven
plugin (detailed informations can
be found &lt;a href=&quot;https://wikis.oracle.com/display/Jersey/WADL&quot;&gt;here&lt;/a&gt;).
But for some reason i could not use either maven nor the jersey plugin.
So i had to do it on my own and used it as a little finger exercise.
The main goal was to achieve dynamic wadl generation for a JAXRS application.

The working steps were relativly easy:&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Create a JAXB-Model from the current WADL-Specification&lt;/li&gt;
    &lt;li&gt;Create a CDI-Based design for JAXRS resources&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
    In the end you only have to provide a producer class which creates a @Wadl Class[] and inject an instance of @Wadl &amp;nbsp;@WadlApplication.&lt;br /&gt;
    &lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;@Path(&quot;/&quot;)
public class MyResource
{
 @Inject
 @Wadl
 @WadlApplication
 Instance&amp;lt;Application&amp;gt; applicationInstance;

 @GET
 @Produces(MediaType.APPLICATION_XML)
 public Application getRoot(@Context UriInfo uriInfo)
 {
  return getWadl(uriInfo);
 }
}
&lt;/pre&gt;
    &lt;br /&gt;
    &amp;nbsp;As a simple example assume that you have a TinkerForge MasterBrick connected to a RaspberryPi. Addionally you want to provide a JAXRS-Resource for every connected sensor. With the sample code below you are now able to extend the WADL dynmically.&lt;br /&gt;
    &lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class WadlClassProducer
{
 @Inject
 @SensorAnno
 @Any
 Instance&amp;lt;SensorResource&amp;gt; sensorInstances;

 @Produces
 @Wadl
 public Class[] create()
 {
  List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; clazzList = new ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;();
  for (SensorResource sensor : sensorInstances)
  {
   clazzList.add(sensor.getResourceClass());
  }
  return clazzList.toArray(new Class[0]);
 }
}
&lt;/pre&gt;
    &lt;br /&gt;
    The sources can be found&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/abischof/wadlpoc&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-04-08&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Java8 CompletableFuture for JavaFX and CDI Part II</title>
        <category label="java"/>
        <category label="javafx"/>
        <category label="blub"/>
        <published>2014-04-13T00:00:00+02:00</published>
        <author>
            <name>Sven Ruppert</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/04/13/java8-completablefuture-for-javafx-and.html&quot; rel=&quot;tag&quot;&gt;Java8 CompletableFuture for JavaFX and CDI Part II&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-04-13&quot;&gt;2014-04-13&lt;/time&gt; &lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;from Sven Ruppert&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;The last part was describing how you could reach the goal to make the order of some dependent method calls independent.
Now we will see, how we could use this for the combination of CDI and JavaFX.
&lt;br/&gt;
If you want to have CDI managed Controllers inside your JavaFX application you have to deal with the two life cycles.
The init from CDI and the init from JavaFX. If you are combining both technologies, you will have the problem that
the order of the livecycle steps are not always in the same order. Depending from the technology that will start,
the order of the init methods will change. For CDI it is the method with the annotation Postconstruct and for JavaFX the method initialize.
&lt;br/&gt;
Well, lets see what you could do..
&lt;br/&gt;
For this example I will start with the FXMLoader. Check the Method setControllerFactory.
You will see, that after the creation of the Controller instance the method initInstance() will be called.
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
@Singleton
public class FXMLLoaderSingleton {

    private @Inject @CDILogger Logger logger;
    private @Inject Instance&amp;lt;CDIJavaFxBaseController&amp;gt; instance;

    private final ClassLoader cachingClassLoader = new FXClassLoader(FXMLLoader.getDefaultClassLoader());
    private final Map&amp;lt;Class, FXMLLoader&amp;gt; class2LoaderMap = new HashMap&amp;lt;Class, FXMLLoader&amp;gt;();

    public FXMLLoader getFXMLLoader(Class clazz) {
        final Map&amp;lt;Class, FXMLLoader&amp;gt; loaderMap = class2LoaderMap;
        final String name = clazz.getName();
        if (loaderMap.containsKey(clazz)) {
            if (logger.isDebugEnabled()) {
                logger.debug(&amp;quot;fx loader fuer diese klasse schon in der map &amp;quot; + name);
            }
        } else {
            final String fxmlFileName = clazz.getSimpleName() + &amp;quot;.fxml&amp;quot;;
            if (logger.isDebugEnabled()) {
                logger.debug(&amp;quot;fxmlFileName -&amp;gt; &amp;quot; + fxmlFileName);
            }
            final URL resource = clazz.getResource(fxmlFileName);
//            FXMLLoader loader = new CDIFXMLLoader(resource);
            FXMLLoader loader = new FXMLLoader(resource);
            loader.setClassLoader(cachingClassLoader);
            loader.setControllerFactory(new Callback&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;() {
                @Override
                public Object call(Class&amp;lt;?&amp;gt; param) {
                    final Class&amp;lt;JavaFXBaseController&amp;gt; p = (Class&amp;lt;JavaFXBaseController&amp;gt;) param;
                    final JavaFXBaseController controller = instance.select(p).get();
                    &lt;b&gt;controller.initInstance(); //trigger async call&lt;/b&gt;
                    return controller;
                }
            });
            try {
                final Class&amp;lt;?&amp;gt; aClass = Class.forName(clazz.getName() + &amp;quot;Controller&amp;quot;);
                final CDIJavaFxBaseController call = (CDIJavaFxBaseController) loader.getControllerFactory().call(aClass);
                loader.setController(call);
            } catch (ClassNotFoundException e) {
                logger.error(e);
            }
            loaderMap.put(clazz, loader);
        }
        return loaderMap.get(clazz);
    }

    private FXMLLoaderSingleton() {
    }
}
&lt;/pre&gt;
&lt;br/&gt;
The method &lt;b&gt;initInstance()&lt;/b&gt; will trigger the init-process. Inside the method the task will be called async.
The task itself will wait until the CDi and JavaFX init will be ready. After this the method  initBusinessLogic will be called.
This means, thet the developer only will have to implement the method &lt;b&gt;initBusinessLogic&lt;/b&gt; and he will be sure that all init stuff is done.
&lt;br/&gt;
Happy coding ;-)

&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
public abstract class JavaFXBaseController implements CDIJavaFxBaseController {

    public static final String DONE = &quot;done&quot;;

    private boolean mockModusActive = false;
    public boolean isMockModusActive() {
        return mockModusActive;
    }
    public void setMockModusActive(boolean mockModusActive) {
        this.mockModusActive = mockModusActive;
    }

    public abstract void cleanUp();

    public abstract void setI18n();

    private @Inject @CDILogger Logger logger;

    private Boolean initCompleteCDI = false;
    private Boolean initCompleteFX = false;

    public CompletableFuture&amp;lt;String&amp;gt; supplyAsync;

    @Override
    public final void initInstance(){
       final CachedThreadPoolSingleton instance = CachedThreadPoolSingleton.getInstance();
       supplyAsync = CompletableFuture.supplyAsync(task, instance.cachedThreadPool);
       if (logger.isDebugEnabled()) supplyAsync.thenAccept(logger::debug);  //logger
    }

    public final Supplier&amp;lt;String&amp;gt; task = ()-&gt; {
        //        Warten bis alle true
        while(! (initCompleteCDI &amp;&amp; initCompleteFX) ){
        try {
        //evtl loggen
        if (logger.isDebugEnabled()) {
        logger.debug(&quot;initCompleteCDI = &quot; + initCompleteCDI);
        logger.debug(&quot;initCompleteFX = &quot; + initCompleteFX);
        logger.debug(&quot;getClass().getName() = &quot; + getClass().getName());
        }
        TimeUnit.MILLISECONDS.sleep(1);
        } catch (InterruptedException e) {
        e.printStackTrace();
        return e.toString();
        }
        }

        if (logger.isInfoEnabled()) {
        logger.info(&quot;initBusinessLogic() =&gt; called now&quot;);
        }
        final boolean fxApplicationThread = Platform.isFxApplicationThread();
        if ( ! fxApplicationThread){
        Platform.runLater(this::initBusinessLogic);
        } else {
        initBusinessLogic();
        }


        if (logger.isInfoEnabled()) {
        logger.info(&quot;initBusinessLogic() =&gt; done now&quot;);
        }
        return DONE;
        };

        @PostConstruct
        public final void postconstruct(){
        if (logger.isDebugEnabled()) {
        logger.debug(&quot;PostConstruct mockModusActive == &quot; + mockModusActive);
        }
        cdiPostConstruct();
        initCompleteCDI = true;
        if (logger.isDebugEnabled()) {
        logger.debug(&quot;postconstruct ready &quot; + getClass().getName());
        }
        }

        public abstract void cdiPostConstruct();

        @Override
        public final void initialize(URL url, ResourceBundle resourceBundle) {
        if (logger.isDebugEnabled()) {
        logger.debug(&quot;initialize mockModusActive== &quot; + mockModusActive);
        }
        initializeFX(url, resourceBundle);
        initCompleteFX = true;
        if (logger.isDebugEnabled()) {
        logger.debug(&quot;initialize ready &quot; + getClass().getName());
        }
        }


        protected abstract void initializeFX(URL url, ResourceBundle resourceBundle);
        /**
        * wird nach der init von CDI und JavaFX aufgerufen,
        * egal in welcher Reihenfolge die init durchlaufen wird.
        *
        * ein blockierender method call
        *
        */
        public abstract void initBusinessLogic();
        }
&lt;/pre&gt;





&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/sven-ruppert&quot; rel=&quot;author&quot;&gt;Sven Ruppert&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-04-13&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Mocking IoT Tinkerforge Sensors</title>
        <category label="java"/>
        <category label="iot"/>
        <category label="tinkerforge"/>
        <published>2014-05-12T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/05/12/mocking-iot-tinkerforge-sensors.html&quot; rel=&quot;tag&quot;&gt;Mocking IoT Tinkerforge Sensors&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-05-12&quot;&gt;2014-05-12&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;A couple of days have passed since the TinkerForge-API has been published on maven central. But what can you do with it if there is no hardware around. This was my situation
as i wanted to try it out and play with the weatherstation from jaxenter (&lt;a href=&quot;http://jaxenter.de/Internet-of-Things-mit-Java-8-TinkerForge-Teil-5-171242&quot;&gt;weatherstation&lt;/a&gt;).&lt;br/&gt;
So what can you do now? You can either mock the hardware sensor and struggle with the protocol of the sensors or you can mock the software sensor. The latter approach seems easier to me. So lets start.&lt;br/&gt;

If you only want to have a single value request (e.g. getTemperature()) the task is easy. You only have to override the method on sensor instantiation.
&lt;pre class=&quot;brush: java&quot;&gt;
new BrickletTemperature(&quot;dV6&quot;, new IPConnection()){
    @Override
    public short getTemperature() throws TimeoutException, NotConnectedException {
           return 42;
    }
};
&lt;/pre&gt;

The more interesting task is to hack the callback listeners so that you continuously get measured values. Ok, this would be no real data but it should be sufficient for
testing and playing. To hack the sensor we need to dive a little bit into the internals of the sensors. If you add a listener to a sensor it is put into an internal list which is
processed if a specific callback event (for example for temperature) is fired. In this process the changed value is passed.&lt;br/&gt;
So the task is to create a thread which fires a specific callback event on a sensor.

&lt;pre class=&quot;brush: java&quot;&gt;
//Creates Standard-BrickletTemperature with injected IPConnection
BrickletTemperature brickletTemperature = new BrickletTemperature(&quot;kjh6&quot;, ipConnection);

//Determine the callback event constants (note: callbackreached listeners are ignored)
List&amp;lt;Integer&amp;gt; ints = new ArrayList&lt;&gt;();
    Field[] declaredFields = deviceClass.getDeclaredFields();
    for (Field declaredField : declaredFields) {
    String fieldName = declaredField.getName();
    if (fieldName.startsWith(&quot;CALLBACK_&quot;) &amp;&amp; !fieldName.endsWith(&quot;REACHED&quot;)) {
    declaredField.setAccessible(true);
    int callbackIndex = declaredField.getInt(device);
    ints.add(callbackIndex);
    }
    }

    //Creates a Value generator for the bricklet
    try {
    createBrickletMock(ipConnection, brickletTemperature, (byte) 200, ints);
    } catch (NoSuchMethodException e) {e.printStackTrace();}
&lt;/pre&gt;
The callback events of each sensor are mapped to a constant in the sensor class which starts with CALLBACK (callback reached events have CALLBACK_&amp;lt;name&amp;gt;_REACHED) so that you can use reflection to read the values.
&lt;pre class=&quot;brush: java&quot;&gt;
static &amp;lt;Bricklet extends Device&amp;gt; void startCallbackListenerThread(IPConnection ipcon, Device bricklet, byte startValue, List&amp;lt;Integer&amp;gt; callbackIndizes) throws NoSuchMethodException {
        Class&amp;lt;IPConnection&amp;gt; ipConnectionClass = IPConnection.class;
        Method callDeviceListener = ipConnectionClass.getDeclaredMethod(&quot;callDeviceListener&quot;, Device.class, byte.class, byte[].class);
        callDeviceListener.setAccessible(true);

        //start thread for each callback event
        for (int callbackIndex : callbackIndizes) {
            new Thread(() -&amp;gt; {

                try {

                    Random random = new Random();
                    while (true) {

                        //Generates values -1, 0 or 1
                        int randomDiff = random.nextInt(3) - 1;

                        //Invoke on device
                        callDeviceListener.invoke(ipcon, bricklet, (byte) callbackIndex, new byte[]{0, 0, 0, 0, 0, 0, 0, 0, (byte) (startValue + randomDiff), 0});


                        //wait 5s
                        Thread.sleep(THREAD_SLEEP_MILLIS);
                    }
                } catch (IllegalAccessException | InvocationTargetException | InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
        }
    }&lt;/pre&gt;

So have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-05-12&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>CDI ContextResolver Pattern 2.0</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="CDI"/>
        <category label="ContextResolver"/>
        <published>2014-05-14T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/05/14/cdi-contextresolver-pattern-2.0.html&quot; rel=&quot;tag&quot;&gt;CDI ContextResolver Pattern 2.0&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-05-14&quot;&gt;2014-05-14&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;b&gt;What is the ContextResolver Pattern?&lt;/b&gt;&lt;br /&gt;
It is a pattern described by Sven Ruppert (&lt;a href=&quot;http://jaxenter.de/artikel/CDI-entscheide-spaet-entscheide-gut-168301&quot;&gt;here&lt;/a&gt;) to solve the following problem.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Problem&lt;/b&gt;&lt;br /&gt;
A service has several implementations which are provided to clients depending on a specific environment context (for example: test- or developmentcontext) on the service side. The
client does not know about the context and the environment context must be dynamically configurable.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;The Solution&lt;/b&gt;&lt;br /&gt;
Decouple the service creation from the context resolving by introducing&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;a ContextResolver which determines the current context and returns an annotation literal&lt;/li&gt;
    &lt;li&gt;a Service Context Qualifier&lt;/li&gt;
    &lt;li&gt;a service producer which uses the servicecontextqualifier&lt;/li&gt;
&lt;/ul&gt;
With that you can develop very flexible and extendable modules or applications which can be dynamically configured at runtime.&lt;br /&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;b&gt;The Evolution&lt;/b&gt;&lt;br /&gt;
The previous version is implemented with CDI extensions which is a little bit harder to understand and needs a&amp;nbsp;&lt;i&gt;javax.enterprise.inject.spi.Extension&lt;/i&gt; file. So here
is the improved version which uses only plain CDI-Producers and therefore should be easier to understand.&lt;br /&gt;
&lt;br /&gt;
The client:&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;@Inject
@DemoLogicContext
Instance&amp;lt;DemoLogic&amp;gt; demoLogicInst;
&lt;/pre&gt;
&lt;br /&gt;
The producer:
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class DemoLogicProducer
{
 @Produces
 @DemoLogicContext
 public DemoLogic create(BeanManager beanManager, @Any Instance&amp;lt;ContextResolver&amp;gt; contextResolvers)
 {
  return ManagedBeanCreator.createManagedInstance(beanManager, contextResolvers, DemoLogic.class);
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ContextResolver:
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class DemoLogicContextResolver implements ContextResolver
{
 @Inject
 Context context;

 @Override
 public AnnotationLiteral&amp;lt;?&amp;gt; resolveContext(Class&amp;lt;?&amp;gt; targetClass)
 {
  //Determines the context and returns annotionliteral 
  return context.isUseB() ? new MandantB.Literal() : new MandantA.Literal();
 }
}
&lt;/pre&gt;
&lt;br /&gt;
The ManagedBeanCreator:
&lt;br /&gt;
&lt;pre class=&quot;brush: java&quot;&gt;public class ManagedBeanCreator
{
 public static &amp;lt;T&amp;gt; T createManagedInstance(BeanManager beanManager, Instance&amp;lt;ContextResolver&amp;gt; contextResolvers,
   Class&amp;lt;? extends T&amp;gt; clazz)
 {
  //FindFirst
  for (ContextResolver contextResolver : contextResolvers)
  {
   AnnotationLiteral&amp;lt;?&amp;gt; annotationLiteral = contextResolver.resolveContext(DemoLogic.class);
   Set&amp;lt;Bean&amp;lt;?&amp;gt;&amp;gt; beans = beanManager.getBeans(clazz, annotationLiteral);

   //Create CDI Managed Bean
   Bean&amp;lt;?&amp;gt; bean = beans.iterator().next();
   CreationalContext&amp;lt;?&amp;gt; ctx = beanManager.createCreationalContext(bean);
   return (T) beanManager.getReference(bean, clazz, ctx);
  }
  return null;
 }
}
&lt;/pre&gt;


    The sources can be found
    &lt;a href=&quot;https://bitbucket.org/abischof/cdicontextresolver2&quot;&gt;here&lt;/a&gt;.
Have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-05-14&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Simple Forge for Rapid Development</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="javaee"/>
        <category label="forge"/>
        <published>2014-05-21T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/05/21/simple-forge-for-rapid-development.html&quot; rel=&quot;tag&quot;&gt;Simple Forge for Rapid Development&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-05-21&quot;&gt;2014-05-21&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;This article covers the simple usage of Forge to build up an application (or at least an almost complete stack for a prototype).&lt;br /&gt;
So what is Forge? It is a command line tool to create and configure Java projects. You can setup different modules (for example cdi or jpa) and Forge generates all resources needed. This can be anything from java classes to deployment descriptors right up to java test classes or JSF files. On top of that this behavior is incremental, so that you can use it at any time you want.&lt;br /&gt;
&lt;br /&gt;
The setup of the modules is done by Convention over Configuration so that everything is quite simple and comprehensible. The Command line also supports tab-completion and makes the usage very fluent.&lt;br /&gt;
&lt;br /&gt;
You may ask why not Forge 2 (it is already in version 2.5.0). It is faster and a little bit easier but it lacks in one point: the Arquillian module is currently not migrated but it is planed.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Example&lt;/b&gt;&lt;br /&gt;
At first we have to tell Forge to use defaults. Then we create a project with name forgetest and the topLevelPackage de.bischinger. With this a Maven War project is created.&lt;br /&gt;
&lt;pre style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;&quot;&gt;[no project] Development $ set ACCEPT_DEFAULTS true;
[no project] Development $ new-project --named forgetest --topLevelPackage de.bischinger;&lt;/pre&gt;
After this you can see that the shell changes from &quot;no project&quot; to your project name &quot;forge test&quot;.&lt;br /&gt;
Now we want to add persistence namely Hibernate and WildFly (creates a persistence.xml and adds dependency to pom.xml)&lt;br /&gt;
&lt;pre style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;&quot;&gt;[forgetest] forgetest $ persistence setup --provider HIBERNATE --container WILDFLY;
&lt;/pre&gt;
Create a JPA entity customer with a required field name. For this we need also to setup JPA validation.&lt;br /&gt;
&lt;pre style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;&quot;&gt;[forgetest] forgetest $ validation setup --provider HIBERNATE_VALIDATOR;
[forgetest] forgetest $ entity --named Customer --package de.bischinger.model;
[forgetest] Customer.java $ field string --named name;
[forgetest] Customer.java $ constraint NotNull --onProperty name;
&lt;/pre&gt;
The interesting part is once again that after the creation the shell switches to the created context so that you can easily create the fields. You can also list the context with &lt;i&gt;ls&lt;/i&gt;.&lt;br /&gt;
&lt;br /&gt;
Now we want to build a simple JSF UI for the customer entity. At first we need to setup Scaffold which generates our UI.&lt;br /&gt;
&lt;pre style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;&quot;&gt;[forgetest] Customer.java $ scaffold setup;
[forgetest] Customer.java $ scaffold from-entity de.bischinger.model.Customer.java;
&lt;/pre&gt;
After this we can build our application with &lt;i&gt;build&lt;/i&gt;&amp;nbsp;and after deploying (which can also be done with Forge but this would be another topic) we can see the following JSF-Page. On the left side is our link to the customers where we can already create, search and delete customers. It also has a paging feature.&lt;br /&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
    &lt;a href=&quot;http://4.bp.blogspot.com/-aD-MwxP_yr8/U3xRxzDgRUI/AAAAAAAAAC0/CeFU1hJQRiY/s1600/Bildschirmfoto+2014-05-21+um+09.10.41.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-aD-MwxP_yr8/U3xRxzDgRUI/AAAAAAAAAC0/CeFU1hJQRiY/s1600/Bildschirmfoto+2014-05-21+um+09.10.41.png&quot; height=&quot;177&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
    Ok - the GUI still must be customized but this is again another topic. The point is that i have spent so much time in the past to reach a state like this - now it is possible within just 2 minutes.&lt;/div&gt;
&lt;br /&gt;
But we are not finished yet - what about tests? For this we can install the Arquillian plugin into our project. We setup Arquillian to use a WildFly-Managed-Container with JUnit after which we can create our tests.&lt;br /&gt;
&lt;pre style=&quot;background-color: #f8f8f8; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(221, 221, 221); box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 13px; line-height: 19px; margin-bottom: 15px; margin-top: 15px; overflow: auto; padding: 6px 10px; word-wrap: normal;&quot;&gt;[forgetest] Customer.java $ forge install-plugin arquillian;
[forgetest] Customer.java $ arquillian setup --containerName WILDFLY_MANAGED --testFramework junit;
[forgetest] Customer.java $ arquillian create-test --class de.bischinger.model.Customer.java;&lt;/pre&gt;
Done.&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Conclusion&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;&lt;br /&gt;&lt;/b&gt;
From my point of view this tool is worth a lot. I can integrate and configure almost any standard technology (JPA, Validation...) i want in no time. This way i can really concentrate on the business. Forge is nicely integrated in the JBoss Developer Studio, it can also be used on any shell and it is easy to understand. The generated sources can also be studied to familiarize with unknown technologies.&lt;br /&gt;
&lt;br /&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-05-21&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Vaadin Valo: The new theme (since version 7.3)</title>
        <category label="java"/>
        <category label="java8"/>
        <category label="vaadin"/>
        <category label="theme"/>
        <published>2014-05-25T00:00:00+02:00</published>
        <author>
            <name>Marco Ebbinghaus</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/05/25/vaadin-valo--the-new-theme-(since-vers.html&quot; rel=&quot;tag&quot;&gt;Vaadin Valo: The new theme (since version 7.3)&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-05-25&quot;&gt;2014-05-25&lt;/time&gt; &lt;a href=&quot;/team/marco-ebbinghaus&quot; rel=&quot;author&quot;&gt;from Marco Ebbinghaus&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;h2&gt;
    Vaadin's roadmap&amp;nbsp;&lt;/h2&gt;
Vaadin released the most current release 7.2 in the middle of may. It offers some interesting features like responsive layouts for components (letting components react on size changes and set new css-styles depending on the current size), native support for IE11 and improved push channel with support for long polling, Tomcat 8, Wildfly 8, Glassfish 4, Jetty 9.1. To be honest, I didn't already try all new features.

&lt;br /&gt;
&lt;br /&gt;
As you can read on their roadmap (&lt;a href=&quot;https://vaadin.com/blog/-/blogs/7-series&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&quot;https://vaadin.com/roadmap&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;) the next release 7.3 (to be released in june) will contain a new theme called 'Valo' which looks pretty nice and which I wanted to try for a new project. There are already two alpha versions available for it and I will show you later in this post how I got it running.&lt;br /&gt;
&lt;br /&gt;
Then there will be a version 7.4 which will contain a new component 'Grid' which seems to become very important. By now the Table-component seems to be one of the core components used in Vaadin-applications. If we believe the Vaadin guys, Grid will become Table's big brother with lots of improvements and new functions that the Table can't offer (e.g. dynamic row heights). I'm very curious about it and it really seems to become a big component because its release will be splitted in two parts. A first version of Grid will be released with version 7.4 but the following release 7.5 will mainly focus on extending the Grid-component.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;
    Valo&lt;/h2&gt;
&lt;div&gt;
    Let's focus on the new theme 'Valo'. The Vaadin guys posted a preview-picture of the new styles and in my opinion this looks really nice:&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;403&quot; src=&quot;https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676&quot;&gt;https://vaadin.com/image/image_gallery?uuid=ee33077b-bf15-42a3-bd37-b2d2955502e9&amp;amp;groupId=10187&amp;amp;t=1396549547676&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    As I already wrote it will be included in release version 7.3 in june. There are already two beta versions - alpha1 and alpha2 - which you can use to start experimenting.&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Here is what I did to get a Vaadin-Project running with the new theme in version 7.3.0.alpha2 (I mainly followed the instructions from the &lt;a href=&quot;http://vaadin.com/download/prerelease/7.3/7.3.0/7.3.0.alpha2/release-notes.html&quot; target=&quot;_blank&quot;&gt;release notes&lt;/a&gt;&amp;nbsp;but at some points I had to go a slightly different way):&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;br /&gt;
    &lt;ol&gt;
        &lt;li&gt;Create a new maven project from the vaadin archetype &quot;vaadin-archetype-application&quot; with version 7.3.0.alpha2&lt;/li&gt;
        &lt;li&gt;mvn clean install&lt;/li&gt;
        &lt;li&gt;Navigate to the exploded war-directory and from there navigate to WEB-INF/lib&lt;/li&gt;
        &lt;li&gt;Extract &quot;vaadin-themes-7.3.0.alpha2.jar&quot; as it contains the needed &quot;valo&quot; folder&lt;/li&gt;
        &lt;li&gt;Copy the folder VAADIN/themes/valo (from the extracted vaadin-themes-7.3.0.alpha2 folder) to the folder src/main/webapp/VAADIN/themes in your Vaadin-project. The &quot;valo&quot; folder should now exist next to your &quot;mytheme&quot;-folder.&lt;/li&gt;
        &lt;li&gt;Change the content of the &quot;mytheme.scss&quot;-file in your &quot;mytheme&quot;-folder to the following:&lt;br /&gt;&lt;pre&gt;// Any variables you wish to override should be done before importing Valo

// Modify the base color of the theme
$v-app-background-color: hsl(200, 50%, 50%);

@import &quot;../valo/valo&quot;;

@mixin mytheme {
  @include v-valo;
}&lt;/pre&gt;
        &lt;/li&gt;
        &lt;li&gt;Install ruby (because it contains the needed sass-compiler which will be included in the final 7.3-release but which is not included in the alpha-version). You can download and install it from &lt;a href=&quot;http://www.rubyinstaller.org/&quot; target=&quot;_blank&quot;&gt;http://www.rubyinstaller.org/&lt;/a&gt;. I installed it on Windows and after installing it I used the console to install the sass-compiler via ruby by entering the following command: gem install sass
        &lt;/li&gt;
        &lt;li&gt;Navigate via console to your project and into the folder src/main/webapp/VAADIN/mytheme
        &lt;/li&gt;
        &lt;li&gt;Enter the following command: sass styles.scss styles.css&lt;/li&gt;
        &lt;li&gt;Go into your project's pom.xml. Comment out the &amp;lt;goal&amp;gt;compile-theme&amp;lt;/goal&amp;gt; - entry in the &quot;vaadin-maven-plugin&quot;.&lt;i&gt; Look at the update at the end of this posting for more explaination on this.&lt;/i&gt;&lt;/li&gt;
        &lt;li&gt;Build&amp;nbsp;(e.g. by running mvn install)&amp;nbsp;and deploy your war file to your web-/applicationserver - Done!&lt;/li&gt;
    &lt;/ol&gt;
    &lt;b style=&quot;background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;&quot;&gt;IMPORTANT: Have a look at your styles.css-file in your mytheme-folder before trying to deploy the application. It should be filled with many thousands of lines. And THAT is the right content. If you have a content like&lt;/b&gt;&lt;br /&gt;
&lt;pre style=&quot;background-color: white; color: #222222; font-size: 13px; line-height: 18.479999542236328px;&quot;&gt;@import &quot;../valo/valo&quot;;

.mytheme {
 name: v-valo args: []
}
&lt;/pre&gt;
    &lt;b style=&quot;background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 18.479999542236328px;&quot;&gt;then the vaadin sass-compiler (which doesn't work in that alpha version) was run, which overwrites the right content and crashes our theme! This might happen if you didn't comment out the goal-entry from the vaadin-maven-plugin (see step 10) and then run a mvn install.&lt;/b&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;strike&gt;I was wondering why the styles.css was overwritten when a mvn install was executed because this normally only happens after a vaadin:compile-theme task  (from the vaadin maven plugin) was run and I didn't expect that task to be run when executing a install-task. But as it seems..it does.&lt;/strike&gt;&amp;nbsp;&amp;lt;-- Update: Step 10 will fix that.&lt;br /&gt;
    &lt;ol&gt;
    &lt;/ol&gt;
    &lt;h2&gt;
        Result&lt;/h2&gt;
    &lt;ol&gt;
    &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
    That's how the Vaadin-Sample-Application looks like with Valo:&lt;br /&gt;
    &lt;br /&gt;
    &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
        &lt;a href=&quot;http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-lC3BLWcmQDc/U4EM3v1LLcI/AAAAAAAAANE/4aRB18I06Z4/s1600/valo.PNG&quot; height=&quot;576&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
        &lt;a href=&quot;http://1.bp.blogspot.com/-sAhi-vf9lTc/U4EKgBDhJ2I/AAAAAAAAAM4/-N87eumCEko/s1600/valo.PNG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;br /&gt;
    Beautiful, isn't it?&lt;br /&gt;
    &lt;br /&gt;
    ----------&lt;br /&gt;
    &lt;br /&gt;
    &lt;b&gt;&lt;i&gt;Update 27.05.2014:&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;
    In the first version of this posting step 10 was &quot;Check if the styles.css has the right content&quot; and I wrote that I couldn't run mvn install because it overwrote the styles.css with the wrong content. So I had to let my IDE make the war-file instead of using mvn install. I fixed that now.&lt;br /&gt;
    &lt;br /&gt;
    Explaination: The task &quot;compile-theme&quot; from the vaadin-maven-plugin tries to compile the content of styles.scss and write the compiled content to styles.css (I don't know how that scss-stuff works in detail). BUT &lt;b&gt;the compiler used by the compile-theme-task doesn't work&lt;/b&gt; in the used alpha-version (the Vaadin guys say it will work in the final release). Because it doesn't work we need to install a compiler which works the correct way (we do this by installing ruby and running the command from step 8 and 9). After running that command the styles.css is valid and &lt;b&gt;we don't want to run the compile-theme task&lt;/b&gt; anymore because it will overwrite the styles.css with invalid content. The vaadin-maven-plugin says by its &amp;lt;execution&amp;gt; --&amp;gt; &amp;lt;goal&amp;gt;-entries that those &amp;lt;goal&amp;gt; entries should be run when mvn package or install is called. That's the reason why we have to comment out the compile-theme-task in our pom.xml. After doing that we can just use mvn install as always and then deploy the war-file.&lt;/div&gt;
&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/marco-ebbinghaus&quot; rel=&quot;author&quot;&gt;Marco Ebbinghaus&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-05-25&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>Big data collections with MapDB</title>
        <category label="java"/>
        <category label="javafx"/>
        <category label="mapdb"/>
        <published>2014-06-11T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/06/11/big-data-collections-with-mapdb.html&quot; rel=&quot;tag&quot;&gt;Big data collections with MapDB&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-06-11&quot;&gt;2014-06-11&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div&gt;
        This article gives a short overview over the open source software&amp;nbsp;&lt;a href=&quot;http://www.mapdb.org/&quot;&gt;MapDB&lt;/a&gt;&amp;nbsp;which is now in version 1.0.3.
    &lt;br /&gt;&lt;br/&gt;
    &lt;h2&gt;
        What is MapDB?&lt;/h2&gt;
    &lt;div&gt;
        Original designed as a storage engine for an astronomical desktop application it had two design goals &lt;b&gt;minimal overhead&lt;/b&gt; and &lt;b&gt;simplicity&lt;/b&gt;. Over the time the engine had evolved and the third goal &lt;b&gt;provide an alternative Java memory model&lt;/b&gt;&amp;nbsp;was added. So now it is a storage engine which is specialized for big data collections and for that has some cool features.&lt;br /&gt;
        For example:&lt;/div&gt;
    &lt;ul&gt;
        &lt;li&gt;Write to Heap, OffHeap, File or TempFile&lt;/li&gt;
        &lt;li&gt;Synchronization of Maps/TreeMaps/Sets and Queues&amp;nbsp;&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;Maps can also be build with composite keys&lt;/li&gt;
            &lt;li&gt;bidirectional maps&lt;/li&gt;
            &lt;li&gt;synchronization between maps (in case you have a 1-N association)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Caching&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;expiration on disk usage, access or write time&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Compression&lt;/li&gt;
        &lt;li&gt;Faceting aka Histogram&lt;/li&gt;
        &lt;li&gt;Simulated Auto-Increment&lt;/li&gt;
        &lt;li&gt;Transactions (Note: a single transaction can only be used once)&lt;/li&gt;
        &lt;li&gt;Querying&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;h2&gt;
        Small Example&lt;/h2&gt;
    The following example shows the simplicity in the context of IoT where i put 10 million temperature values into a collection which is backed by an off-heap and group the values into five groups (cold, fresh, warm, hot and burns). For filling the cache I also use auto increment.&lt;/div&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
    public class TemperatureRepository {
    private final Atomic.Long keyinc;
    private ConcurrentHashMap&amp;lt;String, Long&amp;gt; histogram;
    private HTreeMap&amp;lt;Long, Integer&amp;gt; temperatureMap;

    public TemperatureRepository() {
        //Create off-heap memory cache
        temperatureMap = DBMaker.newCache(1.0);

        //Get Autoincrement counter
        DB db = new DB(temperatureMap.getEngine());
        keyinc = db.getAtomicLong(&quot;map_temp&quot;);

        // histogram, category is a key, count is a value
        histogram = new ConcurrentHashMap&amp;lt;String, Long&amp;gt;(); //any map will do

        // bind histogram to primary map
        // we need function which returns category for each map entry
        Bind.histogram(temperatureMap, histogram, (key, value) -&amp;gt; {
            String ret = null;

            if (value &amp;lt; 0) {
                ret = &quot;cold&quot;;
            } else if (value &amp;lt; 10) {
                ret = &quot;fresh&quot;;
            } else if (value &amp;lt; 20) {
                ret = &quot;warm&quot;;
            } else if (value &amp;lt; 30) {
                ret = &quot;hot&quot;;
            } else {
                ret = &quot;burns&quot;;
            }
            return ret;
        });
    }

    public void add(int temperature) {
        temperatureMap.put(keyinc.incrementAndGet(), temperature);
    }

    public void printHistogram() {
        System.out.println(histogram);
    }

    public static void main(String[] args) {
        TemperatureRepository temperatureRepository = new TemperatureRepository();
        new Random().ints(-10,40).parallel().limit(1_000_000).forEach(e-&amp;gt; temperatureRepository.add(e));
        temperatureRepository.printHistogram();
    }
}
&lt;/pre&gt;
&lt;div&gt;
    &lt;br /&gt;
    &lt;h2&gt;
        Fazit&lt;/h2&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
    Until now I haven't had the chance to use MapDB in a productive environment but on our playground at&amp;nbsp;&lt;a href=&quot;http://www.rapidpm.org/&quot;&gt;www.rapidpm.org&lt;/a&gt;&amp;nbsp;it makes a very good impression.&lt;/div&gt;

&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-06-11&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>Das ist der Inhalt der in Kurzform angezeigt werden soll</summary>
    </entry>
    <entry>
        <title>PBKDF2 1.1.0 is now available</title>
        <category label="JAAS"/>
        <category label="JavaEE"/>
        <category label="JBoss"/>
        <category label="Security"/>
        <category label="Wildfly"/>
        <published>2014-10-15T00:00:00+02:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/10/15/pbkdf2-1.1.0-is-now-available.html&quot; rel=&quot;tag&quot;&gt;PBKDF2 1.1.0 is now available&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-10-15&quot;&gt;2014-10-15&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;div&gt;
        This article gives a short overview over the newest features of the PBKDF2 implementation from Matthias Gaertner. If you don't know what it is and
        what it does no problem. You can read here more about it &lt;a href=&quot;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&quot;&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;
    &lt;br /&gt;&lt;br/&gt;
    &lt;h2&gt;What is new and noteworthy?&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;Fixed warnings on Wildfly 8 due to old picketbox dependency&lt;/li&gt;
            &lt;li&gt;Uploaded to &lt;b&gt;Maven Central&lt;/b&gt;&lt;/li&gt;
            &lt;li&gt;Usage of CI with Travis CI&lt;/li&gt;
            &lt;li&gt;Added more Tests&lt;/li&gt;
            &lt;li&gt;Added sample web application for Wildfly 8 Integration&lt;/li&gt;
            &lt;li&gt;Added more documentation&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        One of the major improvements of this release is the internal refactoring from direct dependencies to gradle so that there is now a much better dependency
        management possible (e.g. Older versions, for example 1.0.5, had problems with newer picketbox versions of Wildfly 8 which lead to log warnings and were not convincing).
        On top of that it was now possible to upload the artefact to maven central:

&lt;pre class=&quot;brush: xml&quot;&gt;
&lt;dependency&gt;
   &lt;groupId&gt;de.rtner&lt;/groupId&gt;
   &lt;artifactId&gt;PBKDF2&lt;/artifactId&gt;
   &lt;version&gt;1.1.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;/pre&gt;

        &lt;br/&gt;
        Please let us know if you encounter any issues, or have any feedback on usability, at &lt;a href=&quot;https://github.com/m9aertner/PBKDF2&quot;&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;.
    &lt;/div&gt;
&lt;br/&gt;
    &lt;h2&gt;Read more about PBKDF2&lt;/h2&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&quot;&gt;http://www.rapidpm.org/2014/02/03/one-way-to-deadlock-a-jboss-as-7.html&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/m9aertner/PBKDF2&quot;&gt;https://github.com/m9aertner/PBKDF2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md&quot;&gt;https://github.com/m9aertner/PBKDF2/blob/master/README-WildFly8.md&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-10-15&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary>This article informs you about the new changes</summary>
    </entry>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 1</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <published>2014-10-31T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html&quot; rel=&quot;tag&quot;&gt;Is your JUnit KnowHow up to date? - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-10-31&quot;&gt;2014-10-31&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
Most of the Java developers know JUnit for many years and probably use it on a daily basis. But like all things
JUnit evolves and so should we. Especially if your test code lacks in view of readability, understandability and clean code
you should have a closer look at some of the newer features of JUnit.
The upcoming blog series starting with this article covering the JUnit basics
will take a close look on the internals, concepts and best practices of JUnit nowadays.&lt;br/&gt;&lt;br/&gt;

JUnit (current version 4.11) itself is a test framework which provides some annotations, interfaces and utility classes
which can be used to write test classes, lifecycle methods and test methods that will ensure the correctness of your business code.
It is widely known and used and plays a big role when it comes to continuous integration and agile projects.&lt;br/&gt;&lt;br/&gt;

&lt;h2&gt;Test classes&lt;/h2&gt;

A test class is just a plain java class and nothing more. In view of JUnit it is managed through a &lt;i&gt;JUnitRunner&lt;/i&gt; which normally provides
a lifecycle.
Like many framework nowadays JUnit follows the CoC (Convention over Configuration)
which basically means that you only have to declare things that are not part of the convention. That way your code keeps small and
therefore is more readable and understandable. Considering JUnit test classes it means that you can provide your own &lt;i&gt;JUnitRunner&lt;/i&gt; but JUnit already
                                               provides a default &lt;i&gt;JUnitRunner&lt;/i&gt; (internally mapped to &lt;i&gt;BlockJUnit4ClassRunner&lt;/i&gt;). This default &lt;i&gt;JUnitRunner&lt;/i&gt; inherits from &lt;i&gt;
                                                ParentRunner&lt;/i&gt; which provides you
                                               a lifecycle which is shown in the following image and will be explained further in this article.
                                               &lt;img src=&quot;JUnitLifecycle_simple.png&quot;/&gt;
                                               But keep in mind that this lifecycle represents only the default lifecycle. If you develop your own &lt;i&gt;JUnitRunner&lt;/i&gt; or using other JUnit-Rules it can be something really different.
                                               But those topics i will cover in another blog post.&lt;br/&gt;

&lt;h2&gt;Lifecycle methods&lt;/h2&gt;
A lifecycle method here is a method which is marked with one of the following annotations and can be used to configure your tests.
&lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;
        &lt;th&gt;Annotation&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;@BeforeClass&lt;/td&gt;
        &lt;td&gt;Static methods (can occur multiple times) to initialize things on the test class level. The order is dependent on the
        underlying JVM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;@AfterClass&lt;/td&gt;
        &lt;td&gt;Static methods (can occur multiple times) to clean up things on the test class level. The order is dependent on the
                                                                                                         underlying JVM&lt;/td&gt;
    &lt;/tr&gt;
     &lt;tr&gt;
            &lt;td&gt;@Before&lt;/td&gt;
            &lt;td&gt;Non Static methods (can occur multiple times) to initialize things on the test method level. The order is dependent on the
            underlying JVM&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;@After&lt;/td&gt;
            &lt;td&gt;Non Static methods (can occur multiple times) to clean up things on the test method level. The order is dependent on the
            underlying JVM&lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;
As already mentioned above this is just the half truth because since JUnit 4.7 the concept of rules are integrated.&lt;br/&gt;&lt;br/&gt;

One important point: As you can see in the lifecycle diagram above both (the constructor and &lt;i&gt;@Before&lt;/i&gt; annotated methods) are executed before each
test method and therefore seem to have the same semantic (at least
from the test-method point of view). But there are some important differences to keep in mind:
&lt;ul&gt;
    &lt;li&gt;It breaks the symmetry between &lt;i&gt;@Before&lt;/i&gt; and &lt;i&gt;@After&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt;If the constructor throws an exception &lt;i&gt;@After&lt;/i&gt; is not
        executed
    &lt;/li&gt;
    &lt;li&gt;JUnit can be used with several other frameworks (e.g.
        Mockito) which rely on the lifecycle at least partially. Therefor using the
        constructor for initializing can lead for example to &lt;i&gt;NullPointerExceptions&lt;/i&gt;.
    &lt;/li&gt;
&lt;/ul&gt;
Looking at that it is reasonable to say prefer &lt;i&gt;@Before&lt;/i&gt; to the constructor.&lt;br/&gt;

One historical note: The usage of annotations is available since JUnit 4.0. Before that you had to follow a naming convention (e.g. test methods
has to start with &quot;test&quot;). &lt;br/&gt;&lt;br/&gt;

&lt;h2&gt;Test methods&lt;/h2&gt;
A test method for JUnit is a non static, public method which is marked with a &lt;i&gt;@Test&lt;/i&gt; annotation. Such a method should contain so
called assertions and/or assumptions (yes - there are use cases with none of them). The difference between them is that a cause of an assertion leads
to a fail of the test method because an AssertionError is thrown. Indeed an assumption also throws an exception (AssumptionViolatedException) but this one
marks the test just as ignored. So an assumption has more the semantic of a useless test which could be the case if you rely on another system
which is not running or cannot be started.&lt;br/&gt;
The following table shows the basic assertions which are part of the &lt;i&gt;Assert&lt;/i&gt; class.
&lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;
        &lt;th&gt;Assert&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertTrue&lt;/td&gt;
        &lt;td&gt;Checks whether a given condition is true. Fails if condition
            is false. Example: assertTrue(&quot;User not signed up&quot;,user.isSignUp())
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertFalse&lt;/td&gt;
        &lt;td&gt;Opposite of assertTrue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNull&lt;/td&gt;
        &lt;td&gt;Checks whether a given object is null. Fails if object is
            not null. Example: assertNull(calculator)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotNull&lt;/td&gt;
        &lt;td&gt;Opposite of assertNull&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertSame&lt;/td&gt;
        &lt;td&gt;Checks whether two objects are reference the same object.
            Fails if not. Example: assertSame(&quot;Hallo Welt&quot;, &quot;Hallo &quot; + &quot;Welt&quot;)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotSame&lt;/td&gt;
        &lt;td&gt;Opposite of assertSame. Example: assertNotSame(&quot;Hallo Welt&quot;,
            new String(&quot;Hallo Welt&quot;))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertEquals&lt;/td&gt;
        &lt;td&gt;Checks whether two objects are equal. Example:
            assertEquals(&quot;Hallo Welt&quot;, new String(&quot;Hallo Welt&quot;))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertNotEquals&lt;/td&gt;
        &lt;td&gt;Opposite of assertEquals&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertArrayEquals&lt;/td&gt;
        &lt;td&gt;Checks whether two arrays are identical in length and
            elements. Example: assertArrayEquals(new int[]{1,2}, new int[]{1,2})
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assertThat&lt;/td&gt;
        &lt;td&gt;Makes use of a matcher which describes itself to give
            feedback if it fails. Example: assertThat(new String(&quot;Hallo Welt&quot;),
            equalTo(&quot;Hallo Welt&quot;))
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;fail&lt;/td&gt;
        &lt;td&gt;Throws an &lt;i&gt;AssertionError&lt;/i&gt; so that the test will fail
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
Also note that every assert method is overloaded with an additional errorMessage
String in front of the parameter list. This is considered best practice because it makes the assertion or assumption more
readable and significant if something goes wrong (FYI: There is also an explicit
                                                                       PMD-Rule &lt;i&gt;JUnitAssertionsShouldIncludeMessage&lt;/i&gt; for that).&lt;br/&gt;&lt;br/&gt;

&lt;table border=&quot;1&quot;&gt;
    &lt;tr&gt;
        &lt;th&gt;Assume&lt;/th&gt;
        &lt;th&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeTrue&lt;/td&gt;
        &lt;td&gt;Checks whether a given condition is true. Skips test and marks it as ignored if condition
            is false. Example: assumeTrue(&quot;User not signed up&quot;,user.isSignUp())
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeFalse&lt;/td&gt;
        &lt;td&gt;Opposite of assumeTrue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeNotNull&lt;/td&gt;
        &lt;td&gt;Checks whether one or many given objects are not null. Skips test and marks it as ignored otherwise. Example: assertNull(calculator)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeNoException&lt;/td&gt;
        &lt;td&gt;Checks whether a given &lt;i&gt;Throwable&lt;/i&gt; is not thrown. Otherwise test is skipped and marked as ignored.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;assumeThat&lt;/td&gt;
        &lt;td&gt;Makes use of a matcher to check if a condition is true. If not test is skipped and marked as ignored.
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

At this point i left out the following points because they would blow up this article. So stay tuned and read more
in one of the following topics:
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;assertThat&lt;/i&gt; with the big topic &lt;i&gt;Matcher&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Example&lt;/h2&gt;
So far i had only covered theory. Now i am giving a simple example which uses annotations.
The calculator here is specialized for integers but could be easily extended for other numeric types. Our functional methods
would be add, subtract, multiply and divide.

	&lt;pre brush=&quot;java&quot;&gt;
public class Calculator {

	public int add(int a, int b) {
		return a + b;
	}

	public int subtract(int a, int b) {
		return a - b;
	}

	public int multiply(int a, int b) {
		return a * b;
	}

	public int divide(int a, int b) {
		return a / b;
	}
}&lt;/pre&gt;
So far nothing special so let us have a look at the test. I created a test method for each public method of the
calculator and used the
&lt;i&gt;@Before&lt;/i&gt; annotated method to initialize the calculator. That way each time before the test method is executed the calculator is newly initialized. The reason for
that is quite simple - i want to eliminate possible side effects in the future (which could occur if i would use &lt;i&gt;@BeforeClass&lt;/i&gt;)
and do not want to violate the DRY (Don't Repeat Yourself) principle (which would occur if i would initialize the calculator in every test
method).
&lt;br/&gt;
	&lt;pre brush=&quot;java&quot;&gt;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

public class CalculatorSimpleTest {

	Calculator calculator;

	@Before
	public void setUp() throws Exception {
		calculator = new Calculator();
	}

	@Test
	public void testAdd() {
		String errorMessage = &quot;Adding failed&quot;;
		int expected = 3;
		int add = calculator.add(1, 2);
		assertEquals(errorMessage, expected, add);

		// Bad assertTrue(3==calculator.add(1, 2));
		// Bad assertSame(3, calculator.add(1, 2));
	}

	@Test
	public void testSubtract() {
		String errorMessage = &quot;Subtracting failed&quot;;
		int expected = -1;
		int add = calculator.subtract(1, 2);
		assertEquals(errorMessage, expected, add);
	}

	@Test
	public void testMultiply() {
		String errorMessage = &quot;Multiplying failed&quot;;
		int expected = 2;
		int add = calculator.multiply(1, 2);
		assertEquals(errorMessage, expected, add);
	}

	@Test
	public void testDivide() {
		String errorMessage = &quot;Dividing failed&quot;;
		int expected = 0;
		int add = calculator.divide(1, 2);
		assertEquals(errorMessage, expected, add);
	}
}
&lt;/pre&gt;
As you can see every test method checks an expected value against an
actual computation result. If there is a mismatch an assertion error is
thrown. &lt;br/&gt;
If something went wrong (here i changed the expected result of the multiply method) you can see corresponding error message.
&lt;br/&gt;
&lt;img src=&quot;message.png&quot;/&gt;

&lt;h2&gt;ExceptionHandling&lt;/h2&gt;
Now you are able to develop standard tests and in many cases this
should be sufficient (for the moment :)). But in view of testing
exceptions your test classes can suffer really fast. Considering the
calculator you can see easily that at least the divide method needs one
more test.
	&lt;pre brush=&quot;java&quot;&gt;
	@Test
	public void testDivide_WithZero_WillFail() {
		assertEquals(0, calculator.divide(1, 0));
	}
	&lt;/pre&gt;
This test will fail because an
&lt;i&gt;ArithmeticException&lt;/i&gt; is thrown. But lets assume that this
behavior (throwing the exception) is correct because i want the
client handle the exception. So with a naive small refactoring i can get
this.

	&lt;pre brush=&quot;java&quot;&gt;
	@Test
	public void testDivide_WithZero_WillFail() {
		try {
			assertEquals(0, calculator.divide(1, 0));
			fail();
		} catch (ArithmeticException e) {
			// Bad
		}
	}
	&lt;/pre&gt;
Ok, now i have tested the correct behavior but the resulting test code
does not look good. I have boiler-plate code and doubled the size of my previous test code therefore it is less
understandable. A better way to do that is using the
&lt;i&gt;@Test&lt;/i&gt; annotation the following way.
	&lt;pre brush=&quot;java&quot;&gt;
	@Test(expected = ArithmeticException.class)
	public void testDivide_WithZero_WillFail() {
		assertEquals(0, calculator.divide(1, 0));
	}
	&lt;/pre&gt;
This test method only fails if the
&lt;i&gt;ArithmeticException&lt;/i&gt; is not thrown.&lt;br/&gt;&lt;br/&gt;

So this is what i consider as the JUnit basics but there will be more in the upcoming articles.&lt;br/&gt;
Have fun coding.&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-10-31&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary></summary>
    </entry>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 1 Quiz</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <category label="Quiz"/>
        <published>2014-11-04T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/11/04/is-your-junit-knowhow-up-to-date-part-.html&quot; rel=&quot;tag&quot;&gt;Is your JUnit KnowHow up to date? - Part 1 Quiz&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-11-04&quot;&gt;2014-11-04&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;p&gt;
This short review quiz is related to the previous article &lt;a href=&quot;http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;b&gt;1.&lt;/b&gt; What JUnit version introduced annotations for handling the simple lifecycle?&lt;br/&gt;
    &lt;ul&gt;
    &lt;li&gt;since 1.0&lt;/li&gt;
    &lt;li&gt;since 3.6&lt;/li&gt;
    &lt;li&gt;since 4.0&lt;/li&gt;
    &lt;li&gt;since 4.7&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;3.&lt;/b&gt; Why should you prefer &lt;i&gt;@Before&lt;/i&gt; annotated methods in comparison to the constructor? Because&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;it does not break the symmetry of the lifecycle&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;@Before&lt;/i&gt; should not be preferred&lt;/li&gt;
    &lt;li&gt;&lt;i&gt;@Before&lt;/i&gt; methods handle exceptions while constructors not&lt;/li&gt;
    &lt;li&gt;other frameworks rely on that&lt;/li&gt;
    &lt;/ul&gt;
&lt;b&gt;4.&lt;/b&gt; Can you use more than one &lt;i&gt;@Before&lt;/i&gt; annotated method in a test class?&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;yes&lt;/li&gt;
    &lt;li&gt;no&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;5.&lt;/b&gt; Which method qualifiers must be used for a &lt;i&gt;@AfterClass&lt;/i&gt; method?&lt;br/&gt;
   &lt;ul&gt; &lt;li&gt;protected&lt;/li&gt;
    &lt;li&gt;static&lt;/li&gt;
    &lt;li&gt;public&lt;/li&gt;
    &lt;li&gt;final&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;6.&lt;/b&gt; What happens if a public method is annotated with &lt;i&gt;@Before&lt;/i&gt;, &lt;i&gt;@Test&lt;/i&gt; and &lt;i&gt;@After&lt;/i&gt;?&lt;br/&gt;
    &lt;ul&gt;&lt;li&gt;Runtime-/ValidationError&lt;/li&gt;
    &lt;li&gt;CompilerError&lt;/li&gt;
    &lt;li&gt;Runs fine&lt;/li&gt;&lt;/ul&gt;

&lt;b&gt;7.&lt;/b&gt; What is the simplest way (considering clean code) to handle exceptions?&lt;br/&gt;
    &lt;ul&gt;&lt;li&gt;use try/catch&lt;/li&gt;
    &lt;li&gt;use @Test(expected=....class)&lt;/li&gt;
    &lt;li&gt;it is integrated in JUnit&lt;/li&gt;&lt;/ul&gt;
&lt;b&gt;8.&lt;/b&gt; What is the result of the following code?

&lt;pre brush=&quot;java&quot;&gt;
public class LifecycleTest {

    @Before
    public void before() {
        System.out.print(&quot;3&quot;);
    }

    public LifecycleTest() {
        System.out.print(&quot;2&quot;);
    }

    @BeforeClass
    public static void beforeClass() {
        System.out.print(&quot;1&quot;);
    }

    @Test
    public void test() {
        System.out.print(&quot;4&quot;);
    }

    @Test
    public void test2(){
        System.out.print(&quot;5&quot;);
    }

    @After
    public void after() {
        System.out.print(&quot;6&quot;);
    }
}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;RuntimeException&lt;/li&gt;
&lt;li&gt;123456&lt;/li&gt;
&lt;li&gt;123462356&lt;/li&gt;
&lt;li&gt;Not predictable, depends on JVM&lt;/li&gt;
&lt;/ul&gt;

The solutions can be found here in white color: &lt;font color=&quot;white&quot;&gt;1c; 2acd; 3a; 4bc; 5c; 6b; 7d; &lt;/font&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-11-04&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary></summary>
    </entry>
    <entry>
        <title>AngularJS directives put to use - Part 1</title>
        <category label="HTML"/>
        <category label="AngularJS"/>
        <published>2014-11-10T00:00:00+01:00</published>
        <author>
            <name>Oliver Milke</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/11/10/angularjs-directives-put-to-use-part-1.html&quot; rel=&quot;tag&quot;&gt;AngularJS directives put to use - Part 1&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-11-10&quot;&gt;2014-11-10&lt;/time&gt; &lt;a href=&quot;/team/oliver-milke&quot; rel=&quot;author&quot;&gt;from Oliver Milke&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; is a JavaScript framework that greatly assists in building rich client-side web applications. It pushes techniques
well known among backend developers to the frontend, for instance dependency injection (DI) or expression binding (more precisely two-way-binding).&lt;/p&gt;

&lt;p&gt;Another truly helpful element of AngularJS are &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;directives&lt;/a&gt;. You can think of directives as your own means of extending HTML. Or consider it as a means
to reduce repetitive code in HTML and therefore making it more readable and improving maintainability.&lt;/p&gt;

&lt;p&gt;This blog entry assumes a basic knowledge of AngularJS' controller concept and how to bind to bind a value of the controller with {{}}.&lt;/p&gt;

&lt;h2&gt;A Nav-Bar with Bootstrap&lt;/h2&gt;

&lt;h3&gt;Initial Situation&lt;/h3&gt;
&lt;p&gt;For a little app I currently develop, I copied the basic nav bar example from the Bootstrap example and extended it with a some behaviour:&lt;/p&gt;

&lt;pre brush=&quot;html&quot;&gt;
&amp;lt;li class=&quot;dropdown&quot; ng-class=&quot;{
    active: isActive('/categories') || isActive('/fortune') ||
    isActive('/entry-report') || isActive('/savings') || isActive('/audit')
    }&quot;&amp;gt;

    &amp;lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&amp;gt;
        &amp;lt;span class=&quot;glyphicon glyphicon-stats&quot;&amp;gt;&amp;lt;/span&amp;gt; Reports &amp;lt;b class=&quot;caret&quot;&amp;gt;&amp;lt;/b&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;ul class=&quot;dropdown-menu&quot;&amp;gt;
        &amp;lt;li ng-class=&quot;{active: isActive('/categories')}&quot;&amp;gt;
            &amp;lt;a href=&quot;#/categories&quot;&amp;gt;Categories&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li ng-class=&quot;{active: isActive('/entry-report')}&quot;&amp;gt;
            &amp;lt;a href=&quot;#/entry-report&quot;&amp;gt;Entries&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li ng-class=&quot;{active: isActive('/savings')}&quot;&amp;gt;
            &amp;lt;a href=&quot;#/savings&quot;&amp;gt;Savings&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li ng-class=&quot;{active: isActive('/fortune')}&quot;&amp;gt;
            &amp;lt;a href=&quot;#/fortune&quot;&amp;gt;Fortune&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li ng-class=&quot;{active: isActive('/audit')}&quot;&amp;gt;
            &amp;lt;a href=&quot;#/audit&quot;&amp;gt;Audit&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

    &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ng-class&lt;/code&gt; is used to add a CSS classes to the element if the specified condition is met. &lt;code&gt;isActive&lt;/code&gt; is a method of the corresponding
AngularJS controller, which simply returns &lt;code&gt;true&lt;/code&gt; if the currently active URI of the application ends with the provided string. This way an item is
highlighted if the respective link is displayed.&lt;/p&gt;

&lt;p&gt;As you can see, there is some repetition if you want to add another entry to the nav bar. You always have to specify the URI for &lt;code&gt;isActive&lt;/code&gt; and the
&lt;code&gt;href&lt;/code&gt; attribute. Additionally every nav bar entry mostly looks the same, except for the URI and the title of the link.&lt;/p&gt;

&lt;p&gt;There is a better way: an AngularJS directive helps us to remove the repetition with both of the above mentioned problems.&lt;/p&gt;

&lt;h3&gt;The solution&lt;/h3&gt;

&lt;p&gt;We create a directive:&lt;/p&gt;

&lt;pre brush=&quot;javascript&quot;&gt;
var myDirectives = angular.module('myApp.directives', []);

myDirectives.directive('navEntry', ['$location', function ($location) {

    function link(scope, element, attrs) {

        function setSafeLink(element) {

            var link = element.find('a');
            link.attr('href', '#' + attrs.path);
        }

        setSafeLink(element);

        scope.$watch(function () {
            return $location.path();
        }, function (newLocation) {

            if (attrs.path === newLocation) {
                element.addClass('active');
            } else {
                element.removeClass('active');
            }
        });
    }

    return {
        replace: true,
        restrict: 'E',
        scope: {
            path: '@',
            title: '@'
        },
        templateUrl: '/js/directives/navEntry/nav-entry.html',
        link: link
    };


}]);
&lt;/pre&gt;

&lt;figure style=&quot;float: right; margin: 5px 0 5px 15px; text-align: center&quot;&gt;
    &lt;img src=&quot;http://www.rapidpm.org/2014/11/10/folderStructure.png&quot; &gt;
    &lt;figcaption&gt;Folder Structure&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is the template, that the directives links to:&lt;/p&gt;

&lt;pre brush=&quot;html&quot;&gt;
&amp;lt;li&amp;gt;
    &amp;lt;a &amp;gt;{{title}}&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Here are the core explanations&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;the name of the directive is &lt;code&gt;navEntry&lt;/code&gt;, which means it can be used as &lt;code&gt;&amp;lt;nav-entry&amp;gt;&lt;/code&gt; in the HTML. This is Angulars standard way of using directives.&lt;/li&gt;
    &lt;li&gt;we depend on &lt;code&gt;$location&lt;/code&gt; being injected (for checking which URI is currently active)&lt;/li&gt;
    &lt;li&gt;the function &lt;code&gt;link(scope, element, attrs)&lt;/code&gt; is executed once for each actual usage (instance) of the directive&lt;/li&gt;
     &lt;ul&gt;
         &lt;li&gt;the link of our navigation entry is set with &lt;code&gt;setSafeLink()&lt;/code&gt; to the value of the path attribute and the title of the title attribute of the directive instance&lt;/li&gt;
         &lt;li&gt;a listener, which triggers when the URI changes, is registered&lt;/li&gt;
         &lt;li&gt;if the URI changes, we check whether the currently active URI matches the path attribute of the directive instance (which governs whether or not the navigation entry is active)&lt;/li&gt;
     &lt;/ul&gt;
    &lt;li&gt;&lt;code&gt;restrict: 'E'&lt;/code&gt;: the directive is used like a separate element&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;templateUrl&lt;/code&gt;: the path of content of the directive&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;scope&lt;/code&gt;:&lt;/li&gt;
        &lt;ul&gt;
            &lt;li&gt;this defines an own scope for each directive instance, isolated from the scope of the controller actually being responsible (isolate scope)&lt;/li&gt;
            &lt;li&gt;path: '@' the directive element shall have an attribute path, which value is mapped to the scope property path &lt;code&gt;(&amp;lt;nav-bar path=&quot;/mypath&quot;&amp;gt;)&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;shorthand notation for &lt;code&gt;path: '@path'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;li&gt;&lt;code&gt;replace: true&lt;/code&gt;: means that the directive usage in the HTML is replaced by content of the template of the
        directive when building the final DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually I wanted to set the &lt;code&gt;href&lt;/code&gt; attribute in the template, but AngularJS has some security mechanism that prevents us from using something like&lt;/p&gt;

&lt;pre brush=&quot;html&quot;&gt;
    &amp;lt;a href=&quot;#{{path}}&quot;&amp;gt;...&amp;lt;/a&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That's why setSafeLink() adds href instead.&lt;/p&gt;

&lt;h3&gt;The Result&lt;/h3&gt;
        
&lt;pre brush=&quot;html&quot;&gt;
&amp;lt;li class=&quot;dropdown&quot; ng-class=&quot;{
    active: isActive('/categories') || isActive('/fortune') ||
    isActive('/entry-report') || isActive('/savings') || isActive('/audit')
    }&quot;&amp;gt;

    &amp;lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&amp;gt;
        &amp;lt;span class=&quot;glyphicon glyphicon-stats&quot;&amp;gt;&amp;lt;/span&amp;gt; Reports &amp;lt;b class=&quot;caret&quot;&amp;gt;&amp;lt;/b&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;ul class=&quot;dropdown-menu&quot;&amp;gt;

        &amp;lt;nav-entry path=&quot;/categories&quot; title=&quot;Category Overview&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

        &amp;lt;nav-entry path=&quot;/category&quot; title=&quot;Category&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

        &amp;lt;nav-entry path=&quot;/entry-report&quot; title=&quot;Entries&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

        &amp;lt;nav-entry path=&quot;/savings&quot; title=&quot;Savings&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

        &amp;lt;nav-entry path=&quot;/fortune&quot; title=&quot;Fortune&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

        &amp;lt;nav-entry path=&quot;/audit&quot; title=&quot;Balance Audit&quot;&amp;gt;&amp;lt;/nav-entry&amp;gt;

    &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a lot less code than in the initial setup and adding a new navigation entry is pretty easy now. We removed the duplication of the URI string, which is a
little less error prone. Moreover, we now could the change the template in one place instead of touching all navigation entries, which makes it DRY.&lt;/p&gt;

&lt;p&gt;The idea could even be taken a little further. A potential next step is to make the whole dropdown element a separate directive, which could lift the need to
separately list each &lt;code&gt;isActive('/...') &lt;/code&gt; branch for the contained &amp;lt;nav-bar&amp;gt;.&lt;/p&gt;

&lt;h2&gt;Outlook&lt;/h2&gt;
&lt;p&gt;Stay tuned for another example of what you can do with directives in part 2. Next time we'll have a look into how to format currency values.&lt;/p&gt;&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/oliver-milke&quot; rel=&quot;author&quot;&gt;Oliver Milke&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-11-10&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary></summary>
    </entry>
    <entry>
        <title>Is your JUnit KnowHow up to date? - Part 2</title>
        <category label="Java"/>
        <category label="JUnit"/>
        <category label="Test"/>
        <published>2014-11-24T00:00:00+01:00</published>
        <author>
            <name>Alexander Bischof</name>
        </author>
        <content type="html">&lt;article class=&quot;article clearfix&quot;&gt;
							&lt;header class=&quot;article-header&quot;&gt;
								&lt;h2 class=&quot;article-title&quot;&gt;&lt;a href=&quot;/2014/11/24/is-your-junit-knowhow-up-to-date-part-.html&quot; rel=&quot;tag&quot;&gt;Is your JUnit KnowHow up to date? - Part 2&lt;/a&gt;&lt;/h2&gt;
								&lt;p&gt;&lt;time datetime=&quot;2014-11-24&quot;&gt;2014-11-24&lt;/time&gt; &lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;from Alexander Bischof&lt;/a&gt;&lt;/p&gt;
							&lt;/header&gt;
							&lt;div class=&quot;article-content clearfix&quot;&gt;
								&lt;div class=&quot;post-thumb&quot;&gt;
									&lt;img src=&quot;./site/content/post_thumb.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;&quot; /&gt;
								&lt;/div&gt;
								&lt;div class=&quot;post-excerpt&quot;&gt;This time i want to cover the topic of aggregating JUnit tests
 which is also part of my blog series &lt;i&gt;Is your JUnit knowhow up to date?&lt;/i&gt; The last article can be found
 &lt;a href=&quot;http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html&quot;&gt;here&lt;/a&gt;. So let us get started.

&lt;h3&gt;Suites&lt;/h3&gt;

A JUnit &lt;i&gt;Suite&lt;/i&gt; is the simplest and oldest way to aggregate JUnit tests. You can use it by annotating your test suite
with &lt;i&gt;@Suite&lt;/i&gt; as you can see in the following code snippet:&lt;br/&gt;

&lt;pre class=&quot;brush: java&quot;&gt;
@RunWith(Suite.class)
@Suite.SuiteClasses({CalculatorSimpleTest.class, CalculatorPerformanceTest.class})
public class CalculatorSuite {
}
&lt;/pre&gt;
Basically you tell JUnit to look out for the class array of the &lt;i&gt;@Suite.SuiteClasses&lt;/i&gt; which contains all the classes of
 the suite. But there is a little bit more. &lt;i&gt;Suite&lt;/i&gt; itself inherits from &lt;i&gt;ParentRunner&lt;/i&gt; which i covered in the last
 &lt;a href=&quot;http://www.rapidpm.org/2014/10/31/is-your-junit-knowhow-up-to-date-part-.html&quot;&gt;article&lt;/a&gt;.
Therefore &lt;i&gt;Suites&lt;/i&gt; have a lifecycle but in comparison to the default runner only include the &lt;i&gt;Class Ready&lt;/i&gt; lifecycle methods
which are:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;@BeforeClass&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;@AfterClass&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Class Rules (i have not covered it yet)&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
But although it is technically possible to used them it does not mean that it is good. In general a suite class should only act as an
aggregation container. One reason for that is that suite classes can be listed in suites and categories itself so that you can build up
hierarchical test structures. If you now use lifecycle methods in your suites you probably decrease understandability and your isolation
between your suites.&lt;br/&gt;&lt;br/&gt;

I also took a deep look at the &lt;i&gt;Suite.SuiteClasses&lt;/i&gt; annotation which i considered at first as a bad solution to the problem of aggregating test classes
and suites. The reason for that was the declarative nature of it which means that you have to declare every single class or suite. Even with IDE support nowadays this
could lead to some work if you have many classes. Considering bug fixes or enhancements of a system there is also the problem that those new tests maybe do not make
it in the test suites and therefore could lead to bad reports about the health or quality of the aggregation part.&lt;br/&gt;
On the second look i changed my mind. The first reason for that was that there are already some libraries with whom you can overcome the declarative nature problem. The
two most promising ones should be:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://johanneslink.net/projects/cpsuite.jsp&quot;&gt;ClasspathSuite&lt;/a&gt; - As the name suggests this library extends the suite idea for classpaths.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/junit-toolbox/&quot;&gt;JUnit Toolbox&lt;/a&gt; - A JUnit extension library which provides among other things
a WildcardPatternSuite which extends the suite idea for wildcards.&lt;/li&gt;
&lt;/ul&gt;
The second reason came after thinking about when aggregate tests anyway which i would do for the following topics:&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;by domain or package&lt;/li&gt;
&lt;li&gt;by test stage (for example component, integration or performance tests)&lt;/li&gt;
&lt;/ul&gt;
There are probably more topics by which you can aggregate your tests. The point is that in such cases you explicitly want to declare which tests are in that suite and which
are not. &lt;br/&gt;&lt;br/&gt;

FYI: In the old days of JUnit 3 &lt;i&gt;suites&lt;/i&gt; were recognized by a &lt;i&gt;public static Test suite()&lt;/i&gt; method in which you had to add the test classes.
&lt;br/&gt;&lt;br/&gt;

&lt;h3&gt;Categories&lt;/h3&gt;

A more flexible way to aggregate tests are &lt;i&gt;Categories&lt;/i&gt; which were introduced with JUnit 4.8 and strangely enough are still in the experimental package.
The basic concept is similar to suites which means that there is a &lt;i&gt;Categories&lt;/i&gt; class which is a JUnit runner (in detail inherits from &lt;i&gt;Suite&lt;/i&gt;) and has to be declared with &lt;i&gt;@RunWith(Categories.class)&lt;/i&gt;
on top of your aggregation container. You also have to declare your test classes with &lt;i&gt;@Suite.SuiteClasses&lt;/i&gt;.&lt;br/&gt; The new part is that you can mark your test classes and/or test methods
with &lt;i&gt;@Category&lt;/i&gt; and a marker class which is used as a filter in your test aggregation container. For that there are two more annotations &lt;i&gt;@Categories.IncludeCategory&lt;/i&gt;
and &lt;i&gt;@Categories.ExcludeCategory&lt;/i&gt; which take a category filter class (the default behavior, without any include or exclude, includes all test methods).
The only limitation i found so far is that you can use only one category marker class on the test aggregation container and that you can not
repeat those annotations.&lt;br/&gt;
An example of an aggregate container would be look like this:&lt;br/&gt;

&lt;pre class=&quot;brush: java&quot;&gt;
@RunWith(Categories.class)
@Categories.IncludeCategory(SlowTests.class)
@Suite.SuiteClasses( { CalculatorSimpleTest.class, CalculatorPerformanceTest.class})
public class OnlySlowTestSuite {}

public interface SlowTests{}
&lt;/pre&gt;

In this example i had declared a category suite which uses the test classes &lt;i&gt;CalculatorSimpleTest&lt;/i&gt; and &lt;i&gt;CalculatorPerformanceTest&lt;/i&gt; and include from that
classes only the test methods which are annotated with &lt;i&gt;@Category(SlowTests.class)&lt;/i&gt;. A &lt;i&gt;@Category&lt;/i&gt; annotation can be used on class and/or on method level and
expects an array of classes. In general it is recommended to use only one class because otherwise it could be really difficult
to understand your suite filters considering including and excluding.
&lt;br/&gt;
In the example above i declare the &lt;i&gt;SlowTests&lt;/i&gt; category class marker.

&lt;pre class=&quot;brush: java&quot;&gt;
public class CalculatorSimpleTest {

    //snip..

    @Category(SlowTests.class)
    @Test
    public void testSubstract() {
        for (int i = 0; i &lt; 10000; i++) {
            try {Thread.sleep(10l);} catch (InterruptedException e) {
                e.printStackTrace();
            }

            String errorMessage = &quot;Substracting failed&quot;;
            int expected = 1;
            int add = calculator.substract(i + 1, i);
            assertEquals(errorMessage, expected, add);
        }
    }
}
&lt;/pre&gt;

If you want to skip all slowtests you would exchange &lt;i&gt;IncludeCategory&lt;/i&gt;
with &lt;i&gt;ExcludeCategory&lt;/i&gt;.&lt;br/&gt;&lt;br/&gt;
At the time of writing this article JUnit 4.12 beta3 is released which already denotes a little change in the lifecycle handling
considering categories. Until now it was possible to use &lt;i&gt;@Category&lt;/i&gt; on lifecycle methods like &lt;i&gt;@Before&lt;/i&gt; which made
those tests very hard to understand. Therefore JUnit introduced a validation handling which prohibits this usage.&lt;br/&gt;&lt;br/&gt;



&lt;/div&gt;
							&lt;/div&gt;
							&lt;footer class=&quot;article-footer clearfix&quot;&gt;
								&lt;span class=&quot;post-author&quot;&gt;&lt;a href=&quot;/team/alexander-bischof&quot; rel=&quot;author&quot;&gt;Alexander Bischof&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
								&lt;span class=&quot;post-date&quot;&gt;&lt;a href=&quot;#&quot; rel=&quot;date&quot;&gt;2014-11-24&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&lt;/span&gt;
							&lt;/footer&gt;
						&lt;/article&gt;</content>
        <summary></summary>
    </entry>
</feed>
